#!/bin/bash

path_to_mlr="./mlr"
indir="./reg-test/input"

build-go
if [ $? -ne 0 ]; then
  exit 1
fi

# ----------------------------------------------------------------
run_mlr() {
  echo
  echo $path_to_mlr "$@"
  echo
  $path_to_mlr "$@"
}

# ----------------------------------------------------------------
mlr_expect_fail() {
  echo
  echo $path_to_mlr "$@"
  echo
  $path_to_mlr "$@"
  status=$?
  if [ $status -eq 0 ]; then
    echo "failed to fail"
  fi
}

# ----------------------------------------------------------------
run_cat() {
  echo
  echo cat "$@"
  echo
  cat "$@"
}

# ----------------------------------------------------------------
announce() {
  echo
  echo "================================================================"
  echo
  echo "$@"
}

# ----------------------------------------------------------------
mention() {
  echo
  echo ---------------------------------------------------------------- "$@"
}

# ================================================================

path_to_mlr=../c/mlr
run_mlr --opprint --from ./reg-test/input/2.dkvp put -q '
  @logging[NR] = $*;
  end {
    dump;
    for ((k1, k2), v in @logging) {
        print "K1 ". k1. " K2 ". k2.  " TK1 ". typeof(k1). " TK2 ". typeof(k2);
        @output[k1][k2] = v;
        if (k2 == "i") {
          print "BREAK";
          break;
        }
        print "POST-BREAK";
    }
    emit @output, "NR", "name"
  }'

path_to_mlr=../go/mlr
run_mlr --opprint --from ./reg-test/input/2.dkvp put -q '
  @logging[NR] = $*;
  end {
    dump;
    for ((k1, k2), v in @logging) {
        print "K1 ". k1. " K2 ". k2.  " TK1 ". typeof(k1). " TK2 ". typeof(k2);
        @output[k1][k2] = v;
        if (k2 == "i") {
          print "BREAK";
          break;
        }
        print "POST-BREAK";
    }
    emit @output, "NR", "name"
  }'

# ================================================================
