#!/bin/bash

set -euo pipefail

# ================================================================
path_to_mlr="./mlr"

run_mlr() {
  # Use just "mlr" for info messages
  echo
  echo ----------------------------------------------------------------
  echo mlr "$@"
  $path_to_mlr "$@"
}

mlr_expect_fail() {
  # Use just "mlr" for info messages
  echo mlr "$@"
  # Use path to mlr for invoking the command
  set +e
  stderr_capture=$( $path_to_mlr "$@" 3>&1 1>&2 2>&3 )
  status=$?
  echo "${stderr_capture}"
  if [ $status -ne 1 ]; then
    echo "Exit status was $status; expected 1."
  fi
  set -e
  test $status -eq 1
  # since set -e
}
# ================================================================

echo; run_mlr --from u/s.dkvp --idkvp --opprint put ''

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$j=$i+$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$j=$i+$x'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$j=$y+$x'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$j=$y+$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$j=$y+$y'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$j=$i+$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=$x*1e6'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=$x+1e6'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=$x+1'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=FILENAME'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=FILENUM'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=NF'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y=NR'

echo; run_mlr --idkvp --opprint put '$y=FNR'       u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$y=NR'        u/s.dkvp u/t.dkvp
echo; run_mlr --icsv  --opprint put '$y=FNR'       u/s.csv  u/t.csv
echo; run_mlr --idkvp --opprint put '$y=FNR+1'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$y=FNR+$i'    u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$y=FNR+3'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$y=FNR+3+$i'  u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$y=$i+$y'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$y=$i+$x'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=$x+$y'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=$x+$i'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=NR+$i'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=NR-$i'     u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=4-1'       u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=NR'        u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=$i'        u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=100*NR-$i' u/s.dkvp u/t.dkvp
echo; run_mlr --idkvp --opprint put '$z=100*$i+$x' u/s.dkvp u/t.dkvp

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100*$i+$x'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100*$i/$x'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=NR/$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100/$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100//$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100//$x'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.0//$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.0//$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.0/$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.0'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.4'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=1.2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.0/$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=100.0//$i'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=0x7fffffffffffffff  + 0x7fffffffffffffff'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=0x7fffffffffffffff .+ 0x7fffffffffffffff'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=0x7fffffffffffffff  * 0x7fffffffffffffff'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z=0x7fffffffffffffff .* 0x7fffffffffffffff'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= (~ $i) + 1'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= $i == 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= $i != 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= $i >  2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= $i >= 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= $i <  2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z= $i >= 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = $i < 5 ? "low" : "high"'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = $i ** 3'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = $x ** 0.5'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  && true'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  && false'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false && true'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false && false'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  && 4'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false && 4'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = 4     && true'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = 4     && false'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false && %%%panic%%%'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  || true'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  || false'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false || true'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false || false'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  || 4'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false || 4'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = 4     || true'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = 4     || false'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  || %%%panic%%%'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = true  ? 4 : %%%panic%%%'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = false ? %%%panic%%% : 5'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = $x ?? %%%panic%%%'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = $x ?? 999'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = $nonesuch ?? 999'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$y ??= 999'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z ??= 999'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = "abc\"def\"ghi"'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$i += 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$i *= 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$i /= 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$i |= 2'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$j = true; $j &&= $i < 2'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = [$a,$b,$i,$x,$y][1]'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = [$a,$b,$i,$x,$y][-1]'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = [$a,$b,$i,$x,$y][NR]'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '$z = {"a":$a,"b":$b,"i":$i,"x":$x,"y":$y}["b"]'

echo; run_mlr --from u/s.dkvp --from u/t.dkvp --ojson put '$z=[1,2,[NR,[FILENAME,5],$x*$y]]'

echo '{"x":1}'                                           | run_mlr --json cat
echo '{"x":[1,2,3]}'                                     | run_mlr --json cat
echo '{"x":[1,[2,3,4],5]}'                               | run_mlr --json cat
echo '{"x":[1,[2,[3,4,5],6],7]}'                         | run_mlr --json cat

echo '{"x":{}}'                                          | run_mlr --json cat
echo '{"x":{"a":1,"b":2,"c":3}}'                         | run_mlr --json cat
echo '{"x":{"a":1,"b":{"c":3,"d":4,"e":5},"f":6}}'       | run_mlr --json cat

echo '{"x":{},"y":1}'                                    | run_mlr --json cat
echo '{"x":{"a":1,"b":2,"c":3},"y":4}'                   | run_mlr --json cat
echo '{"x":{"a":1,"b":{"c":3,"d":4,"e":5},"f":6},"y":7}' | run_mlr --json cat

echo '{"x":1}'                                           | ./mlr --json cat | ./mlr --json cat
echo '{"x":[1,2,3]}'                                     | ./mlr --json cat | ./mlr --json cat
echo '{"x":[1,[2,3,4],5]}'                               | ./mlr --json cat | ./mlr --json cat
echo '{"x":[1,[2,[3,4,5],6],7]}'                         | ./mlr --json cat | ./mlr --json cat

echo '{"x":{}}'                                          | ./mlr --json cat | ./mlr --json cat
echo '{"x":{"a":1,"b":2,"c":3}}'                         | ./mlr --json cat | ./mlr --json cat
echo '{"x":{"a":1,"b":{"c":3,"d":4,"e":5},"f":6}}'       | ./mlr --json cat | ./mlr --json cat

echo '{"x":{},"y":1}'                                    | ./mlr --json cat | ./mlr --json cat
echo '{"x":{"a":1,"b":2,"c":3},"y":4}'                   | ./mlr --json cat | ./mlr --json cat
echo '{"x":{"a":1,"b":{"c":3,"d":4,"e":5},"f":6},"y":7}' | ./mlr --json cat | ./mlr --json cat

echo; run_mlr --from u/s.dkvp --idkvp --ojson put '$z = $*["a"]'
echo; run_mlr --from u/s.dkvp --idkvp --ojson put '$z = $*'

echo; run_mlr --from u/s.dkvp --idkvp --ojson put '$* = {"s": 7, "t": 8}'
echo; run_mlr --from u/s.dkvp --idkvp --ojson put '$*["st"] = 78'
echo; run_mlr --from u/s.dkvp --idkvp --ojson put '$*["a"] = 78'
echo; run_mlr --from u/s.dkvp --idkvp --ojson put '$*["a"] = {}'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$new = $["a"]'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$["new"] = $a'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '${new} = $a . $b'
echo; run_mlr --from u/s.dkvp --idkvp --opprint put -v '$new = ${a} . ${b}'

echo; run_mlr --from u/s.dkvp --idkvp --opprint put '@tmp = $a . $b; $ab = @tmp'
echo; run_mlr --ojson --from u/s.dkvp put '@curi=$i; $curi = @curi; $lagi=@lagi; @lagi=$i'
echo; run_mlr --from u/s.dkvp --ojson put '$z["abc"]["def"]["ghi"]=NR'

echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$up   = $[NR]'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$down = $[-NR]'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$up   = $*[NR]'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$down = $*[-NR]'

echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[1] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[2] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[5] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[-1] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[-2] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[-5] = "new"'
# expect fail echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[1] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '@idx = NR % 5; @idx = @idx == 0 ? 5 : @idx; $[@idx] = "NEW"'

echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$*[1] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$*[2] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$*[5] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$*[-1] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$*[-2] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$*[-5] = "new"'
# expect fail echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '$[1] = "new"'
echo; run_mlr --opprint --from u/s.dkvp --from u/t.dkvp put '@idx = NR % 5; @idx = @idx == 0 ? 5 : @idx; $*[@idx] = "NEW"'

echo; run_mlr --json put '$a=$a[2]["b"][1]' u/nested.json

echo; run_mlr --ojson --from u/2.dkvp put '$abc[FILENAME] = "def"'
echo; run_mlr --ojson --from u/2.dkvp put '$abc[NR] = "def"'
echo; run_mlr --ojson --from u/2.dkvp put '$abc[FILENAME][NR] = "def"'
echo; run_mlr --ojson --from u/2.dkvp put '$abc[NR][FILENAME] = "def"'

echo; run_mlr --ojson --from u/2.dkvp put '@abc[FILENAME] = "def"; $ghi = @abc'
echo; run_mlr --ojson --from u/2.dkvp put '@abc[NR] = "def"; $ghi = @abc'
echo; run_mlr --ojson --from u/2.dkvp put '@abc[FILENAME][NR] = "def"; $ghi = @abc'
echo; run_mlr --ojson --from u/2.dkvp put '@abc[NR][FILENAME] = "def"; $ghi = @abc'

echo; run_mlr --from u/2.dkvp --ojson put '@a = 3; $new=@a'
echo; run_mlr --from u/2.dkvp --ojson put '@a = 3; @a[1]=4; $new=@a'
echo; run_mlr --from u/2.dkvp --ojson put '@a = 3; @a[1]=4;@a[1][1]=5; $new=@a'

echo; run_mlr --from u/2.dkvp --ojson put '@a = 3; @a["x"]=4; $new=@a'
echo; run_mlr --from u/2.dkvp --ojson put '@a = 3; @a["x"]=4;@a["x"]["x"]=5; $new=@a'

echo; run_mlr -n put -v '$z=max()'
echo; run_mlr -n put -v '$z=max(1)'
echo; run_mlr -n put -v '$z=max(1,)'
echo; run_mlr -n put -v '$z=max(1,2)'
echo; run_mlr -n put -v '$z=max(1,2,)'
echo; run_mlr -n put -v '$z=max(1,2,3)'
echo; run_mlr -n put -v '$z=max(1,2,3,)'

echo; run_mlr --from u/s.dkvp --opprint put '$z = max($x,$y)'
echo; run_mlr --from u/s.dkvp --opprint put '$z = min($x,$y,$i)'
echo; run_mlr --from u/s.dkvp --opprint put '$z = abs($x)'
echo; run_mlr --from u/s.dkvp --opprint put '$c = cos(2*M_PI*NR/32); $s = sin(2*M_PI*NR/32)'

echo; run_mlr --from u/ten.dkvp --opprint put '$si = sgn($i-5); $sy = sgn($y); $t = atan2($y, $x); $p = $x ** $y; $q = pow($x, $y)'
echo; run_mlr --opprint --from u/ten.dkvp put '$q = qnorm(-5 + $i); $r = 5 + invqnorm($q)'
echo; run_mlr --from u/ten.dkvp --opprint put '$nx = bitcount($x); $ni = bitcount($i)'

echo; run_mlr --from u/s.dkvp --opprint put 'filter NR > 2'

# echo; run_mlr --from u/s.dkvp --opprint put -q '@sum += $i; emit {"sum": @sum}'
echo; run_mlr --from u/s.dkvp --opprint put -q '@sum[$a] += $i; emit {"sum": @sum}'

echo; run_mlr --from u/s.dkvp put -q '@sum += $x; dump'
echo; run_mlr --from u/s.dkvp put -q '@sum[$a] += $x; dump'
echo; run_mlr --from u/s.dkvp put -q 'begin{@sum=0} @sum += $x; end{dump}'
echo; run_mlr --from u/s.dkvp put -q 'begin{@sum={}} @sum[$a] += $x; end{dump}'
# xxx fix me
# echo; run_mlr --from u/s.dkvp put -q 'begin{@sum=[]} @sum[1+NR%2] += $x; end{dump}'
# xxx fix me
# echo; run_mlr --from u/s.dkvp put -q 'begin{} @sum[1+(NR%2)] += $x; end{dump}'

echo; run_mlr --from u/s.dkvp put 'if (NR == 1) { $z = 100 }'
echo; run_mlr --from u/s.dkvp put 'if (NR == 1) { $z = 100 } else { $z = 900 }'
echo; run_mlr --from u/s.dkvp put 'if (NR == 1) { $z = 100 } elif (NR == 2) { $z = 200 }'
echo; run_mlr --from u/s.dkvp put 'if (NR == 1) { $z = 100 } elif (NR == 2) { $z = 200 } else { $z = 900 }'
echo; run_mlr --from u/s.dkvp put 'if (NR == 1) { $z = 100 } elif (NR == 2) { $z = 200 } elif (NR == 3) { $z = 300 } else { $z = 900 }'

echo; run_mlr --from u/s.dkvp put 'NR == 2 { $z = 100 }'
echo; run_mlr --from u/s.dkvp put 'NR != 2 { $z = 100 }'

echo x=eeee | run_mlr put '$y=ssub($x, "e", "X")'
echo x=eeee | run_mlr put '$y=gsub($x, "e", "X")'
echo; run_mlr --opprint --from u/s.dkvp put '$z = truncate($a, -1)'
echo; run_mlr --opprint --from u/s.dkvp put '$z = truncate($a, 0)'
echo; run_mlr --opprint --from u/s.dkvp put '$z = truncate($a, 1)'
echo; run_mlr --opprint --from u/s.dkvp put '$z = truncate($a, 2)'
echo; run_mlr --opprint --from u/s.dkvp put '$z = truncate($a, 3)'
echo; run_mlr --opprint --from u/s.dkvp put '$z = truncate($a, 4)'

echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k in $*) { emit { "foo" : "bar" } }'
echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k in $*) { emit { "foo" : k } }'
echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k in $*) { emit { k: "bar" } }'
echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k in $*) { emit { k : k } }'

echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k,v in $*) { emit { "foo" : "bar" } }'
echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k,v in $*) { emit { "foo" : v } }'
echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k,v in $*) { emit { k: "bar" } }'
echo; run_mlr --from u/s.dkvp head -n 2 then put -q 'for (k,v in $*) { emit { k : v } }'

echo; run_mlr --from u/s.dkvp put '$z = 0; while ($z < $i) {$z += 1}'
echo; run_mlr --from u/s.dkvp put '$z = 0; do {$z += 1} while ($z < $i)'
echo; run_mlr --from u/s.dkvp put '$z = 10; while ($z < $i) {$z += 1}'
echo; run_mlr --from u/s.dkvp put '$z = 10; do {$z += 1} while ($z < $i)'

echo; run_mlr --from u/s.dkvp head -n 1 then put -q 'for (k in [3,4,5]) { emit { "foo" : "bar" } }'
echo; run_mlr --from u/s.dkvp head -n 1 then put -q 'for (k in [3,4,5]) { emit { "foo" : k } }'

echo; run_mlr --from u/s.dkvp head -n 1 then put -q 'for (k,v in [3,4,5]) { emit { "foo" : "bar" } }'
echo; run_mlr --from u/s.dkvp head -n 1 then put -q 'for (k,v in [3,4,5]) { emit { "foo" : k } }'
echo; run_mlr --from u/s.dkvp head -n 1 then put -q 'for (k,v in [3,4,5]) { emit { "foo" : v } }'

echo; run_mlr --from u/s.dkvp put 'nr=NR; $nr=nr'

echo; run_mlr --from u/s.dkvp put '
  z = 1;
  if (NR <= 2) {
    z = 2;
  } else {
    z = 3;
  }
  $z = z
'

echo; run_mlr --from u/s.dkvp put 'for (@i = 0; @i < NR; @i += 1) { $i += @i }'
echo; run_mlr --from u/s.dkvp put 'i=999; for (i = 0; i < NR; i += 1) { $i += i }'
echo; run_mlr --from u/s.dkvp put -v 'j = 2; for (i = 0; i < NR; i += 1) { $i += i }'

echo; run_mlr --from u/ten.dkvp --opprint put '$z=sec2gmt($i)'
echo; run_mlr --from u/ten.dkvp --opprint put '$z=sec2gmt($i, $i-1)'
echo; run_mlr --from u/ten.dkvp --opprint put '$z=sec2gmt($i+0.123456789)'
echo; run_mlr --from u/ten.dkvp --opprint put '$z=sec2gmt($i+0.123456789,$i-1)'

echo; echo 'x= a     b '|mlr --ojson put '$y = strip($x)'
echo; echo 'x= a     b '|mlr --ojson put '$y = lstrip($x)'
echo; echo 'x= a     b '|mlr --ojson put '$y = rstrip($x)'
echo; echo 'x= a     b '|mlr --ojson put '$y = collapse_whitespace($x)'
echo; echo 'x= a     b '|mlr --ojson put '$y = clean_whitespace($x)'

echo; run_mlr --from u/s.dkvp put '$z = strlen($a)'

echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 0, 0)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 0, 7)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 1, 7)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 1, 6)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 2, 5)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 2, 3)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 3, 3)'
echo; echo "x=abcdefg" | run_mlr put '$y = substr($x, 4, 3)'

echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length($x)'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length($y)'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length($nonesuch)'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length($*)'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length([])'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length([5,6,7])'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length({})'
echo; echo "x=1,y=abcdefg,z=3" | run_mlr put '$n = length({"a":5,"b":6,"c":7})'

echo; run_mlr --from u/s.dkvp put '$si = 0; for (i = 0; i < NR; i += 1) { if (i == 2) { $si += 0   } $si += i }'
echo; run_mlr --from u/s.dkvp put '$si = 0; for (i = 0; i < NR; i += 1) { if (i == 2) { $si += 100 } $si += i }'
echo; run_mlr --from u/s.dkvp put '$si = 0; for (i = 0; i < NR; i += 1) { if (i == 2) { break }      $si += i }'
echo; run_mlr --from u/s.dkvp put '$si = 0; for (i = 0; i < NR; i += 1) { if (i == 2) { continue }   $si += i }'

echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (i = 0; i < NR; i += 1) {
    if (true) {
      if (i == 2) {
        $si += 0
      }
    }
    $si += i
  }'

echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (i = 0; i < NR; i += 1) {
    if (true) {
      if (i == 2) {
        $si += 100
      }
    }
    $si += i
  }'

echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (i = 0; i < NR; i += 1) {
    if (true) {
      if (i == 2) {
        break
      }
    }
    $si += i
  }'

echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (i = 0; i < NR; i += 1) {
    if (true) {
      if (i == 2) {
        continue
      }
    }
    $si += i
  }'


echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (p = 1; p <= 3; p += 1) {
    for (i = 0; i < NR; i += 1) {
      if (i == 2) {
        $si += 0
      }
      $si += i * 10**p
    }
  }'

echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (p = 1; p <= 3; p += 1) {
    for (i = 0; i < NR; i += 1) {
      if (i == 2) {
        break
      }
      $si += i * 10**p
    }
  }'

echo; run_mlr --from u/s.dkvp --opprint put '
  $si = 0;
  for (p = 1; p <= 3; p += 1) {
    for (i = 0; i < NR; i += 1) {
      if (i == 2) {
        continue
      }
      $si += i * 10**p
    }
  }'

echo; run_mlr --opprint --from u/ten.dkvp put -f u/f.mlr
echo; run_mlr --opprint --from u/ten.dkvp put -f u/ff.mlr
echo; run_mlr --opprint --from u/ten.dkvp put -f u/fg.mlr

run_mlr         --from u/s.dkvp put 'var x = 3'
run_mlr         --from u/s.dkvp put 'int x = 3'
run_mlr         --from u/s.dkvp put 'num x = 3'
mlr_expect_fail --from u/s.dkvp put 'str x = 3'
mlr_expect_fail --from u/s.dkvp put 'arr x = 3'

run_mlr         --from u/s.dkvp put 'func f(var x) { return 2*x} $y=f(3)'
run_mlr         --from u/s.dkvp put 'func f(int x) { return 2*x} $y=f(3)'
run_mlr         --from u/s.dkvp put 'func f(num x) { return 2*x} $y=f(3)'
mlr_expect_fail --from u/s.dkvp put 'func f(str x) { return 2*x} $y=f(3)'
mlr_expect_fail --from u/s.dkvp put 'func f(arr x) { return 2*x} $y=f(3)'

run_mlr         --from u/s.dkvp put 'func f(x): var { return 2*x} $y=f(3)'
run_mlr         --from u/s.dkvp put 'func f(x): int { return 2*x} $y=f(3)'
run_mlr         --from u/s.dkvp put 'func f(x): num { return 2*x} $y=f(3)'
mlr_expect_fail --from u/s.dkvp put 'func f(x): str { return 2*x} $y=f(3)'
mlr_expect_fail --from u/s.dkvp put 'func f(x): arr { return 2*x} $y=f(3)'

run_mlr --idkvp --opprint --from u/s.dkvp put '
  for (k, v in $*) {
    $["t".k] = typeof(v)
  }
  $tnonesuch = typeof($nonesuch)
'

run_mlr --idkvp --opprint --from u/s.dkvp put '
  for (k, v in $*) {
    $["s".k] = string(v)
  }
  $snonesuch = string($nonesuch)
'

run_mlr --j2p --from u/typecast.json put '
  $t       = typeof($a);
  $string  = string($a);
  $int     = int($a);
  $float   = float($a);
  $boolean = boolean($a);
' then reorder -f t,a

run_mlr -n put -f u/sieve.mlr
run_mlr --from /dev/null put -f u/sieve.mlr
run_mlr --from u/s.dkvp put -q -f u/sieve.mlr

mlr_expect_fail -n put 'begin{begin{}}'
mlr_expect_fail -n put 'begin{end{}}'
mlr_expect_fail -n put 'end{begin{}}'
mlr_expect_fail -n put 'end{end{}}'
mlr_expect_fail -n put 'begin { func f(x) { return 2*x} }'
# TODO: once subr exists
# mlr_expect_fail -n put 'begin { subr f(x) { return 2*x} }'
mlr_expect_fail -n put 'begin { emit $x }'
mlr_expect_fail -n put 'return 3'
mlr_expect_fail -n put 'break'
mlr_expect_fail -n put 'continue'
mlr_expect_fail -n put 'func f() { break }'
mlr_expect_fail -n put 'func f() { continue }'
run_mlr -n put -v 'true'
mlr_expect_fail -n put -v 'begin{true}'

run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[0]; dump $v'
run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[1]; dump $v'
run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[2]; dump $v'
run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[3]; dump $v'
run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[4]; dump $v'
run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[5]; dump $v'
run_mlr --from s head -n 1 then put -q '$v=[1,2,3,4,5]; unset $v[6]; dump $v'

run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[0]; dump @v }'
run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[1]; dump @v }'
run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[2]; dump @v }'
run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[3]; dump @v }'
run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[4]; dump @v }'
run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[5]; dump @v }'
run_mlr --from s head -n 1 then put -q 'end { @v=[1,2,3,4,5]; unset @v[6]; dump @v }'

run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[0]; dump v }'
run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[1]; dump v }'
run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[2]; dump v }'
run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[3]; dump v }'
run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[4]; dump v }'
run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[5]; dump v }'
run_mlr --from s head -n 1 then put -q 'end { v=[1,2,3,4,5]; unset v[6]; dump v }'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  @v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v;
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v["a"];
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v["a"]["x"];
    dump @v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  @v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v;
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v[1];
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v[1]["x"];
    dump @v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  @v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v;
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v["a"];
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v["a"][2];
    dump @v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  @v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v;
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v[1];
    dump @v;
  }
'

run_mlr --from u/s.dkvp put -q '
  @v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump @v;
  } elif (NR == 2) {
    unset @v[1][2];
    dump @v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  $v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v;
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v["a"];
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v["a"]["x"];
    dump $v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  $v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v;
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v[1];
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v[1]["x"];
    dump $v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  $v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v;
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v["a"];
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v["a"][2];
    dump $v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  $v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v;
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v[1];
    dump $v;
  }
'

run_mlr --from u/s.dkvp put -q '
  $v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump $v;
  } elif (NR == 2) {
    unset $v[1][2];
    dump $v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  $* = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump $*;
  } elif (NR == 2) {
    unset $*;
    dump $*;
  }
'

run_mlr --from u/s.dkvp put -q '
  $* = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump $*;
  } elif (NR == 2) {
    unset $*["a"];
    dump $*;
  }
'

run_mlr --from u/s.dkvp put -q '
  $* = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump $*;
  } elif (NR == 2) {
    unset $*["a"]["x"];
    dump $*;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  $* = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump $*;
  } elif (NR == 2) {
    unset $*;
    dump $*;
  }
'

run_mlr --from u/s.dkvp put -q '
  $* = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump $*;
  } elif (NR == 2) {
    unset $*["a"];
    dump $*;
  }
'

run_mlr --from u/s.dkvp put -q '
  $* = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump $*;
  } elif (NR == 2) {
    unset $*["a"][2];
    dump $*;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v;
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v["a"];
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = {
    "a": {"x": 1},
    "b": {"y": 1},
  };
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v["a"]["x"];
    dump v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v;
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v[1];
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = [
    {"x": 1},
    {"y": 1},
  ];
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v[1]["x"];
    dump v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v;
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v["a"];
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = {
    "a": ["u", "v"],
    "b": ["w", "x"],
  };
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v["a"][2];
    dump v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp put -q '
  v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v;
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v[1];
    dump v;
  }
'

run_mlr --from u/s.dkvp put -q '
  v = [
    ["u", "v"],
    ["w", "x"],
  ];
  if (NR == 1) {
    dump v;
  } elif (NR == 2) {
    unset v[1][2];
    dump v;
  }
'

# ----------------------------------------------------------------
run_mlr --from u/s.dkvp --opprint put '
  $u = toupper($a);
  $l = tolower($u);
  $c = capitalize($l);
'

run_mlr --opprint --from u/s.dkvp put '
  $dx = depth($x);
  $dn = depth($nonesuch);
  $da1 = depth([1,2,3]);
  $da2 = depth([1,[4,5,6],3]);
  $da3 = depth([1,{"s":4,"t":[7,8,9],"u":6},3]);
  $dm1 = depth({"s":1,"t":2,"u":3});
  $dm2 = depth({"s":1,"t":[4,5,6],"u":3});
  $dm3 = depth({"s":1,"t":[4,$*,6],"u":3});
'

run_mlr --opprint --from u/s.dkvp put '
  $lcx = leafcount($x);
  $lcn = leafcount($nonesuch);
  $lca1 = leafcount([1,2,3]);
  $lca2 = leafcount([1,[4,5,6],3]);
  $lca3 = leafcount([1,{"s":4,"t":[7,8,9],"u":6},3]);
  $lcm1 = leafcount({"s":1,"t":2,"u":3});
  $lcm2 = leafcount({"s":1,"t":[4,5,6],"u":3});
  $lcm3 = leafcount({"s":1,"t":[4,{"x":8, "y": 9},6],"u":3});
'

run_mlr --oxtab --from u/s.dkvp head -n 1 then put '
  $hk01 = haskey($x, $a);
  $hk02 = haskey($nonesuch, $a);
  $hk03 = haskey($*, 7);
  $hk04 = haskey($*, "a");
  $hk05 = haskey($*, "nonesuch");
  $hk06 = haskey([10,20,30], 0);
  $hk07 = haskey([10,20,30], 1);
  $hk08 = haskey([10,20,30], 2);
  $hk09 = haskey([10,20,30], 3);
  $hk10 = haskey([10,20,30], 4);
  $hk11 = haskey([10,20,30], -4);
  $hk12 = haskey([10,20,30], -3);
  $hk13 = haskey([10,20,30], -2);
  $hk14 = haskey([10,20,30], -1);
  $hk15 = haskey([10,20,30], "a");
'

# ----------------------------------------------------------------
run_mlr --from u/abixy-het put -q 'o = mapsum(); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff(); dump o'
mlr_expect_fail --from u/abixy-het put -q 'o = mapexcept(); dump o'
mlr_expect_fail --from u/abixy-het put -q 'o = mapselect(); dump o'

run_mlr --from u/abixy-het put -q 'o = mapsum($*); dump o'
run_mlr --from u/abixy-het put -q 'o = mapsum({"a":999}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff($*); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff({"a":999}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept($*); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept({"a":999}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect($*); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect({"a":999}); dump o'

run_mlr --from u/abixy-het put -q 'o = mapsum($*, {"a":999}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapsum({"a":999}, $*); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff($*, {"a":999}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff({"a":999}, $*); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept($*, "a"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept({"a":999}, "a"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept({"a":999}, "nonesuch"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect($*, "a"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect({"a":999}, "a"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect({"a":999}, "nonesuch"); dump o'

run_mlr --from u/abixy-het put -q 'o = mapsum($*, {"a":999}, {"b": 444}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapsum({"a":999}, $*, {"b": 444}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff($*, {"a":999}, {"b": 444}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapdiff({"a":999}, $*, {"b": 444}); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept($*, "a", "b"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect({"a":999}, "b", "nonesuch"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect($*, "a", "b"); dump o'
run_mlr --from u/abixy-het put -q 'o = mapselect({"a":999}, "b", "nonesuch"); dump o'

run_mlr --from u/abixy-het put -q 'o = mapselect($*, ["b", "nonesuch"]); dump o'
run_mlr --from u/abixy-het put -q 'o = mapexcept($*, ["b", "nonesuch"]); dump o'

run_mlr --c2p --from u/mod.csv put '
  $add = madd($a, $b, $m);
  $sub = msub($a, $b, $m);
  $mul = mmul($a, $b, $m);
  $exp = mexp($a, $b, $m);
'
