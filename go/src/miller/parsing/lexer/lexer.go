// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 277
	NumSymbols = 429
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '-'
8: '.'
9: '.'
10: '-'
11: '.'
12: '.'
13: '-'
14: 'M'
15: '_'
16: 'P'
17: 'I'
18: 'M'
19: '_'
20: 'E'
21: 'I'
22: 'P'
23: 'S'
24: 'I'
25: 'F'
26: 'S'
27: 'I'
28: 'R'
29: 'S'
30: 'O'
31: 'P'
32: 'S'
33: 'O'
34: 'F'
35: 'S'
36: 'O'
37: 'R'
38: 'S'
39: 'N'
40: 'F'
41: 'N'
42: 'R'
43: 'F'
44: 'N'
45: 'R'
46: 'F'
47: 'I'
48: 'L'
49: 'E'
50: 'N'
51: 'A'
52: 'M'
53: 'E'
54: 'F'
55: 'I'
56: 'L'
57: 'E'
58: 'N'
59: 'U'
60: 'M'
61: 'b'
62: 'e'
63: 'g'
64: 'i'
65: 'n'
66: 'd'
67: 'o'
68: 'd'
69: 'u'
70: 'm'
71: 'p'
72: 'e'
73: 'd'
74: 'u'
75: 'm'
76: 'p'
77: 'e'
78: 'l'
79: 'i'
80: 'f'
81: 'e'
82: 'l'
83: 's'
84: 'e'
85: 'e'
86: 'm'
87: 'i'
88: 't'
89: 'e'
90: 'n'
91: 'd'
92: 'f'
93: 'i'
94: 'l'
95: 't'
96: 'e'
97: 'r'
98: 'f'
99: 'o'
100: 'r'
101: 'i'
102: 'f'
103: 'i'
104: 'n'
105: 'w'
106: 'h'
107: 'i'
108: 'l'
109: 'e'
110: 'b'
111: 'r'
112: 'e'
113: 'a'
114: 'k'
115: 'c'
116: 'o'
117: 'n'
118: 't'
119: 'i'
120: 'n'
121: 'u'
122: 'e'
123: 'f'
124: 'u'
125: 'n'
126: 'c'
127: 'r'
128: 'e'
129: 't'
130: 'u'
131: 'r'
132: 'n'
133: 'a'
134: 'r'
135: 'r'
136: 'b'
137: 'o'
138: 'o'
139: 'l'
140: 'f'
141: 'l'
142: 'o'
143: 'a'
144: 't'
145: 'i'
146: 'n'
147: 't'
148: 'm'
149: 'a'
150: 'p'
151: 'n'
152: 'u'
153: 'm'
154: 's'
155: 't'
156: 'r'
157: 'v'
158: 'a'
159: 'r'
160: 'u'
161: 'n'
162: 's'
163: 'e'
164: 't'
165: 'p'
166: 'r'
167: 'i'
168: 'n'
169: 't'
170: 'p'
171: 'r'
172: 'i'
173: 'n'
174: 't'
175: 'n'
176: 'e'
177: 'p'
178: 'r'
179: 'i'
180: 'n'
181: 't'
182: 'e'
183: 'p'
184: 'r'
185: 'i'
186: 'n'
187: 't'
188: 'n'
189: '$'
190: '$'
191: '{'
192: '}'
193: '$'
194: '*'
195: '@'
196: '@'
197: '{'
198: '}'
199: '@'
200: '*'
201: '%'
202: '%'
203: '%'
204: 'p'
205: 'a'
206: 'n'
207: 'i'
208: 'c'
209: '%'
210: '%'
211: '%'
212: ';'
213: '{'
214: '}'
215: '='
216: '$'
217: '['
218: ']'
219: '@'
220: '['
221: '|'
222: '|'
223: '='
224: '^'
225: '^'
226: '='
227: '&'
228: '&'
229: '='
230: '?'
231: '?'
232: '='
233: '|'
234: '='
235: '^'
236: '='
237: '<'
238: '<'
239: '='
240: '>'
241: '>'
242: '='
243: '>'
244: '>'
245: '>'
246: '='
247: '+'
248: '='
249: '.'
250: '='
251: '-'
252: '='
253: '*'
254: '='
255: '/'
256: '='
257: '/'
258: '/'
259: '='
260: '%'
261: '='
262: '*'
263: '*'
264: '='
265: '?'
266: ':'
267: '|'
268: '|'
269: '^'
270: '^'
271: '&'
272: '&'
273: '?'
274: '?'
275: '='
276: '~'
277: '!'
278: '='
279: '~'
280: '='
281: '='
282: '!'
283: '='
284: '>'
285: '>'
286: '='
287: '<'
288: '<'
289: '='
290: '|'
291: '^'
292: '&'
293: '<'
294: '<'
295: '>'
296: '>'
297: '>'
298: '>'
299: '>'
300: '+'
301: '-'
302: '.'
303: '+'
304: '.'
305: '-'
306: '.'
307: '*'
308: '/'
309: '/'
310: '/'
311: '%'
312: '.'
313: '*'
314: '.'
315: '/'
316: '.'
317: '/'
318: '/'
319: '!'
320: '~'
321: '*'
322: '*'
323: '('
324: ')'
325: '['
326: ','
327: '_'
328: ' '
329: '!'
330: '#'
331: '$'
332: '%'
333: '&'
334: '''
335: '\'
336: '('
337: ')'
338: '*'
339: '+'
340: ','
341: '-'
342: '.'
343: '/'
344: ':'
345: ';'
346: '<'
347: '='
348: '>'
349: '?'
350: '@'
351: '['
352: ']'
353: '^'
354: '_'
355: '`'
356: '{'
357: '|'
358: '}'
359: '~'
360: '\'
361: '"'
362: 'e'
363: 'E'
364: 't'
365: 'r'
366: 'u'
367: 'e'
368: 'f'
369: 'a'
370: 'l'
371: 's'
372: 'e'
373: ' '
374: '!'
375: '#'
376: '$'
377: '%'
378: '&'
379: '''
380: '\'
381: '('
382: ')'
383: '*'
384: '+'
385: ','
386: '-'
387: '.'
388: '/'
389: ':'
390: ';'
391: '<'
392: '='
393: '>'
394: '?'
395: '@'
396: '['
397: ']'
398: '^'
399: '_'
400: '`'
401: '|'
402: '~'
403: '\'
404: '{'
405: '\'
406: '}'
407: ' '
408: '\t'
409: '\n'
410: '\r'
411: '#'
412: '\n'
413: 'a'-'z'
414: 'A'-'Z'
415: '0'-'9'
416: '0'-'9'
417: 'a'-'f'
418: 'A'-'F'
419: '0'-'1'
420: 'A'-'Z'
421: 'a'-'z'
422: '0'-'9'
423: \u0100-\U0010ffff
424: 'A'-'Z'
425: 'a'-'z'
426: '0'-'9'
427: \u0100-\U0010ffff
428: .
*/
