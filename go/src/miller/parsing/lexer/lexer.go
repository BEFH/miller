// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 295
	NumSymbols = 472
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '.'
8: '-'
9: '.'
10: '.'
11: '-'
12: '.'
13: '.'
14: '-'
15: 'M'
16: '_'
17: 'P'
18: 'I'
19: 'M'
20: '_'
21: 'E'
22: 'I'
23: 'P'
24: 'S'
25: 'I'
26: 'F'
27: 'S'
28: 'I'
29: 'R'
30: 'S'
31: 'O'
32: 'P'
33: 'S'
34: 'O'
35: 'F'
36: 'S'
37: 'O'
38: 'R'
39: 'S'
40: 'N'
41: 'F'
42: 'N'
43: 'R'
44: 'F'
45: 'N'
46: 'R'
47: 'F'
48: 'I'
49: 'L'
50: 'E'
51: 'N'
52: 'A'
53: 'M'
54: 'E'
55: 'F'
56: 'I'
57: 'L'
58: 'E'
59: 'N'
60: 'U'
61: 'M'
62: 'E'
63: 'N'
64: 'V'
65: 'b'
66: 'e'
67: 'g'
68: 'i'
69: 'n'
70: 'd'
71: 'o'
72: 'd'
73: 'u'
74: 'm'
75: 'p'
76: 'e'
77: 'd'
78: 'u'
79: 'm'
80: 'p'
81: 'e'
82: 'l'
83: 'i'
84: 'f'
85: 'e'
86: 'l'
87: 's'
88: 'e'
89: 'e'
90: 'm'
91: 'i'
92: 't'
93: 'e'
94: 'm'
95: 'i'
96: 't'
97: 'p'
98: 'e'
99: 'm'
100: 'i'
101: 't'
102: 'f'
103: 'e'
104: 'n'
105: 'd'
106: 'f'
107: 'i'
108: 'l'
109: 't'
110: 'e'
111: 'r'
112: 'f'
113: 'o'
114: 'r'
115: 'i'
116: 'f'
117: 'i'
118: 'n'
119: 'w'
120: 'h'
121: 'i'
122: 'l'
123: 'e'
124: 'b'
125: 'r'
126: 'e'
127: 'a'
128: 'k'
129: 'c'
130: 'o'
131: 'n'
132: 't'
133: 'i'
134: 'n'
135: 'u'
136: 'e'
137: 'r'
138: 'e'
139: 't'
140: 'u'
141: 'r'
142: 'n'
143: 'f'
144: 'u'
145: 'n'
146: 'c'
147: 's'
148: 'u'
149: 'b'
150: 'r'
151: 'c'
152: 'a'
153: 'l'
154: 'l'
155: 'a'
156: 'r'
157: 'r'
158: 'b'
159: 'o'
160: 'o'
161: 'l'
162: 'f'
163: 'l'
164: 'o'
165: 'a'
166: 't'
167: 'i'
168: 'n'
169: 't'
170: 'm'
171: 'a'
172: 'p'
173: 'n'
174: 'u'
175: 'm'
176: 's'
177: 't'
178: 'r'
179: 'v'
180: 'a'
181: 'r'
182: 'u'
183: 'n'
184: 's'
185: 'e'
186: 't'
187: 'p'
188: 'r'
189: 'i'
190: 'n'
191: 't'
192: 'p'
193: 'r'
194: 'i'
195: 'n'
196: 't'
197: 'n'
198: 'e'
199: 'p'
200: 'r'
201: 'i'
202: 'n'
203: 't'
204: 'e'
205: 'p'
206: 'r'
207: 'i'
208: 'n'
209: 't'
210: 'n'
211: '$'
212: '$'
213: '{'
214: '}'
215: '$'
216: '*'
217: '@'
218: '@'
219: '{'
220: '}'
221: '@'
222: '*'
223: '%'
224: '%'
225: '%'
226: 'p'
227: 'a'
228: 'n'
229: 'i'
230: 'c'
231: '%'
232: '%'
233: '%'
234: ';'
235: '{'
236: '}'
237: '='
238: '('
239: ')'
240: ','
241: '$'
242: '['
243: ']'
244: '$'
245: '['
246: '['
247: '$'
248: '['
249: '['
250: '['
251: '@'
252: '['
253: '|'
254: '|'
255: '='
256: '^'
257: '^'
258: '='
259: '&'
260: '&'
261: '='
262: '?'
263: '?'
264: '='
265: '?'
266: '?'
267: '?'
268: '='
269: '|'
270: '='
271: '&'
272: '='
273: '^'
274: '='
275: '<'
276: '<'
277: '='
278: '>'
279: '>'
280: '='
281: '>'
282: '>'
283: '>'
284: '='
285: '+'
286: '='
287: '.'
288: '='
289: '-'
290: '='
291: '*'
292: '='
293: '/'
294: '='
295: '/'
296: '/'
297: '='
298: '%'
299: '='
300: '*'
301: '*'
302: '='
303: '?'
304: ':'
305: '|'
306: '|'
307: '^'
308: '^'
309: '&'
310: '&'
311: '?'
312: '?'
313: '?'
314: '?'
315: '?'
316: '='
317: '~'
318: '!'
319: '='
320: '~'
321: '='
322: '='
323: '!'
324: '='
325: '>'
326: '>'
327: '='
328: '<'
329: '<'
330: '='
331: '|'
332: '^'
333: '&'
334: '<'
335: '<'
336: '>'
337: '>'
338: '>'
339: '>'
340: '>'
341: '+'
342: '-'
343: '.'
344: '+'
345: '.'
346: '-'
347: '.'
348: '*'
349: '/'
350: '/'
351: '/'
352: '%'
353: '.'
354: '*'
355: '.'
356: '/'
357: '.'
358: '/'
359: '/'
360: '!'
361: '~'
362: '*'
363: '*'
364: '['
365: '['
366: '['
367: '['
368: '['
369: '['
370: '_'
371: ' '
372: '!'
373: '#'
374: '$'
375: '%'
376: '&'
377: '''
378: '\'
379: '('
380: ')'
381: '*'
382: '+'
383: ','
384: '-'
385: '.'
386: '/'
387: ':'
388: ';'
389: '<'
390: '='
391: '>'
392: '?'
393: '@'
394: '['
395: ']'
396: '^'
397: '_'
398: '`'
399: '{'
400: '|'
401: '}'
402: '~'
403: '\'
404: '"'
405: 'e'
406: 'E'
407: 't'
408: 'r'
409: 'u'
410: 'e'
411: 'f'
412: 'a'
413: 'l'
414: 's'
415: 'e'
416: ' '
417: '!'
418: '#'
419: '$'
420: '%'
421: '&'
422: '''
423: '\'
424: '('
425: ')'
426: '*'
427: '+'
428: ','
429: '-'
430: '.'
431: '/'
432: ':'
433: ';'
434: '<'
435: '='
436: '>'
437: '?'
438: '@'
439: '['
440: ']'
441: '^'
442: '_'
443: '`'
444: '|'
445: '~'
446: '\'
447: '{'
448: '\'
449: '}'
450: ' '
451: '\t'
452: '\n'
453: '\r'
454: '#'
455: '\n'
456: 'a'-'z'
457: 'A'-'Z'
458: '0'-'9'
459: '0'-'9'
460: 'a'-'f'
461: 'A'-'F'
462: '0'-'1'
463: 'A'-'Z'
464: 'a'-'z'
465: '0'-'9'
466: \u0100-\U0010ffff
467: 'A'-'Z'
468: 'a'-'z'
469: '0'-'9'
470: \u0100-\U0010ffff
471: .
*/
