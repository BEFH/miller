// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 316
	NumSymbols = 503
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '.'
8: '-'
9: '.'
10: '.'
11: '-'
12: '.'
13: '.'
14: '-'
15: 'M'
16: '_'
17: 'P'
18: 'I'
19: 'M'
20: '_'
21: 'E'
22: 'I'
23: 'P'
24: 'S'
25: 'I'
26: 'F'
27: 'S'
28: 'I'
29: 'R'
30: 'S'
31: 'I'
32: 'F'
33: 'L'
34: 'A'
35: 'T'
36: 'S'
37: 'E'
38: 'P'
39: 'O'
40: 'P'
41: 'S'
42: 'O'
43: 'F'
44: 'S'
45: 'O'
46: 'R'
47: 'S'
48: 'O'
49: 'F'
50: 'L'
51: 'A'
52: 'T'
53: 'S'
54: 'E'
55: 'P'
56: 'N'
57: 'F'
58: 'N'
59: 'R'
60: 'F'
61: 'N'
62: 'R'
63: 'F'
64: 'I'
65: 'L'
66: 'E'
67: 'N'
68: 'A'
69: 'M'
70: 'E'
71: 'F'
72: 'I'
73: 'L'
74: 'E'
75: 'N'
76: 'U'
77: 'M'
78: 'E'
79: 'N'
80: 'V'
81: 'b'
82: 'e'
83: 'g'
84: 'i'
85: 'n'
86: 'd'
87: 'o'
88: 'e'
89: 'l'
90: 'i'
91: 'f'
92: 'e'
93: 'l'
94: 's'
95: 'e'
96: 'e'
97: 'n'
98: 'd'
99: 'f'
100: 'i'
101: 'l'
102: 't'
103: 'e'
104: 'r'
105: 'f'
106: 'o'
107: 'r'
108: 'i'
109: 'f'
110: 'i'
111: 'n'
112: 'w'
113: 'h'
114: 'i'
115: 'l'
116: 'e'
117: 'b'
118: 'r'
119: 'e'
120: 'a'
121: 'k'
122: 'c'
123: 'o'
124: 'n'
125: 't'
126: 'i'
127: 'n'
128: 'u'
129: 'e'
130: 'r'
131: 'e'
132: 't'
133: 'u'
134: 'r'
135: 'n'
136: 'f'
137: 'u'
138: 'n'
139: 'c'
140: 's'
141: 'u'
142: 'b'
143: 'r'
144: 'c'
145: 'a'
146: 'l'
147: 'l'
148: 'a'
149: 'r'
150: 'r'
151: 'b'
152: 'o'
153: 'o'
154: 'l'
155: 'f'
156: 'l'
157: 'o'
158: 'a'
159: 't'
160: 'i'
161: 'n'
162: 't'
163: 'm'
164: 'a'
165: 'p'
166: 'n'
167: 'u'
168: 'm'
169: 's'
170: 't'
171: 'r'
172: 'v'
173: 'a'
174: 'r'
175: 'u'
176: 'n'
177: 's'
178: 'e'
179: 't'
180: 'd'
181: 'u'
182: 'm'
183: 'p'
184: 'e'
185: 'd'
186: 'u'
187: 'm'
188: 'p'
189: 'e'
190: 'm'
191: 'i'
192: 't'
193: 'e'
194: 'm'
195: 'i'
196: 't'
197: 'p'
198: 'e'
199: 'm'
200: 'i'
201: 't'
202: 'f'
203: 'e'
204: 'p'
205: 'r'
206: 'i'
207: 'n'
208: 't'
209: 'e'
210: 'p'
211: 'r'
212: 'i'
213: 'n'
214: 't'
215: 'n'
216: 'p'
217: 'r'
218: 'i'
219: 'n'
220: 't'
221: 'p'
222: 'r'
223: 'i'
224: 'n'
225: 't'
226: 'n'
227: 't'
228: 'e'
229: 'e'
230: 's'
231: 't'
232: 'd'
233: 'o'
234: 'u'
235: 't'
236: 's'
237: 't'
238: 'd'
239: 'e'
240: 'r'
241: 'r'
242: '$'
243: '$'
244: '{'
245: '}'
246: '$'
247: '*'
248: '@'
249: '@'
250: '{'
251: '}'
252: '@'
253: '*'
254: '%'
255: '%'
256: '%'
257: 'p'
258: 'a'
259: 'n'
260: 'i'
261: 'c'
262: '%'
263: '%'
264: '%'
265: ';'
266: '{'
267: '}'
268: '='
269: '>'
270: '>'
271: '>'
272: '|'
273: ','
274: '('
275: ')'
276: '$'
277: '['
278: ']'
279: '$'
280: '['
281: '['
282: '$'
283: '['
284: '['
285: '['
286: '@'
287: '['
288: '|'
289: '|'
290: '='
291: '^'
292: '^'
293: '='
294: '&'
295: '&'
296: '='
297: '?'
298: '?'
299: '='
300: '?'
301: '?'
302: '?'
303: '='
304: '|'
305: '='
306: '&'
307: '='
308: '^'
309: '='
310: '<'
311: '<'
312: '='
313: '>'
314: '>'
315: '='
316: '>'
317: '>'
318: '>'
319: '='
320: '+'
321: '='
322: '.'
323: '='
324: '-'
325: '='
326: '*'
327: '='
328: '/'
329: '='
330: '/'
331: '/'
332: '='
333: '%'
334: '='
335: '*'
336: '*'
337: '='
338: '?'
339: ':'
340: '|'
341: '|'
342: '^'
343: '^'
344: '&'
345: '&'
346: '?'
347: '?'
348: '?'
349: '?'
350: '?'
351: '='
352: '~'
353: '!'
354: '='
355: '~'
356: '='
357: '='
358: '!'
359: '='
360: '>'
361: '='
362: '<'
363: '<'
364: '='
365: '^'
366: '&'
367: '<'
368: '<'
369: '>'
370: '>'
371: '>'
372: '+'
373: '-'
374: '.'
375: '+'
376: '.'
377: '-'
378: '.'
379: '*'
380: '/'
381: '/'
382: '/'
383: '%'
384: '.'
385: '*'
386: '.'
387: '/'
388: '.'
389: '/'
390: '/'
391: '!'
392: '~'
393: '*'
394: '*'
395: '['
396: '['
397: '['
398: '['
399: '['
400: '['
401: '_'
402: ' '
403: '!'
404: '#'
405: '$'
406: '%'
407: '&'
408: '''
409: '\'
410: '('
411: ')'
412: '*'
413: '+'
414: ','
415: '-'
416: '.'
417: '/'
418: ':'
419: ';'
420: '<'
421: '='
422: '>'
423: '?'
424: '@'
425: '['
426: ']'
427: '^'
428: '_'
429: '`'
430: '{'
431: '|'
432: '}'
433: '~'
434: '\'
435: '"'
436: 'e'
437: 'E'
438: 't'
439: 'r'
440: 'u'
441: 'e'
442: 'f'
443: 'a'
444: 'l'
445: 's'
446: 'e'
447: ' '
448: '!'
449: '#'
450: '$'
451: '%'
452: '&'
453: '''
454: '\'
455: '('
456: ')'
457: '*'
458: '+'
459: ','
460: '-'
461: '.'
462: '/'
463: ':'
464: ';'
465: '<'
466: '='
467: '>'
468: '?'
469: '@'
470: '['
471: ']'
472: '^'
473: '_'
474: '`'
475: '|'
476: '~'
477: '\'
478: '{'
479: '\'
480: '}'
481: ' '
482: '\t'
483: '\n'
484: '\r'
485: '#'
486: '\n'
487: 'a'-'z'
488: 'A'-'Z'
489: '0'-'9'
490: '0'-'9'
491: 'a'-'f'
492: 'A'-'F'
493: '0'-'1'
494: 'A'-'Z'
495: 'a'-'z'
496: '0'-'9'
497: \u0100-\U0010ffff
498: 'A'-'Z'
499: 'a'-'z'
500: '0'-'9'
501: \u0100-\U0010ffff
502: .
*/
