// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 107
	NumSymbols = 202
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '$'
1: '-'
2: '0'
3: 'x'
4: '"'
5: '"'
6: 'I'
7: 'P'
8: 'S'
9: 'I'
10: 'F'
11: 'S'
12: 'I'
13: 'R'
14: 'S'
15: 'O'
16: 'P'
17: 'S'
18: 'O'
19: 'F'
20: 'S'
21: 'O'
22: 'R'
23: 'S'
24: 'N'
25: 'F'
26: 'N'
27: 'R'
28: 'F'
29: 'N'
30: 'R'
31: 'F'
32: 'I'
33: 'L'
34: 'E'
35: 'N'
36: 'A'
37: 'M'
38: 'E'
39: 'F'
40: 'I'
41: 'L'
42: 'E'
43: 'N'
44: 'U'
45: 'M'
46: 't'
47: 'r'
48: 'u'
49: 'e'
50: 'f'
51: 'a'
52: 'l'
53: 's'
54: 'e'
55: ';'
56: '='
57: '|'
58: '|'
59: '='
60: '^'
61: '^'
62: '='
63: '&'
64: '&'
65: '='
66: '|'
67: '='
68: '^'
69: '='
70: '&'
71: '='
72: '<'
73: '<'
74: '='
75: '>'
76: '>'
77: '='
78: '+'
79: '='
80: '.'
81: '='
82: '-'
83: '='
84: '*'
85: '='
86: '/'
87: '='
88: '/'
89: '/'
90: '='
91: '%'
92: '='
93: '*'
94: '*'
95: '='
96: '?'
97: ':'
98: '|'
99: '|'
100: '^'
101: '^'
102: '&'
103: '&'
104: '='
105: '~'
106: '!'
107: '='
108: '~'
109: '='
110: '='
111: '!'
112: '='
113: '>'
114: '>'
115: '='
116: '<'
117: '<'
118: '='
119: '|'
120: '^'
121: '&'
122: '<'
123: '<'
124: '>'
125: '>'
126: '+'
127: '-'
128: '.'
129: '+'
130: '.'
131: '-'
132: '.'
133: '*'
134: '/'
135: '/'
136: '/'
137: '%'
138: '.'
139: '*'
140: '.'
141: '/'
142: '.'
143: '/'
144: '/'
145: '!'
146: '~'
147: '*'
148: '*'
149: '('
150: ')'
151: '$'
152: '['
153: ']'
154: '_'
155: ' '
156: '!'
157: '#'
158: '$'
159: '%'
160: '&'
161: '''
162: '\'
163: '('
164: ')'
165: '*'
166: '+'
167: ','
168: '-'
169: '.'
170: '/'
171: ':'
172: ';'
173: '<'
174: '='
175: '>'
176: '?'
177: '@'
178: '['
179: ']'
180: '^'
181: '_'
182: '`'
183: '{'
184: '|'
185: '}'
186: '~'
187: ' '
188: '\t'
189: '\n'
190: '\r'
191: 'a'-'z'
192: 'A'-'Z'
193: '0'-'9'
194: '0'-'9'
195: 'a'-'f'
196: 'A'-'F'
197: 'A'-'Z'
198: 'a'-'z'
199: '0'-'9'
200: \u0100-\U0010ffff
201: .
*/
