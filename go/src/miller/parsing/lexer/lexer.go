// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 182
	NumSymbols = 303
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '-'
8: '.'
9: '.'
10: '-'
11: '.'
12: '.'
13: '-'
14: 'I'
15: 'P'
16: 'S'
17: 'I'
18: 'F'
19: 'S'
20: 'I'
21: 'R'
22: 'S'
23: 'O'
24: 'P'
25: 'S'
26: 'O'
27: 'F'
28: 'S'
29: 'O'
30: 'R'
31: 'S'
32: 'N'
33: 'F'
34: 'N'
35: 'R'
36: 'F'
37: 'N'
38: 'R'
39: 'F'
40: 'I'
41: 'L'
42: 'E'
43: 'N'
44: 'A'
45: 'M'
46: 'E'
47: 'F'
48: 'I'
49: 'L'
50: 'E'
51: 'N'
52: 'U'
53: 'M'
54: 'b'
55: 'e'
56: 'g'
57: 'i'
58: 'n'
59: 'e'
60: 'n'
61: 'd'
62: 'i'
63: 'n'
64: 't'
65: 'f'
66: 'l'
67: 'o'
68: 'a'
69: 't'
70: '$'
71: '$'
72: '{'
73: '}'
74: '$'
75: '*'
76: '@'
77: '@'
78: '{'
79: '}'
80: '@'
81: '*'
82: '%'
83: '%'
84: '%'
85: 'p'
86: 'a'
87: 'n'
88: 'i'
89: 'c'
90: '%'
91: '%'
92: '%'
93: ';'
94: '{'
95: '}'
96: '='
97: '['
98: ']'
99: '$'
100: '['
101: '@'
102: '['
103: '|'
104: '|'
105: '='
106: '^'
107: '^'
108: '='
109: '&'
110: '&'
111: '='
112: '|'
113: '='
114: '^'
115: '='
116: '<'
117: '<'
118: '='
119: '>'
120: '>'
121: '='
122: '>'
123: '>'
124: '>'
125: '='
126: '+'
127: '='
128: '.'
129: '='
130: '-'
131: '='
132: '*'
133: '='
134: '/'
135: '='
136: '/'
137: '/'
138: '='
139: '%'
140: '='
141: '*'
142: '*'
143: '='
144: '?'
145: ':'
146: '|'
147: '|'
148: '^'
149: '^'
150: '&'
151: '&'
152: '='
153: '~'
154: '!'
155: '='
156: '~'
157: '='
158: '='
159: '!'
160: '='
161: '>'
162: '>'
163: '='
164: '<'
165: '<'
166: '='
167: '|'
168: '^'
169: '&'
170: '<'
171: '<'
172: '>'
173: '>'
174: '>'
175: '>'
176: '>'
177: '+'
178: '-'
179: '.'
180: '+'
181: '.'
182: '-'
183: '.'
184: '*'
185: '/'
186: '/'
187: '/'
188: '%'
189: '.'
190: '*'
191: '.'
192: '/'
193: '.'
194: '/'
195: '/'
196: '!'
197: '~'
198: '*'
199: '*'
200: '('
201: ')'
202: ','
203: '_'
204: ' '
205: '!'
206: '#'
207: '$'
208: '%'
209: '&'
210: '''
211: '\'
212: '('
213: ')'
214: '*'
215: '+'
216: ','
217: '-'
218: '.'
219: '/'
220: ':'
221: ';'
222: '<'
223: '='
224: '>'
225: '?'
226: '@'
227: '['
228: ']'
229: '^'
230: '_'
231: '`'
232: '{'
233: '|'
234: '}'
235: '~'
236: '\'
237: '"'
238: 'e'
239: 'E'
240: 't'
241: 'r'
242: 'u'
243: 'e'
244: 'f'
245: 'a'
246: 'l'
247: 's'
248: 'e'
249: ' '
250: '!'
251: '#'
252: '$'
253: '%'
254: '&'
255: '''
256: '\'
257: '('
258: ')'
259: '*'
260: '+'
261: ','
262: '-'
263: '.'
264: '/'
265: ':'
266: ';'
267: '<'
268: '='
269: '>'
270: '?'
271: '@'
272: '['
273: ']'
274: '^'
275: '_'
276: '`'
277: '|'
278: '~'
279: '\'
280: '{'
281: '\'
282: '}'
283: ' '
284: '\t'
285: '\n'
286: '\r'
287: 'a'-'z'
288: 'A'-'Z'
289: '0'-'9'
290: '0'-'9'
291: 'a'-'f'
292: 'A'-'F'
293: '0'-'1'
294: 'A'-'Z'
295: 'a'-'z'
296: '0'-'9'
297: \u0100-\U0010ffff
298: 'A'-'Z'
299: 'a'-'z'
300: '0'-'9'
301: \u0100-\U0010ffff
302: .
*/
