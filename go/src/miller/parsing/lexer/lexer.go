// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 307
	NumSymbols = 488
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '.'
8: '-'
9: '.'
10: '.'
11: '-'
12: '.'
13: '.'
14: '-'
15: 'M'
16: '_'
17: 'P'
18: 'I'
19: 'M'
20: '_'
21: 'E'
22: 'I'
23: 'P'
24: 'S'
25: 'I'
26: 'F'
27: 'S'
28: 'I'
29: 'R'
30: 'S'
31: 'I'
32: 'F'
33: 'L'
34: 'A'
35: 'T'
36: 'S'
37: 'E'
38: 'P'
39: 'O'
40: 'P'
41: 'S'
42: 'O'
43: 'F'
44: 'S'
45: 'O'
46: 'R'
47: 'S'
48: 'O'
49: 'F'
50: 'L'
51: 'A'
52: 'T'
53: 'S'
54: 'E'
55: 'P'
56: 'N'
57: 'F'
58: 'N'
59: 'R'
60: 'F'
61: 'N'
62: 'R'
63: 'F'
64: 'I'
65: 'L'
66: 'E'
67: 'N'
68: 'A'
69: 'M'
70: 'E'
71: 'F'
72: 'I'
73: 'L'
74: 'E'
75: 'N'
76: 'U'
77: 'M'
78: 'E'
79: 'N'
80: 'V'
81: 'b'
82: 'e'
83: 'g'
84: 'i'
85: 'n'
86: 'd'
87: 'o'
88: 'd'
89: 'u'
90: 'm'
91: 'p'
92: 'e'
93: 'd'
94: 'u'
95: 'm'
96: 'p'
97: 'e'
98: 'l'
99: 'i'
100: 'f'
101: 'e'
102: 'l'
103: 's'
104: 'e'
105: 'e'
106: 'm'
107: 'i'
108: 't'
109: 'e'
110: 'm'
111: 'i'
112: 't'
113: 'p'
114: 'e'
115: 'm'
116: 'i'
117: 't'
118: 'f'
119: 'e'
120: 'n'
121: 'd'
122: 'f'
123: 'i'
124: 'l'
125: 't'
126: 'e'
127: 'r'
128: 'f'
129: 'o'
130: 'r'
131: 'i'
132: 'f'
133: 'i'
134: 'n'
135: 'w'
136: 'h'
137: 'i'
138: 'l'
139: 'e'
140: 'b'
141: 'r'
142: 'e'
143: 'a'
144: 'k'
145: 'c'
146: 'o'
147: 'n'
148: 't'
149: 'i'
150: 'n'
151: 'u'
152: 'e'
153: 'r'
154: 'e'
155: 't'
156: 'u'
157: 'r'
158: 'n'
159: 'f'
160: 'u'
161: 'n'
162: 'c'
163: 's'
164: 'u'
165: 'b'
166: 'r'
167: 'c'
168: 'a'
169: 'l'
170: 'l'
171: 'a'
172: 'r'
173: 'r'
174: 'b'
175: 'o'
176: 'o'
177: 'l'
178: 'f'
179: 'l'
180: 'o'
181: 'a'
182: 't'
183: 'i'
184: 'n'
185: 't'
186: 'm'
187: 'a'
188: 'p'
189: 'n'
190: 'u'
191: 'm'
192: 's'
193: 't'
194: 'r'
195: 'v'
196: 'a'
197: 'r'
198: 'u'
199: 'n'
200: 's'
201: 'e'
202: 't'
203: 'p'
204: 'r'
205: 'i'
206: 'n'
207: 't'
208: 'p'
209: 'r'
210: 'i'
211: 'n'
212: 't'
213: 'n'
214: 'e'
215: 'p'
216: 'r'
217: 'i'
218: 'n'
219: 't'
220: 'e'
221: 'p'
222: 'r'
223: 'i'
224: 'n'
225: 't'
226: 'n'
227: '$'
228: '$'
229: '{'
230: '}'
231: '$'
232: '*'
233: '@'
234: '@'
235: '{'
236: '}'
237: '@'
238: '*'
239: '%'
240: '%'
241: '%'
242: 'p'
243: 'a'
244: 'n'
245: 'i'
246: 'c'
247: '%'
248: '%'
249: '%'
250: ';'
251: '{'
252: '}'
253: '='
254: '('
255: ')'
256: ','
257: '$'
258: '['
259: ']'
260: '$'
261: '['
262: '['
263: '$'
264: '['
265: '['
266: '['
267: '@'
268: '['
269: '|'
270: '|'
271: '='
272: '^'
273: '^'
274: '='
275: '&'
276: '&'
277: '='
278: '?'
279: '?'
280: '='
281: '?'
282: '?'
283: '?'
284: '='
285: '|'
286: '='
287: '&'
288: '='
289: '^'
290: '='
291: '<'
292: '<'
293: '='
294: '>'
295: '>'
296: '='
297: '>'
298: '>'
299: '>'
300: '='
301: '+'
302: '='
303: '.'
304: '='
305: '-'
306: '='
307: '*'
308: '='
309: '/'
310: '='
311: '/'
312: '/'
313: '='
314: '%'
315: '='
316: '*'
317: '*'
318: '='
319: '?'
320: ':'
321: '|'
322: '|'
323: '^'
324: '^'
325: '&'
326: '&'
327: '?'
328: '?'
329: '?'
330: '?'
331: '?'
332: '='
333: '~'
334: '!'
335: '='
336: '~'
337: '='
338: '='
339: '!'
340: '='
341: '>'
342: '>'
343: '='
344: '<'
345: '<'
346: '='
347: '|'
348: '^'
349: '&'
350: '<'
351: '<'
352: '>'
353: '>'
354: '>'
355: '>'
356: '>'
357: '+'
358: '-'
359: '.'
360: '+'
361: '.'
362: '-'
363: '.'
364: '*'
365: '/'
366: '/'
367: '/'
368: '%'
369: '.'
370: '*'
371: '.'
372: '/'
373: '.'
374: '/'
375: '/'
376: '!'
377: '~'
378: '*'
379: '*'
380: '['
381: '['
382: '['
383: '['
384: '['
385: '['
386: '_'
387: ' '
388: '!'
389: '#'
390: '$'
391: '%'
392: '&'
393: '''
394: '\'
395: '('
396: ')'
397: '*'
398: '+'
399: ','
400: '-'
401: '.'
402: '/'
403: ':'
404: ';'
405: '<'
406: '='
407: '>'
408: '?'
409: '@'
410: '['
411: ']'
412: '^'
413: '_'
414: '`'
415: '{'
416: '|'
417: '}'
418: '~'
419: '\'
420: '"'
421: 'e'
422: 'E'
423: 't'
424: 'r'
425: 'u'
426: 'e'
427: 'f'
428: 'a'
429: 'l'
430: 's'
431: 'e'
432: ' '
433: '!'
434: '#'
435: '$'
436: '%'
437: '&'
438: '''
439: '\'
440: '('
441: ')'
442: '*'
443: '+'
444: ','
445: '-'
446: '.'
447: '/'
448: ':'
449: ';'
450: '<'
451: '='
452: '>'
453: '?'
454: '@'
455: '['
456: ']'
457: '^'
458: '_'
459: '`'
460: '|'
461: '~'
462: '\'
463: '{'
464: '\'
465: '}'
466: ' '
467: '\t'
468: '\n'
469: '\r'
470: '#'
471: '\n'
472: 'a'-'z'
473: 'A'-'Z'
474: '0'-'9'
475: '0'-'9'
476: 'a'-'f'
477: 'A'-'F'
478: '0'-'1'
479: 'A'-'Z'
480: 'a'-'z'
481: '0'-'9'
482: \u0100-\U0010ffff
483: 'A'-'Z'
484: 'a'-'z'
485: '0'-'9'
486: \u0100-\U0010ffff
487: .
*/
