// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 195
	NumSymbols = 320
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '-'
8: '.'
9: '.'
10: '-'
11: '.'
12: '.'
13: '-'
14: 'M'
15: '_'
16: 'P'
17: 'I'
18: 'M'
19: '_'
20: 'E'
21: 'I'
22: 'P'
23: 'S'
24: 'I'
25: 'F'
26: 'S'
27: 'I'
28: 'R'
29: 'S'
30: 'O'
31: 'P'
32: 'S'
33: 'O'
34: 'F'
35: 'S'
36: 'O'
37: 'R'
38: 'S'
39: 'N'
40: 'F'
41: 'N'
42: 'R'
43: 'F'
44: 'N'
45: 'R'
46: 'F'
47: 'I'
48: 'L'
49: 'E'
50: 'N'
51: 'A'
52: 'M'
53: 'E'
54: 'F'
55: 'I'
56: 'L'
57: 'E'
58: 'N'
59: 'U'
60: 'M'
61: 'b'
62: 'e'
63: 'g'
64: 'i'
65: 'n'
66: 'e'
67: 'n'
68: 'd'
69: 'f'
70: 'i'
71: 'l'
72: 't'
73: 'e'
74: 'r'
75: 'e'
76: 'm'
77: 'i'
78: 't'
79: 'i'
80: 'n'
81: 't'
82: 'f'
83: 'l'
84: 'o'
85: 'a'
86: 't'
87: '$'
88: '$'
89: '{'
90: '}'
91: '$'
92: '*'
93: '@'
94: '@'
95: '{'
96: '}'
97: '@'
98: '*'
99: '%'
100: '%'
101: '%'
102: 'p'
103: 'a'
104: 'n'
105: 'i'
106: 'c'
107: '%'
108: '%'
109: '%'
110: ';'
111: '{'
112: '}'
113: '='
114: '['
115: ']'
116: '$'
117: '['
118: '@'
119: '['
120: '|'
121: '|'
122: '='
123: '^'
124: '^'
125: '='
126: '&'
127: '&'
128: '='
129: '|'
130: '='
131: '^'
132: '='
133: '<'
134: '<'
135: '='
136: '>'
137: '>'
138: '='
139: '>'
140: '>'
141: '>'
142: '='
143: '+'
144: '='
145: '.'
146: '='
147: '-'
148: '='
149: '*'
150: '='
151: '/'
152: '='
153: '/'
154: '/'
155: '='
156: '%'
157: '='
158: '*'
159: '*'
160: '='
161: '?'
162: ':'
163: '|'
164: '|'
165: '^'
166: '^'
167: '&'
168: '&'
169: '='
170: '~'
171: '!'
172: '='
173: '~'
174: '='
175: '='
176: '!'
177: '='
178: '>'
179: '>'
180: '='
181: '<'
182: '<'
183: '='
184: '|'
185: '^'
186: '&'
187: '<'
188: '<'
189: '>'
190: '>'
191: '>'
192: '>'
193: '>'
194: '+'
195: '-'
196: '.'
197: '+'
198: '.'
199: '-'
200: '.'
201: '*'
202: '/'
203: '/'
204: '/'
205: '%'
206: '.'
207: '*'
208: '.'
209: '/'
210: '.'
211: '/'
212: '/'
213: '!'
214: '~'
215: '*'
216: '*'
217: '('
218: ')'
219: ','
220: '_'
221: ' '
222: '!'
223: '#'
224: '$'
225: '%'
226: '&'
227: '''
228: '\'
229: '('
230: ')'
231: '*'
232: '+'
233: ','
234: '-'
235: '.'
236: '/'
237: ':'
238: ';'
239: '<'
240: '='
241: '>'
242: '?'
243: '@'
244: '['
245: ']'
246: '^'
247: '_'
248: '`'
249: '{'
250: '|'
251: '}'
252: '~'
253: '\'
254: '"'
255: 'e'
256: 'E'
257: 't'
258: 'r'
259: 'u'
260: 'e'
261: 'f'
262: 'a'
263: 'l'
264: 's'
265: 'e'
266: ' '
267: '!'
268: '#'
269: '$'
270: '%'
271: '&'
272: '''
273: '\'
274: '('
275: ')'
276: '*'
277: '+'
278: ','
279: '-'
280: '.'
281: '/'
282: ':'
283: ';'
284: '<'
285: '='
286: '>'
287: '?'
288: '@'
289: '['
290: ']'
291: '^'
292: '_'
293: '`'
294: '|'
295: '~'
296: '\'
297: '{'
298: '\'
299: '}'
300: ' '
301: '\t'
302: '\n'
303: '\r'
304: 'a'-'z'
305: 'A'-'Z'
306: '0'-'9'
307: '0'-'9'
308: 'a'-'f'
309: 'A'-'F'
310: '0'-'1'
311: 'A'-'Z'
312: 'a'-'z'
313: '0'-'9'
314: \u0100-\U0010ffff
315: 'A'-'Z'
316: 'a'-'z'
317: '0'-'9'
318: \u0100-\U0010ffff
319: .
*/
