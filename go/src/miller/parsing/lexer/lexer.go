// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 58
	NumSymbols = 74
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '$'
1: '-'
2: '0'
3: 'x'
4: ';'
5: '='
6: '|'
7: '|'
8: '='
9: '^'
10: '^'
11: '='
12: '&'
13: '&'
14: '='
15: '|'
16: '='
17: '^'
18: '='
19: '&'
20: '='
21: '<'
22: '<'
23: '='
24: '>'
25: '>'
26: '='
27: '+'
28: '='
29: '.'
30: '='
31: '-'
32: '='
33: '*'
34: '='
35: '/'
36: '='
37: '/'
38: '/'
39: '='
40: '%'
41: '='
42: '*'
43: '*'
44: '='
45: '?'
46: ':'
47: '|'
48: '|'
49: '^'
50: '^'
51: '&'
52: '&'
53: 't'
54: 'r'
55: 'u'
56: 'e'
57: 'f'
58: 'a'
59: 'l'
60: 's'
61: 'e'
62: '_'
63: ' '
64: '\t'
65: '\n'
66: '\r'
67: 'a'-'z'
68: 'A'-'Z'
69: '0'-'9'
70: '0'-'9'
71: 'a'-'f'
72: 'A'-'F'
73: .
*/
