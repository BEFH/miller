// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 71
	NumSymbols = 119
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '$'
1: '-'
2: '0'
3: 'x'
4: 't'
5: 'r'
6: 'u'
7: 'e'
8: 'f'
9: 'a'
10: 'l'
11: 's'
12: 'e'
13: ';'
14: '='
15: '|'
16: '|'
17: '='
18: '^'
19: '^'
20: '='
21: '&'
22: '&'
23: '='
24: '|'
25: '='
26: '^'
27: '='
28: '&'
29: '='
30: '<'
31: '<'
32: '='
33: '>'
34: '>'
35: '='
36: '+'
37: '='
38: '.'
39: '='
40: '-'
41: '='
42: '*'
43: '='
44: '/'
45: '='
46: '/'
47: '/'
48: '='
49: '%'
50: '='
51: '*'
52: '*'
53: '='
54: '?'
55: ':'
56: '|'
57: '|'
58: '^'
59: '^'
60: '&'
61: '&'
62: '='
63: '~'
64: '!'
65: '='
66: '~'
67: '='
68: '='
69: '!'
70: '='
71: '>'
72: '>'
73: '='
74: '<'
75: '<'
76: '='
77: '|'
78: '^'
79: '&'
80: '<'
81: '<'
82: '>'
83: '>'
84: '+'
85: '-'
86: '.'
87: '+'
88: '.'
89: '-'
90: '.'
91: '*'
92: '/'
93: '/'
94: '/'
95: '%'
96: '.'
97: '*'
98: '.'
99: '/'
100: '.'
101: '/'
102: '/'
103: '!'
104: '~'
105: '*'
106: '*'
107: '_'
108: ' '
109: '\t'
110: '\n'
111: '\r'
112: 'a'-'z'
113: 'A'-'Z'
114: '0'-'9'
115: '0'-'9'
116: 'a'-'f'
117: 'A'-'F'
118: .
*/
