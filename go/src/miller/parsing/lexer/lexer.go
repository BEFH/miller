// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 278
	NumSymbols = 432
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '.'
8: '-'
9: '.'
10: '.'
11: '-'
12: '.'
13: '.'
14: '-'
15: 'M'
16: '_'
17: 'P'
18: 'I'
19: 'M'
20: '_'
21: 'E'
22: 'I'
23: 'P'
24: 'S'
25: 'I'
26: 'F'
27: 'S'
28: 'I'
29: 'R'
30: 'S'
31: 'O'
32: 'P'
33: 'S'
34: 'O'
35: 'F'
36: 'S'
37: 'O'
38: 'R'
39: 'S'
40: 'N'
41: 'F'
42: 'N'
43: 'R'
44: 'F'
45: 'N'
46: 'R'
47: 'F'
48: 'I'
49: 'L'
50: 'E'
51: 'N'
52: 'A'
53: 'M'
54: 'E'
55: 'F'
56: 'I'
57: 'L'
58: 'E'
59: 'N'
60: 'U'
61: 'M'
62: 'b'
63: 'e'
64: 'g'
65: 'i'
66: 'n'
67: 'd'
68: 'o'
69: 'd'
70: 'u'
71: 'm'
72: 'p'
73: 'e'
74: 'd'
75: 'u'
76: 'm'
77: 'p'
78: 'e'
79: 'l'
80: 'i'
81: 'f'
82: 'e'
83: 'l'
84: 's'
85: 'e'
86: 'e'
87: 'm'
88: 'i'
89: 't'
90: 'e'
91: 'n'
92: 'd'
93: 'f'
94: 'i'
95: 'l'
96: 't'
97: 'e'
98: 'r'
99: 'f'
100: 'o'
101: 'r'
102: 'i'
103: 'f'
104: 'i'
105: 'n'
106: 'w'
107: 'h'
108: 'i'
109: 'l'
110: 'e'
111: 'b'
112: 'r'
113: 'e'
114: 'a'
115: 'k'
116: 'c'
117: 'o'
118: 'n'
119: 't'
120: 'i'
121: 'n'
122: 'u'
123: 'e'
124: 'f'
125: 'u'
126: 'n'
127: 'c'
128: 'r'
129: 'e'
130: 't'
131: 'u'
132: 'r'
133: 'n'
134: 'a'
135: 'r'
136: 'r'
137: 'b'
138: 'o'
139: 'o'
140: 'l'
141: 'f'
142: 'l'
143: 'o'
144: 'a'
145: 't'
146: 'i'
147: 'n'
148: 't'
149: 'm'
150: 'a'
151: 'p'
152: 'n'
153: 'u'
154: 'm'
155: 's'
156: 't'
157: 'r'
158: 'v'
159: 'a'
160: 'r'
161: 'u'
162: 'n'
163: 's'
164: 'e'
165: 't'
166: 'p'
167: 'r'
168: 'i'
169: 'n'
170: 't'
171: 'p'
172: 'r'
173: 'i'
174: 'n'
175: 't'
176: 'n'
177: 'e'
178: 'p'
179: 'r'
180: 'i'
181: 'n'
182: 't'
183: 'e'
184: 'p'
185: 'r'
186: 'i'
187: 'n'
188: 't'
189: 'n'
190: '$'
191: '$'
192: '{'
193: '}'
194: '$'
195: '*'
196: '@'
197: '@'
198: '{'
199: '}'
200: '@'
201: '*'
202: '%'
203: '%'
204: '%'
205: 'p'
206: 'a'
207: 'n'
208: 'i'
209: 'c'
210: '%'
211: '%'
212: '%'
213: ';'
214: '{'
215: '}'
216: '='
217: '$'
218: '['
219: ']'
220: '@'
221: '['
222: '|'
223: '|'
224: '='
225: '^'
226: '^'
227: '='
228: '&'
229: '&'
230: '='
231: '?'
232: '?'
233: '='
234: '|'
235: '='
236: '&'
237: '='
238: '^'
239: '='
240: '<'
241: '<'
242: '='
243: '>'
244: '>'
245: '='
246: '>'
247: '>'
248: '>'
249: '='
250: '+'
251: '='
252: '.'
253: '='
254: '-'
255: '='
256: '*'
257: '='
258: '/'
259: '='
260: '/'
261: '/'
262: '='
263: '%'
264: '='
265: '*'
266: '*'
267: '='
268: '?'
269: ':'
270: '|'
271: '|'
272: '^'
273: '^'
274: '&'
275: '&'
276: '?'
277: '?'
278: '='
279: '~'
280: '!'
281: '='
282: '~'
283: '='
284: '='
285: '!'
286: '='
287: '>'
288: '>'
289: '='
290: '<'
291: '<'
292: '='
293: '|'
294: '^'
295: '&'
296: '<'
297: '<'
298: '>'
299: '>'
300: '>'
301: '>'
302: '>'
303: '+'
304: '-'
305: '.'
306: '+'
307: '.'
308: '-'
309: '.'
310: '*'
311: '/'
312: '/'
313: '/'
314: '%'
315: '.'
316: '*'
317: '.'
318: '/'
319: '.'
320: '/'
321: '/'
322: '!'
323: '~'
324: '*'
325: '*'
326: '('
327: ')'
328: '['
329: ','
330: '_'
331: ' '
332: '!'
333: '#'
334: '$'
335: '%'
336: '&'
337: '''
338: '\'
339: '('
340: ')'
341: '*'
342: '+'
343: ','
344: '-'
345: '.'
346: '/'
347: ':'
348: ';'
349: '<'
350: '='
351: '>'
352: '?'
353: '@'
354: '['
355: ']'
356: '^'
357: '_'
358: '`'
359: '{'
360: '|'
361: '}'
362: '~'
363: '\'
364: '"'
365: 'e'
366: 'E'
367: 't'
368: 'r'
369: 'u'
370: 'e'
371: 'f'
372: 'a'
373: 'l'
374: 's'
375: 'e'
376: ' '
377: '!'
378: '#'
379: '$'
380: '%'
381: '&'
382: '''
383: '\'
384: '('
385: ')'
386: '*'
387: '+'
388: ','
389: '-'
390: '.'
391: '/'
392: ':'
393: ';'
394: '<'
395: '='
396: '>'
397: '?'
398: '@'
399: '['
400: ']'
401: '^'
402: '_'
403: '`'
404: '|'
405: '~'
406: '\'
407: '{'
408: '\'
409: '}'
410: ' '
411: '\t'
412: '\n'
413: '\r'
414: '#'
415: '\n'
416: 'a'-'z'
417: 'A'-'Z'
418: '0'-'9'
419: '0'-'9'
420: 'a'-'f'
421: 'A'-'F'
422: '0'-'1'
423: 'A'-'Z'
424: 'a'-'z'
425: '0'-'9'
426: \u0100-\U0010ffff
427: 'A'-'Z'
428: 'a'-'z'
429: '0'-'9'
430: \u0100-\U0010ffff
431: .
*/
