// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"miller/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 281
	NumSymbols = 435
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '0'
3: 'x'
4: '0'
5: 'b'
6: '.'
7: '.'
8: '-'
9: '.'
10: '.'
11: '-'
12: '.'
13: '.'
14: '-'
15: 'M'
16: '_'
17: 'P'
18: 'I'
19: 'M'
20: '_'
21: 'E'
22: 'I'
23: 'P'
24: 'S'
25: 'I'
26: 'F'
27: 'S'
28: 'I'
29: 'R'
30: 'S'
31: 'O'
32: 'P'
33: 'S'
34: 'O'
35: 'F'
36: 'S'
37: 'O'
38: 'R'
39: 'S'
40: 'N'
41: 'F'
42: 'N'
43: 'R'
44: 'F'
45: 'N'
46: 'R'
47: 'F'
48: 'I'
49: 'L'
50: 'E'
51: 'N'
52: 'A'
53: 'M'
54: 'E'
55: 'F'
56: 'I'
57: 'L'
58: 'E'
59: 'N'
60: 'U'
61: 'M'
62: 'E'
63: 'N'
64: 'V'
65: 'b'
66: 'e'
67: 'g'
68: 'i'
69: 'n'
70: 'd'
71: 'o'
72: 'd'
73: 'u'
74: 'm'
75: 'p'
76: 'e'
77: 'd'
78: 'u'
79: 'm'
80: 'p'
81: 'e'
82: 'l'
83: 'i'
84: 'f'
85: 'e'
86: 'l'
87: 's'
88: 'e'
89: 'e'
90: 'm'
91: 'i'
92: 't'
93: 'e'
94: 'n'
95: 'd'
96: 'f'
97: 'i'
98: 'l'
99: 't'
100: 'e'
101: 'r'
102: 'f'
103: 'o'
104: 'r'
105: 'i'
106: 'f'
107: 'i'
108: 'n'
109: 'w'
110: 'h'
111: 'i'
112: 'l'
113: 'e'
114: 'b'
115: 'r'
116: 'e'
117: 'a'
118: 'k'
119: 'c'
120: 'o'
121: 'n'
122: 't'
123: 'i'
124: 'n'
125: 'u'
126: 'e'
127: 'f'
128: 'u'
129: 'n'
130: 'c'
131: 'r'
132: 'e'
133: 't'
134: 'u'
135: 'r'
136: 'n'
137: 'a'
138: 'r'
139: 'r'
140: 'b'
141: 'o'
142: 'o'
143: 'l'
144: 'f'
145: 'l'
146: 'o'
147: 'a'
148: 't'
149: 'i'
150: 'n'
151: 't'
152: 'm'
153: 'a'
154: 'p'
155: 'n'
156: 'u'
157: 'm'
158: 's'
159: 't'
160: 'r'
161: 'v'
162: 'a'
163: 'r'
164: 'u'
165: 'n'
166: 's'
167: 'e'
168: 't'
169: 'p'
170: 'r'
171: 'i'
172: 'n'
173: 't'
174: 'p'
175: 'r'
176: 'i'
177: 'n'
178: 't'
179: 'n'
180: 'e'
181: 'p'
182: 'r'
183: 'i'
184: 'n'
185: 't'
186: 'e'
187: 'p'
188: 'r'
189: 'i'
190: 'n'
191: 't'
192: 'n'
193: '$'
194: '$'
195: '{'
196: '}'
197: '$'
198: '*'
199: '@'
200: '@'
201: '{'
202: '}'
203: '@'
204: '*'
205: '%'
206: '%'
207: '%'
208: 'p'
209: 'a'
210: 'n'
211: 'i'
212: 'c'
213: '%'
214: '%'
215: '%'
216: ';'
217: '{'
218: '}'
219: '='
220: '$'
221: '['
222: ']'
223: '@'
224: '['
225: '|'
226: '|'
227: '='
228: '^'
229: '^'
230: '='
231: '&'
232: '&'
233: '='
234: '?'
235: '?'
236: '='
237: '|'
238: '='
239: '&'
240: '='
241: '^'
242: '='
243: '<'
244: '<'
245: '='
246: '>'
247: '>'
248: '='
249: '>'
250: '>'
251: '>'
252: '='
253: '+'
254: '='
255: '.'
256: '='
257: '-'
258: '='
259: '*'
260: '='
261: '/'
262: '='
263: '/'
264: '/'
265: '='
266: '%'
267: '='
268: '*'
269: '*'
270: '='
271: '?'
272: ':'
273: '|'
274: '|'
275: '^'
276: '^'
277: '&'
278: '&'
279: '?'
280: '?'
281: '='
282: '~'
283: '!'
284: '='
285: '~'
286: '='
287: '='
288: '!'
289: '='
290: '>'
291: '>'
292: '='
293: '<'
294: '<'
295: '='
296: '|'
297: '^'
298: '&'
299: '<'
300: '<'
301: '>'
302: '>'
303: '>'
304: '>'
305: '>'
306: '+'
307: '-'
308: '.'
309: '+'
310: '.'
311: '-'
312: '.'
313: '*'
314: '/'
315: '/'
316: '/'
317: '%'
318: '.'
319: '*'
320: '.'
321: '/'
322: '.'
323: '/'
324: '/'
325: '!'
326: '~'
327: '*'
328: '*'
329: '('
330: ')'
331: '['
332: ','
333: '_'
334: ' '
335: '!'
336: '#'
337: '$'
338: '%'
339: '&'
340: '''
341: '\'
342: '('
343: ')'
344: '*'
345: '+'
346: ','
347: '-'
348: '.'
349: '/'
350: ':'
351: ';'
352: '<'
353: '='
354: '>'
355: '?'
356: '@'
357: '['
358: ']'
359: '^'
360: '_'
361: '`'
362: '{'
363: '|'
364: '}'
365: '~'
366: '\'
367: '"'
368: 'e'
369: 'E'
370: 't'
371: 'r'
372: 'u'
373: 'e'
374: 'f'
375: 'a'
376: 'l'
377: 's'
378: 'e'
379: ' '
380: '!'
381: '#'
382: '$'
383: '%'
384: '&'
385: '''
386: '\'
387: '('
388: ')'
389: '*'
390: '+'
391: ','
392: '-'
393: '.'
394: '/'
395: ':'
396: ';'
397: '<'
398: '='
399: '>'
400: '?'
401: '@'
402: '['
403: ']'
404: '^'
405: '_'
406: '`'
407: '|'
408: '~'
409: '\'
410: '{'
411: '\'
412: '}'
413: ' '
414: '\t'
415: '\n'
416: '\r'
417: '#'
418: '\n'
419: 'a'-'z'
420: 'A'-'Z'
421: '0'-'9'
422: '0'-'9'
423: 'a'-'f'
424: 'A'-'F'
425: '0'-'1'
426: 'A'-'Z'
427: 'a'-'z'
428: '0'-'9'
429: \u0100-\U0010ffff
430: 'A'-'Z'
431: 'a'-'z'
432: '0'-'9'
433: \u0100-\U0010ffff
434: .
*/
