// ================================================================
// GRAMMAR FOR THE MILLER DOMAIN-SPECIFIC LANGUAGE
//
// This is the Miller DSL's BNF grammar, using the awesome GOCC tool framework
// from https://github.com/goccmack/gocc.
//
// The first section is lexical elements and the second section is syntactical
// elements. These are the analogs of lex and yacc, respectively, using a
// classical C/lex/yacc framework -- although for lex/yacc one would have
// separate .l and .y files, whereas here there is a single .bnf file.
//
// Notes:
//
// * Lexical items are either literals inlined within the syntactical section,
//   such as "/", or snake-cased named tokens within the lexical section, such
//   as md_token_field_name.
//
// * Syntactical items are all camel-cased, such as MapLiteral.
//
// * This grammar is used to auto-generate Go code, using bin/gocc.
//
// * Everything is delivered in the form of an abstract syntax tree (AST),
//   via <<...>>> code segments within this file's syntactical section, to be
//   processed in hand-written Go code. That code, in turn, turns the AST into
//   a CST (concrete syntax tree) which is what the DSL runtime executes.
//
// * The <<...>> code called by the gocc framework must accept interface{},
//   to be generic, but in practice all arguments end up being token.Token
//   (regcognizable here via string-literals or snake-cased namees) or
//   *miller.dsl.AstNode (recognizable here via camel-cased names).
//
// * Another pattern worth pointing out is that in the gocc framework,
//   return-types from AST methods must be a pair of (interface{}, error),
//   whereas argument going into those same methods are interface{} only.
//   Hence a few methods in the Miller AST API which don't return a pair of
//   interface{}/error since they are meant for nesting as arguments here
//   within this file.
//
// * Please see src/miller/dsl/ast.go for more about what the <<...>>
//   code here is calling.
// ================================================================

// ================================================================
// LEXICAL ELEMENTS
// ================================================================

// ----------------------------------------------------------------
// CHARACTER CLASSES
// ----------------------------------------------------------------

_letter : 'a'-'z' | 'A'-'Z' ;
_decdig : '0'-'9' ;
_hexdig : '0'-'9' | 'a'-'f' | 'A'-'F';
_idchar : _letter | _decdig | '_' ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

// ----------------------------------------------------------------
// STRING/INT/FLOAT/BOOLEAN LITERALS
// ----------------------------------------------------------------

// Notes on string literals:
// * " isn't included here -- need \" handling to put that inside strings
// * GOCC seems to lack a '[^"] notation ...
_string_literal_element
  : 'A'-'Z' | 'a'-'z' | '0'-'9'
  | ' ' | '!' | '#' | '$' | '%' | '&' | '\'' | '\\'
  | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/'
  | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '['
  | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~'
  | ( '\\' '"' )
  | '\u0100'-'\U0010FFFF'
;
md_token_string_literal : '"' {_string_literal_element} '"' ;

// md_token_regexi : \"([^\\\"]|\\.)*\"\i ;

// Notes on int literals:
// * Leading minus sign is handled via the unary-minus operator, not here.
md_token_int_literal
  : _decdig { _decdig }
  | '0' 'x' _hexdig { _hexdig }
;

// Notes on float literals:
// * Leading minus sign is handled via the unary-minus operator, not here.
// * The various shapes are for scientific notation. Examples:
//   123
//   123.
//   123.4
//   .234
//   1e2
//   1e-2
//   1.2e3 1.e3
//   1.2e-3 1.e-3
//   .2e3
//   .2e-3 1.e-3
_scinotE : 'e' | 'E' ;
md_token_float_literal
  : _decdig { _decdig} '.' { _decdig }
  | _decdig { _decdig}                        _scinotE     _decdig { _decdig}
  | _decdig { _decdig}                        _scinotE '-' _decdig { _decdig}
  | _decdig { _decdig} '.'         { _decdig} _scinotE     _decdig { _decdig}
  | _decdig { _decdig} '.'         { _decdig} _scinotE '-' _decdig { _decdig}
  |         { _decdig} '.' _decdig { _decdig} _scinotE     _decdig { _decdig}
  |         { _decdig} '.' _decdig { _decdig} _scinotE '-' _decdig { _decdig}
;

// Notes on boolean literals:
// * true and false should be defined here rather than as "true" / "false"
//   within the grammar below -- this forces them to be keywords, not legal as
//   variable names. We want them as keywords -- we don't want to allow things
//   like 'true = 3'.
_md_token_true : 't' 'r' 'u' 'e' ;
_md_token_false : 'f' 'a' 'l' 's' 'e';
md_token_boolean_literal : ( _md_token_true | _md_token_false );

// ----------------------------------------------------------------
// MILLER CONTEXT VARIABLES
// ----------------------------------------------------------------

md_token_IPS : 'I' 'P' 'S' ;
md_token_IFS : 'I' 'F' 'S' ;
md_token_IRS : 'I' 'R' 'S' ;

md_token_OPS : 'O' 'P' 'S' ;
md_token_OFS : 'O' 'F' 'S' ;
md_token_ORS : 'O' 'R' 'S' ;

md_token_NF  : 'N' 'F' ;
md_token_NR  : 'N' 'R' ;
md_token_FNR : 'F' 'N' 'R' ;

md_token_FILENAME : 'F' 'I' 'L' 'E' 'N' 'A' 'M' 'E' ;
md_token_FILENUM  : 'F' 'I' 'L' 'E' 'N' 'U' 'M' ;

// md_token_M_PI  : 'M' '_' 'P' 'I' `
// md_token_M_E   : 'M' '_' 'E' ;`
// md_token_ENV   : 'E' 'N' 'V' ;`

// ----------------------------------------------------------------
// MILLER KEYWORDS
// ----------------------------------------------------------------

// Notes on keywords:
// * Any new keywords defined here should also be documented
//   in dsl/mlr_dsl_cst.c's mlr_dsl_keyword_usage() et al.
// * true and false (boolean literals) are also keywords, defined above.

md_token_begin    : 'b' 'e' 'g' 'i' 'n' ;
md_token_end      : 'e' 'n' 'd' ;

//md_token_all      : 'a' 'l' 'l' ;
//md_token_break    : 'b' 'r' 'e' 'a' 'k' ;
//md_token_call     : 'c' 'a' 'l' 'l' ;
//md_token_continue : 'c' 'o' 'n' 't' 'i' 'n' 'u' 'e' ;
//md_token_do       : 'd' 'o' ;
//md_token_dump     : 'd' 'u' 'm' 'p' ;
//md_token_edump    : 'e' 'd' 'u' 'm' 'p' ;
//md_token_elif     : 'e' 'l' 'i' 'f' ;
//md_token_else     : 'e' 'l' 's' 'e' ;
//md_token_emit     : 'e' 'm' 'i' 't' ;
//md_token_emitf    : 'e' 'm' 'i' 't' 'f' ;
//md_token_emitp    : 'e' 'm' 'i' 't' 'p' ;
//md_token_eprint   : 'e' 'p' 'r' 'i' 'n' 't' ;
//md_token_eprintn  : 'e' 'p' 'r' 'i' 'n' 't' 'n' ;
//md_token_filter   : 'f' 'i' 'l' 't' 'e' 'r' ;
//md_token_for      : 'f' 'o' 'r' ;
//md_token_func     : 'f' 'u' 'n' 'c' ;
//md_token_if       : 'i' 'f' ;
//md_token_in       : 'i' 'n' ;
//md_token_print    : 'p' 'r' 'i' 'n' 't' ;
//md_token_printn   : 'p' 'r' 'i' 'n' 't' 'n' ;
//md_token_return   : 'r' 'e' 't' 'u' 'r' 'n' ;
//md_token_stderr   : 's' 't' 'd' 'e' 'r' 'r' ;
//md_token_stdout   : 's' 't' 'd' 'o' 'u' 't' ;
//md_token_subr     : 's' 'u' 'b' 'r' ;
//md_token_tee      : 't' 'e' 'e' ;
//md_token_unset    : 'u' 'n' 's' 'e' 't' ;
//md_token_while    : 'w' 'h' 'i' 'l' 'e' ;

//md_token_map_type   : 'm' 'a' 'p' ;
//md_token_num_type   : 'n' 'u' 'm' ;
//md_token_int_type   : 'i' 'n' 't' ;
//md_token_float_type : 'f' 'l' 'o' 'a' 't' ;
//md_token_bool_type  : 'b' 'o' 'o' 'l' ;
//md_token_str_type   : 's' 't' 'r' ;

// ----------------------------------------------------------------
// FIELD NAMES, OUT-OF-STREAM VARIABLES, LOCAL VARIABLES
// ----------------------------------------------------------------

// Note: the parser depends on the dollar sign being here. If this is changed,
// that needs to be changed as well.
//
// Also note: if we omit the '$' here and include it in the parser section
// below as "$", then we get an LR-1 conflict. So this must be dealt with at
// the AST level.
md_token_field_name : '$' _idchar { _idchar } ;

// This is for literal strings but where the field name might have spaces in it
// or somesuch.
_braced_char
  : 'A'-'Z' | 'a'-'z' | '0'-'9'
  | ' ' | '!' | '#' | '$' | '%' | '&' | '\'' | '\\'
  | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/'
  | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '['
  | ']' | '^' | '_' | '`'       | '|'       | '~'
  | ( '\\' '{' ) | ( '\\' '}' )
  | '\u0100'-'\U0010FFFF'
;
md_token_braced_field_name: '$' '{' _braced_char { _braced_char } '}' ;

md_token_full_srec : '$' '*' ;

md_token_oosvar_name : '@' _idchar { _idchar } ;

// This is for literal strings but where the oosvar name might have spaces in it
// or somesuch.
md_token_braced_oosvar_name: '@' '{' _braced_char { _braced_char } '}' ;

md_token_full_oosvar : '@' '*' ;

// ----------------------------------------------------------------
// PANIC TOKEN
// ----------------------------------------------------------------

// This is for testing short-circuiting of "&&", "||", etc in the CST.  The
// sole job of the CST evaluator for this token is to panic the process -- so
// we'll know if we're evaluating something we should not.
md_token_panic : '%' '%' '%' 'p' 'a' 'n' 'i' 'c' '%' '%' '%' ;


// ================================================================
// SYNTAX ELEMENTS
// ================================================================

// ================================================================
// Parsing goes through three formats:
//
// (1) Source code which is a string of characters.
//
// (2) Abstract syntax tree (AST):
//
//    * Parentheses, commas, semicolons, line endings, whitespace are all stripped away
//    * Variable names and literal values remain as leaf nodes of the AST
//    * = + - * / ** {function names} remain as non-leaf nodes of the AST
//
// (3) Concrete syntax tree (CST): a reshaping of the AST with pre-processed
//     setup of function pointers to handle each type of statement on a
//     per-record basis. The if/else and/or switch statements to decide what to
//     do with each AST node are done at CST-build time, so they don't need to
//     be re-done when the syntax tree is executed once on every data record.
//
// The job of this parser is to turn (1) into (2).
//
// Note: This parser accepts many things that are invalid, e.g.
// * begin{end{}} -- begin/end not at top level
// * begin{$x=1} -- references to stream records at begin/end (there is no $x when
//   there is no input record yet)
// * break/continue outside of for/while/do-while
// * return outside of a function definition
// * $x=x -- boundvars outside of for-loop variable bindings
//
// All of the above are enforced by the CST builder's semantic-analysis logic,
// which takes this parser's output AST as input.  This is done (a) to keep
// this grammar from being overly complex, and (b) so we can get more
// informative error messages.
//
// For clearer visuals on what the ASTs look like, you can do 
//
//   mlr -n put -v 'your expression goes here'
//
// Also see reg_test/run's filter -v and put -v outputs, e.g. in
// reg_test/expected/out.
// ================================================================

// Import the AST/ASTNode types and functions
<< import "miller/dsl" >>

// ================================================================
// TOP-LEVEL PRODUCTION RULE FOR THE MILLER DSL

Root :
  : empty // mlr put ' ' is OK: this is zero statements
    << dsl.NewASTNodeEmpty(dsl.NodeTypeEmptyStatement) >>
  | StatementBlock
    <<dsl.NewAST($0) >>
;

// xxx orphaned comment:
// Semicolons are separators, not terminators, in the Miller DSL --
// most importantly people can say '$x = 3' without '$x = 3;'.
// However, we do allow trailing semicolons.

StatementBlock

  : BracelessStatement
    << dsl.NewASTNodeUnary(nil, $0, dsl.NodeTypeStatementBlock) >>

  | BracelessStatement ";" StatementBlock
    <<dsl.PrependChild($2, $0) >>

  | BracefulStatement
    << dsl.NewASTNodeUnary(nil, $0, dsl.NodeTypeStatementBlock) >>

  // They don't need the semicolon in 'begin {@a = 1}; $x = 2'
  | BracefulStatement StatementBlock
    <<dsl.PrependChild($1, $0) >>

;

// ================================================================
// BEGIN/END BLOCKS

BracefulStatement
  : BeginBlock
  | EndBlock
;

BeginBlock
  : md_token_begin "{" "}"
    << dsl.NewASTNodeZary(nil, dsl.NodeTypeBeginBlock) >>
  | md_token_begin "{" StatementBlock "}"
    << dsl.NewASTNodeUnary(nil, $2, dsl.NodeTypeBeginBlock) >>
;
EndBlock
  : md_token_end "{" "}"
    << dsl.NewASTNodeZary(nil, dsl.NodeTypeEndBlock) >>
  | md_token_end "{" StatementBlock "}"
    << dsl.NewASTNodeUnary(nil, $2, dsl.NodeTypeEndBlock) >>
;

// ================================================================
// ASSIGMENT STATEMENTS

BracelessStatement
  : Assignment
;

Assignment :
  : Lvalue "=" Rvalue
    << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeAssignment) >>
;

// A BaseValue is anything on the left-hand side of an assignment, excluding
// the indexing -- e.g. @a is a BaseValue and an Lvalue; @a[1][2][3] is an
// Lvalue which is an indexed Lvalue.
Lvalue
  : BaseLvalue
  | IndexedLvalue
  // | SlicedLvalue -- like $text[3:7] = "interpolated"
  // | ENVValue -- only ENV["foo"] but not arbitrarily indexable like ENV["foo"]["bar"]
;

BaseLvalue
  : FieldValue
  | OosvarValue
  // positional field name $[[3]]
  // positional field value $[[[3]]]
  | FullSrec
  | FullOosvar
  // local variable abcd
;

IndexedLvalue
  : Lvalue "[" Rvalue "]" 
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("[]", $1),
      $0,
      $2,
      dsl.NodeTypeIndexedLvalue,
    )>>
;

// ----------------------------------------------------------------
FieldValue
  : DirectFieldValue
  | IndirectFieldValue
  | BracedFieldValue
  //| PositionalFieldName
  //| PositionalFieldValue
  // ...
;

// Note: the field name is "$name" not "name" since md_token_field_name
// includes the '$'.  If we omit the '$' there and include it in the parser
// section here as "$", then we get an LR-1 conflict. So this must be dealt
// with at the AST level. Hence the NewASTNodeStripDollarOrAtSign.
DirectFieldValue
  : md_token_field_name
    << dsl.NewASTNodeStripDollarOrAtSign($0, dsl.NodeTypeDirectFieldValue) >>
;

IndirectFieldValue
  : "$[" Rvalue "]"
    << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeIndirectFieldValue) >>
;

// * Direct is '$name'
// * Indirect is '$["name"]'
// * Braced is '${name}' -- note no double-quotes. This is for when the field
//   name has spaces or somesuch in it.
BracedFieldValue
  : md_token_braced_field_name
    << dsl.NewASTNodeStripDollarOrAtSignAndCurlyBraces($0, dsl.NodeTypeDirectFieldValue) >>
;

FullSrec
  : md_token_full_srec
  << dsl.NewASTNode($0, dsl.NodeTypeFullSrec) >>
;

// ----------------------------------------------------------------
OosvarValue
  : DirectOosvarValue
  | IndirectOosvarValue
  | BracedOosvarValue
;

// Note: the oosvar name is "@name" not "name" since md_token_oosvar_name
// includes the '@'.  If we omit the '@' there and include it in the parser
// section here as "$", then we get an LR-1 conflict. So this must be dealt
// with at the AST level. Hence the NewASTNodeStripDollarOrAtSign.
DirectOosvarValue
  : md_token_oosvar_name
    << dsl.NewASTNodeStripDollarOrAtSign($0, dsl.NodeTypeDirectOosvarValue) >>
;

IndirectOosvarValue
  : "@[" Rvalue "]"
    << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeIndirectOosvarValue) >>
;

// * Direct is '@name'
// * Indirect is '@["name"]'
// * Braced is '@{name}' -- note no double-quotes. This is for when the oosvar
//   name has spaces or somesuch in it.
BracedOosvarValue
  : md_token_braced_oosvar_name
    << dsl.NewASTNodeStripDollarOrAtSignAndCurlyBraces($0, dsl.NodeTypeDirectOosvarValue) >>
;

FullOosvar
  : md_token_full_oosvar
  << dsl.NewASTNode($0, dsl.NodeTypeFullOosvar) >>
;

// ----------------------------------------------------------------
// REWRITE COMPOUND ASSIGNMENT OPERATORS
//
// Transform '$x += 1' which would have AST
//
//   +=
//       $x
//       1
//
// into '$x = $x + 1' with AST
//
//   =
//       $x
//       +
//           $x
//           1
//
// right here in the parser.
//
// Use the NewASTToken to clone the "||=" into "||" and so on.

Assignment

  : Lvalue "||=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("||", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "^^=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^^", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "&&=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("&&", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "|=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("|", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "^=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "^=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "<<=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("<<", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue ">>=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken(">"+">", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "+=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("+", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue ".=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken(".", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "-=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("-", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "*=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("*", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "/=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("/", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "//=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("//", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "%=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("%", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>

  | Lvalue "**=" Rvalue
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", $1),
      $0,
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("**", $1), $0, $2, dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>
;

// ================================================================
// BEGIN RVALUE OPERATOR-PRECEDENCE CHAIN
// ================================================================

Rvalue : PrecedenceChainStart ;

PrecedenceChainStart : TernaryTerm ;

TernaryTerm
  : LogicalOrTerm "?" TernaryTerm ":" TernaryTerm
    << dsl.NewASTNodeTernary(dsl.NewASTToken("?:", $1), $0, $2, $4, dsl.NodeTypeOperator) >>
  | LogicalOrTerm
;

LogicalOrTerm
  : LogicalOrTerm "||" LogicalXORTerm
    << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | LogicalXORTerm
;

LogicalXORTerm
  : LogicalXORTerm "^^" LogicalAndTerm
    << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | LogicalAndTerm
;

LogicalAndTerm
  : LogicalAndTerm "&&" EqneTerm
    << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | EqneTerm
;

EqneTerm
  : EqneTerm "=~"  CmpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | EqneTerm "!=~" CmpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | EqneTerm "=="  CmpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | EqneTerm "!="  CmpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | CmpTerm
;

CmpTerm
  : CmpTerm ">"  BitwiseORTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | CmpTerm ">=" BitwiseORTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | CmpTerm "<"  BitwiseORTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | CmpTerm "<=" BitwiseORTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | BitwiseORTerm
;

BitwiseORTerm
  : BitwiseORTerm "|" BitwiseXORTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | BitwiseXORTerm
;

BitwiseXORTerm
  : BitwiseXORTerm "^" BitwiseANDTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | BitwiseANDTerm
;

BitwiseANDTerm
  : BitwiseANDTerm "&" BitwiseShiftTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | BitwiseShiftTerm
;

BitwiseShiftTerm
  : BitwiseShiftTerm "<<" AddsubdotTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | BitwiseShiftTerm ">>" AddsubdotTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | AddsubdotTerm
;

AddsubdotTerm
  : AddsubdotTerm "+"  MuldivTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | AddsubdotTerm "-"  MuldivTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | AddsubdotTerm ".+" MuldivTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | AddsubdotTerm ".-" MuldivTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | AddsubdotTerm "."  MuldivTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm
;

MuldivTerm
  : MuldivTerm "*"   UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm "/"   UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm "//"  UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm "%"   UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm ".*"  UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm "./"  UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | MuldivTerm ".//" UnaryOpTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | UnaryOpTerm
;

UnaryOpTerm
  : "+"  PowTerm << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeOperator) >>
  | "-"  PowTerm << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeOperator) >>
  | ".+" PowTerm << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeOperator) >>
  | ".-" PowTerm << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeOperator) >>
  | "!"  PowTerm << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeOperator) >>
  | "~"  PowTerm << dsl.NewASTNodeUnary($0, $1, dsl.NodeTypeOperator) >>
  | PowTerm
;

PowTerm
  : PrecedenceChainEnd "**" PowTerm << dsl.NewASTNodeBinary($1, $0, $2, dsl.NodeTypeOperator) >>
  | PrecedenceChainEnd
;

// Please Excuse My Dear Aunt Sally! :) We've gotten to the 'P' so we're done
// with the operator-precedence chain. :)

PrecedenceChainEnd
  : "(" Rvalue ")"
  << dsl.Nestable($1) >>
;

PrecedenceChainEnd : MlrvalOrFunction ;

// ================================================================
// END RVALUE OPERATOR-PRECEDENCE CHAIN
// ================================================================

// ================================================================
// Leaf-ish nodes, i.e. expressions without operators ... in things like '$y =
// 3 * $x + 4', the Rvalue operator-parse separates out the '3', the '$x', and
// the '4' ... but they could have as well been '$y = 3 * $x[7] + f($a,$b,$c)'.
//
// Grammar rules here have to do with nodes like '3', or '$x[7]', or
// 'f($a,$b,$c)'.
//
// At the moment I call these MlrvalOrFunction.

// ----------------------------------------------------------------
MlrvalOrFunction
  : FieldValue
  | FullSrec
  | OosvarValue
  | FullOosvar
  // local variable abcd
  // ENV -- only ENV["foo"] but not arbitrarily indexable
;

// ----------------------------------------------------------------
// STRING/INT/FLOAT/BOOL LITERALS

// As with '$' on md_token_field_name, so too for md_token_string_literal we
// get LR-1 conflicts if we attempt to put the double quotes here.  Hence the
// quote-stripper AST method. Also, since string literals can have
// backslash-escaped double-quotes like "...\"...\"...", we also unbackslash
// in the same method.
MlrvalOrFunction
  : md_token_string_literal  << dsl.NewASTNodeStripDoubleQuotePair(
    $0,
    dsl.NodeTypeStringLiteral,
  ) >>
  | md_token_int_literal     << dsl.NewASTNode($0, dsl.NodeTypeIntLiteral) >>
  | md_token_float_literal   << dsl.NewASTNode($0, dsl.NodeTypeFloatLiteral) >>
  | md_token_boolean_literal << dsl.NewASTNode($0, dsl.NodeTypeBoolLiteral) >>
  | md_token_panic           << dsl.NewASTNode($0, dsl.NodeTypePanic) >>
;

//MlrvalOrFunction(A) ::= md_regexi(B). {
//	A = B;
//}

//md_regexi(A) ::= md_token_regexi(B). {
//	char* input = B->text;
//	char* stripped = &input[1];
//	int len = strlen(input);
//	stripped[len-3] = 0;
//	A = mlr_dsl_ast_node_alloc(mlr_alloc_unbackslash(stripped), B->type);
//}

// ================================================================
// Array literals in Miller are JSON-ish.

MlrvalOrFunction : ArrayLiteral ;

// ----------------------------------------------------------------
ArrayLiteral

  : "[" "]"
    << dsl.NewASTNodeZary(
      dsl.NewASTToken("[]", $0),
      dsl.NodeTypeArrayLiteral,
    ) >>

  | "[" ArrayLiteralElements "]"
    // As parsed there's an intermediate node between ArrayLiteral
    // and the children. Now we can remove it.
    //
    // Before:
    // * ArrayLiteral "[]"
    //     * ArrayLiteral
    //         * StringLiteral "a"
    //         * StringLiteral "b"
    //
    // After:
    // * ArrayLiteral "[]"
    //     * StringLiteral "a"
    //     * StringLiteral "b"
    << dsl.AdoptChildren(
      dsl.NewASTNodeNestable(
        dsl.NewASTToken("[]", $0),
        dsl.NodeTypeArrayLiteral,
      ),
      $1,
    ) >>
;

// ----------------------------------------------------------------
ArrayLiteralElements

  : ArrayLiteralElement
    << dsl.NewASTNodeUnary(
      nil,
      $0,
      dsl.NodeTypeArrayLiteral,
    ) >>

  // Allow trailing final comma, especially for multiline map literals
  | ArrayLiteralElement ","
    << dsl.NewASTNodeUnary(
      nil,
      $0,
      dsl.NodeTypeArrayLiteral,
    ) >>

  // Allow trailing final comma, especially for multiline map literals
  | ArrayLiteralElement "," ArrayLiteralElements
    << dsl.PrependChild(
      $2,
      $0,
    ) >>

;

// ----------------------------------------------------------------
ArrayLiteralElement
  : Rvalue
;

// ================================================================
// Map literals in Miller are JSON-ish.

MlrvalOrFunction : MapLiteral ;

// ----------------------------------------------------------------
MapLiteral

  : "{" "}"
    << dsl.NewASTNodeZary(
      dsl.NewASTToken("{}", $0),
      dsl.NodeTypeMapLiteral,
    ) >>

  | "{" MapLiteralKeyValuePairs "}"
    // As parsed there's an intermediate node between MapLiteral
    // and the children. Now we can remove it.
    //
    // Before:
    // * MapLiteral "{}"
    //     * MapLiteral
    //         * MapLiteralKeyValuePair ":"
    //             * StringLiteral "a"
    //             * StringLiteral "1"
    //         * MapLiteralKeyValuePair ":"
    //             * StringLiteral "b"
    //             * IntLiteral "2"
    //
    // After:
    // * MapLiteral "{}"
    //     * MapLiteralKeyValuePair ":"
    //         * StringLiteral "a"
    //         * StringLiteral "1"
    //     * MapLiteralKeyValuePair ":"
    //         * StringLiteral "b"
    //         * IntLiteral "2"
    << dsl.AdoptChildren(
      dsl.NewASTNodeNestable(
        dsl.NewASTToken("{}", $0),
        dsl.NodeTypeMapLiteral,
      ),
      $1,
    ) >>
;

// ----------------------------------------------------------------
MapLiteralKeyValuePairs

  : MapLiteralKeyValuePair
    << dsl.NewASTNodeUnary(
      nil,
      $0,
      dsl.NodeTypeMapLiteral,
    ) >>

  // Allow trailing final comma, especially for multiline map literals
  | MapLiteralKeyValuePair ","
    << dsl.NewASTNodeUnary(
      nil,
      $0,
      dsl.NodeTypeMapLiteral,
    ) >>

  // Allow trailing final comma, especially for multiline map literals
  | MapLiteralKeyValuePair "," MapLiteralKeyValuePairs
    << dsl.PrependChild(
      $2,
      $0,
    ) >>

;

// ----------------------------------------------------------------
MapLiteralKeyValuePair
  : Rvalue ":" Rvalue
    << dsl.NewASTNodeBinary(
      $1,
      $0,
      $2,
      dsl.NodeTypeMapLiteralKeyValuePair,
    ) >>
;

// ================================================================
MlrvalOrFunction : ContextVariable ;

ContextVariable
  : md_token_IPS << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_IFS << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_IRS << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>

  | md_token_OPS << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_OFS << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_ORS << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>

  | md_token_NF  << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_NR  << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_FNR << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>

  | md_token_FILENAME << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
  | md_token_FILENUM  << dsl.NewASTNode($0, dsl.NodeTypeContextVariable) >>
;

// ----------------------------------------------------------------
//MlrvalOrFunction(A) ::= EnvIndex(B). {
//	A = B;
//}

//EnvIndex(A) ::= md_token_env(B) "[" Rvalue(C) "]". {
//	A = mlr_dsl_ast_node_alloc_binary("env", MD_AST_NODE_TYPE_ENV, B, C);
//}

// ================================================================
// INDEXED ACCESS
//
// For Array or Map -- which one, to be determined at runtime.

// ----------------------------------------------------------------
MlrvalOrFunction : ArrayOrMapIndexAccess ;

ArrayOrMapIndexAccess
  : MlrvalOrFunction "[" Rvalue "]" 
    << dsl.NewASTNodeBinary(
      dsl.NewASTToken("[]", $1),
      $0,
      $2,
      dsl.NodeTypeArrayOrMapIndexAccess,
    )>>
;

MlrvalOrFunction : ArraySliceAccess ;

ArraySliceAccess

  : MlrvalOrFunction "[" Rvalue ":" Rvalue "]" 
    << dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", $1),
      $0,
      $2,
      $4,
      dsl.NodeTypeArraySliceAccess,
    )>>

  | MlrvalOrFunction "[" ":" Rvalue "]" 
    << dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", $1),
      $0,
      dsl.NewASTNodeNestable(
        $2,
        dsl.NodeTypeArraySliceEmptyLowerIndex,
      ),
      $3,
      dsl.NodeTypeArraySliceAccess,
    )>>

  | MlrvalOrFunction "[" Rvalue ":" "]" 
    << dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", $1),
      $0,
      $2,
      dsl.NewASTNodeNestable(
        $3,
        dsl.NodeTypeArraySliceEmptyUpperIndex,
      ),
      dsl.NodeTypeArraySliceAccess,
    )>>

  | MlrvalOrFunction "[" ":" "]" 
    << dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", $1),
      $0,
      dsl.NewASTNodeNestable(
        $2,
        dsl.NodeTypeArraySliceEmptyLowerIndex,
      ),
      dsl.NewASTNodeNestable(
        $2,
        dsl.NodeTypeArraySliceEmptyUpperIndex,
      ),
      dsl.NodeTypeArraySliceAccess,
    )>>

;

// ================================================================
// FUNCTION/SUBROUTINE CALLS

//MlrvalOrFunction(A) ::= FcnOrSubrCall(B). {
//	A = B;
//}

//// Given "f(a,b,c)": since this is a bottom-up parser, we get first the "a",
//// then "a,b", then "a,b,c", then finally "f(a,b,c)". So:
//// * On the "a" we make a function sub-AST called "anon(a)".
//// * On the "b" we append the next argument to get "anon(a,b)".
//// * On the "c" we append the next argument to get "anon(a,b,c)".
//// * On the "f" we change the function name to get "f(a,b,c)".

//FcnOrSubrCall(A) ::= md_token_non_sigil_name(O) "(" FcnArgList(B) ")". {
//	A = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A->type = MD_AST_NODE_TYPE_FUNCTION_CALLSITE;
//}
//// For most functions it suffices to use the md_token_non_sigil_name pattern. But
//// int and float are keywords in the lexer so we need to spell those out explicitly.
//// (They're type-decl keywords but they're also the names of type-conversion functions.)
//FcnOrSubrCall(A) ::= md_token_int(O) "(" FcnArgList(B) ")". {
//	A = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A->type = MD_AST_NODE_TYPE_FUNCTION_CALLSITE;
//}
//FcnOrSubrCall(A) ::= md_token_float(O) "(" FcnArgList(B) ")". {
//	A = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A->type = MD_AST_NODE_TYPE_FUNCTION_CALLSITE;
//}

//FcnArgList(A) ::= . {
//	A = mlr_dsl_ast_node_alloc_zary("anon", MD_AST_NODE_TYPE_NON_SIGIL_NAME);
//}
//FcnArgList(A) ::= FcnNonEmptyArgList(B). {
//	A = B;
//}

//FcnNonEmptyArgList(A) ::= md_fcn_arg(B). {
//	A = mlr_dsl_ast_node_alloc_unary("anon", MD_AST_NODE_TYPE_NON_SIGIL_NAME, B);
//}
//FcnNonEmptyArgList(A) ::= md_fcn_arg(B) ",". {
//	A = mlr_dsl_ast_node_alloc_unary("anon", MD_AST_NODE_TYPE_NON_SIGIL_NAME, B);
//}
//FcnNonEmptyArgList(A) ::= md_fcn_arg(B) "," FcnNonEmptyArgList(C). {
//	A = mlr_dsl_ast_node_prepend_arg(C, B);
//}

//md_fcn_arg(A) ::= Rvalue(B). {
//	A = B;
//}
//md_fcn_arg(A) ::= md_token_full_srec(B). {
//	A = B;
//}
//md_fcn_arg(A) ::= md_token_full_oosvar(B). {
//	A = B;
//}
//md_fcn_arg(A) ::= MapLiteral(B). {
//	A = B;
//}

// ================================================================
// ================================================================
// ================================================================
// TO BE PORTED
// ================================================================
// ================================================================
// ================================================================

// ----------------------------------------------------------------
//// Local-variable definitions at the current scope
// xxx make TypedLocalDefinition with subcases for type-literals
//Statement(A) ::= UntypedLocalDefinition(B).    { A = B; }
//Statement(A) ::= TypedLocalDefinition(B).    { A = B; }
//TypedLocalDefinition : {type} ...

// ----------------------------------------------------------------
//// For user-defined functions
//Statement(A) ::= md_token_return Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("return_value", MD_AST_NODE_TYPE_RETURN_VALUE, B);
//}
//Statement(A) ::= md_token_return MapLiteral(B). {
//	A = mlr_dsl_ast_node_alloc_unary("return_value", MD_AST_NODE_TYPE_RETURN_VALUE, B);
//}
//Statement(A) ::= md_token_return md_token_full_srec(B). {
//	A = mlr_dsl_ast_node_alloc_unary("return_value", MD_AST_NODE_TYPE_RETURN_VALUE, B);
//}
//Statement(A) ::= md_token_return md_token_full_oosvar(B). {
//	A = mlr_dsl_ast_node_alloc_unary("return_value", MD_AST_NODE_TYPE_RETURN_VALUE, B);
//}
//// For user-defined subroutines
//Statement(A) ::= md_token_return. {
//	A = mlr_dsl_ast_node_alloc_zary("return_void", MD_AST_NODE_TYPE_RETURN_VOID);
//}

//// Begin/end
//Statement(A) ::= FuncBlock(B).  { A = B; }
//Statement(A) ::= SubrBlock(B).  { A = B; }
//Statement(A) ::= BeginBlock(B). { A = B; }
//Statement(A) ::= EndBlock(B).   { A = B; }

//// Nested control structures:
//Statement(A) ::= CondBlock(B).                { A = B; }
//Statement(A) ::= WhileBlock(B).               { A = B; }
//Statement(A) ::= ForLoopFullSrec(B).          { A = B; }
//Statement(A) ::= ForLoopFullSrecKeyOnly(B).   { A = B; }
//Statement(A) ::= ForLoopFullOosvar(B).        { A = B; }
//Statement(A) ::= ForLoopFullOosvarKeyOnly(B). { A = B; }
//Statement(A) ::= ForLoopOosvar(B).            { A = B; }
//Statement(A) ::= ForLoopOosvarKeyOnly(B).     { A = B; }
//Statement(A) ::= ForLoopLocalMap(B).          { A = B; }
//Statement(A) ::= ForLoopLocalMapKeyOnly(B).   { A = B; }
//Statement(A) ::= ForLoopMapLiteral(B).        { A = B; }
//Statement(A) ::= ForLoopMapLiteralKeyOnly(B). { A = B; }
//Statement(A) ::= ForLoopFuncRetval(B).        { A = B; }
//Statement(A) ::= ForLoopFuncRetvalKeyOnly(B). { A = B; }
//Statement(A) ::= TripleFor(B).                { A = B; }
//Statement(A) ::= IfChain(B).                  { A = B; }

//Statement(A) ::= md_token_subr_call FcnOrSubrCall(B). {
//	A = mlr_dsl_ast_node_alloc_unary("subr_call", MD_AST_NODE_TYPE_SUBR_CALLSITE, B);
//}

// Not valid in begin/end since they refer to srecs:
// xxx enforce that in the AST/CST, not here in the grammar -- much simpler.

//// Valid in begin/end since they don't refer to srecs (although the RHSs might):
//Statement(A) ::= DoWhileBlock(B).         { A = B; }
//Statement(A) ::= BareBoolean(B).          { A = B; }
//Statement(A) ::= OosvarAssignment(B).     { A = B; }
//Statement(A) ::= FullOosvarAssignment(B). { A = B; }
//Statement(A) ::= md_filter(B).            { A = B; }
//Statement(A) ::= md_unset(B).             { A = B; }

//Statement(A) ::= TeeWrite(B).          { A = B; }
//Statement(A) ::= TeeAppend(B).         { A = B; }
//Statement(A) ::= TeePipe(B).           { A = B; }
//Statement(A) ::= md_emitf(B).          { A = B; }
//Statement(A) ::= EmitfWrite(B).        { A = B; }
//Statement(A) ::= EmitfAppend(B).       { A = B; }
//Statement(A) ::= EmitfPipe(B).         { A = B; }
//Statement(A) ::= md_emitp(B).          { A = B; }
//Statement(A) ::= EmitpWrite(B).        { A = B; }
//Statement(A) ::= EmitpAppend(B).       { A = B; }
//Statement(A) ::= EmitpPipe(B).         { A = B; }
//Statement(A) ::= md_emit(B).           { A = B; }
//Statement(A) ::= EmitWrite(B).         { A = B; }
//Statement(A) ::= EmitAppend(B).        { A = B; }
//Statement(A) ::= EmitPipe(B).          { A = B; }
//Statement(A) ::= EmitpLashed(B).       { A = B; }
//Statement(A) ::= EmitpLashedWrite(B).  { A = B; }
//Statement(A) ::= EmitpLashedAppend(B). { A = B; }
//Statement(A) ::= EmitpLashedPipe(B).   { A = B; }
//Statement(A) ::= EmitLashed(B).        { A = B; }
//Statement(A) ::= EmitLashedWrite(B).   { A = B; }
//Statement(A) ::= EmitLashedAppend(B).  { A = B; }
//Statement(A) ::= EmitLashedPipe(B).    { A = B; }

//Statement(A) ::= md_dump(B).      { A = B; }
//Statement(A) ::= DumpWrite(B).    { A = B; }
//Statement(A) ::= DumpAppend(B).   { A = B; }
//Statement(A) ::= DumpPipe(B).     { A = B; }
//Statement(A) ::= md_edump(B).     { A = B; }
//Statement(A) ::= md_print(B).     { A = B; }
//Statement(A) ::= md_eprint(B).    { A = B; }
//Statement(A) ::= PrintWrite(B).   { A = B; }
//Statement(A) ::= PrintAppend(B).  { A = B; }
//Statement(A) ::= PrintPipe(B).    { A = B; }
//Statement(A) ::= md_printn(B).    { A = B; }
//Statement(A) ::= md_eprintn(B).   { A = B; }
//Statement(A) ::= PrintnWrite(B).  { A = B; }
//Statement(A) ::= PrintnAppend(B). { A = B; }
//Statement(A) ::= PrintnPipe(B).   { A = B; }

// Valid only within for/while, but we accept them here syntactically and
// reject them in the AST-to-CST conversion, where we can produce much more
// informative error messages:
//Statement(A) ::= md_token_break(O). {
//	A = mlr_dsl_ast_node_alloc(O->text, MD_AST_NODE_TYPE_BREAK);
//}
//Statement(A) ::= md_token_continue(O). {
//	A = mlr_dsl_ast_node_alloc(O->text, MD_AST_NODE_TYPE_CONTINUE);
//}

// ================================================================
// Given "f(a,b,c)": since this is a bottom-up parser, we get first the "a",
// then "a,b", then "a,b,c", then finally "f(a,b,c)". So:
// * On the "a" we make a function sub-AST called "anon(a)".
// * On the "b" we append the next argument to get "anon(a,b)".
// * On the "c" we append the next argument to get "anon(a,b,c)".
// * On the "f" we change the function name to get "f(a,b,c)".

//FuncBlock(C) ::= md_token_func_def
//	md_token_non_sigil_name(F) "(" FuncOrSubrParameterList(A) ")"
//	"{" StatementBlock(B) "}".
//{
//	A = mlr_dsl_ast_node_set_function_name(A, F->text);
//	mlr_dsl_ast_node_replace_text(B, "func_block");
//	C = mlr_dsl_ast_node_alloc_binary(F->text, MD_AST_NODE_TYPE_FUNC_DEF, A, B);
//}

//FuncBlock(C) ::= md_token_func_def
//	md_token_non_sigil_name(F) "(" FuncOrSubrParameterList(A) ")"
//	md_token_colon Typedecl(M)
//	"{" StatementBlock(B) "}".
//{
//	A = mlr_dsl_ast_node_set_function_name(A, F->text);
//	mlr_dsl_ast_node_replace_text(B, "func_block");
//	C = mlr_dsl_ast_node_alloc_ternary(F->text, MD_AST_NODE_TYPE_FUNC_DEF, A, B, M);
//}

//SubrBlock(C) ::= md_token_subr_def
//	md_token_non_sigil_name(F) "(" FuncOrSubrParameterList(A) ")"
//	"{" StatementBlock(B) "}".
//{
//	A = mlr_dsl_ast_node_set_function_name(A, F->text);
//	mlr_dsl_ast_node_replace_text(B, "subr_block");
//	C = mlr_dsl_ast_node_alloc_binary(F->text, MD_AST_NODE_TYPE_SUBR_DEF, A, B);
//}

//FuncOrSubrParameterList(A) ::= . {
//	A = mlr_dsl_ast_node_alloc_zary("anon", MD_AST_NODE_TYPE_NON_SIGIL_NAME);
//}
//FuncOrSubrParameterList(A) ::= FuncOrSubrNonEmptyParameterList(B). {
//	A = B;
//}
//FuncOrSubrNonEmptyParameterList(A) ::= FuncOrSubrParameter(B). {
//	A = mlr_dsl_ast_node_alloc_unary("anon", MD_AST_NODE_TYPE_NON_SIGIL_NAME, B);
//}
//FuncOrSubrNonEmptyParameterList(A) ::= FuncOrSubrParameter(B) ",". {
//	A = mlr_dsl_ast_node_alloc_unary("anon", MD_AST_NODE_TYPE_NON_SIGIL_NAME, B);
//}
//FuncOrSubrNonEmptyParameterList(A) ::= FuncOrSubrParameter(B) ","
//	FuncOrSubrNonEmptyParameterList(C).
//{
//	A = mlr_dsl_ast_node_prepend_arg(C, B);
//}

//FuncOrSubrParameter(A) ::= md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_UNTYPED_PARAMETER_DEFINITION);
//}
//FuncOrSubrParameter(A) ::= Typedecl(T) md_token_non_sigil_name(N). {
//	A = mlr_dsl_ast_node_alloc(N->text, T->type);
//}

//Typedecl(A) ::= md_token_var(B).     { A = B; A->type = MD_AST_NODE_TYPE_UNTYPED_PARAMETER_DEFINITION; }
//Typedecl(A) ::= md_token_numeric(B). { A = B; A->type = MD_AST_NODE_TYPE_NUMERIC_PARAMETER_DEFINITION; }
//Typedecl(A) ::= md_token_int(B).     { A = B; A->type = MD_AST_NODE_TYPE_INT_PARAMETER_DEFINITION;     }
//Typedecl(A) ::= md_token_float(B).   { A = B; A->type = MD_AST_NODE_TYPE_FLOAT_PARAMETER_DEFINITION;   }
//Typedecl(A) ::= md_token_string_literal(B).  { A = B; A->type = MD_AST_NODE_TYPE_STRING_PARAMETER_DEFINITION;  }
//Typedecl(A) ::= md_token_boolean(B). { A = B; A->type = MD_AST_NODE_TYPE_BOOLEAN_PARAMETER_DEFINITION; }
//Typedecl(A) ::= md_token_map(B).     { A = B; A->type = MD_AST_NODE_TYPE_MAP_PARAMETER_DEFINITION;     }

//// ================================================================
//BeginBlock(A) ::= md_token_begin(O) "{" StatementBlock(B) "}". {
//	mlr_dsl_ast_node_replace_text(B, "begin_block");
//	A = mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_BEGIN, B);
//}
//EndBlock(A)   ::= md_token_end(O)   "{" StatementBlock(B) "}". {
//	mlr_dsl_ast_node_replace_text(B, "end_block");
//	A = mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_END, B);
//}

//// ----------------------------------------------------------------
//CondBlock(A) ::= Rvalue(B) "{" StatementBlock(C) "}". {
//	mlr_dsl_ast_node_replace_text(C, "cond_block");
//	A = mlr_dsl_ast_node_alloc_binary("cond", MD_AST_NODE_TYPE_CONDITIONAL_BLOCK, B, C);
//}

//// ----------------------------------------------------------------
//WhileBlock(A) ::=
//	md_token_while(O)
//		"(" Rvalue(B) ")"
//		"{" StatementBlock(C) "}".
//{
//	mlr_dsl_ast_node_replace_text(C, "while_block");
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_WHILE, B, C);
//}

//// ----------------------------------------------------------------
//DoWhileBlock(A) ::=
//	MD_TOKEN_DO(O)
//		"{" StatementBlock(B) "}"
//	md_token_while
//		"(" Rvalue(C) ")".
//{
//	mlr_dsl_ast_node_replace_text(B, "do_while_block");
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DO_WHILE, B, C);
//}

//// ----------------------------------------------------------------
//// for(k, v in $*) { ... }
//ForLoopFullSrec(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) "," ForLoopIndex(V)
//		md_token_in md_token_full_srec
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_full_srec_block");
//	A = mlr_dsl_ast_node_alloc_binary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_SREC,
//		mlr_dsl_ast_node_alloc_binary(
//			"variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			K,
//			V
//		),
//		S
//	);
//}

//// for(k in $*) { ... }
//ForLoopFullSrecKeyOnly(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) md_token_in md_token_full_srec
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_full_srec_block");
//	A = mlr_dsl_ast_node_alloc_binary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_SREC_KEY_ONLY,
//		mlr_dsl_ast_node_alloc_unary(
//			"variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			K
//		),
//		S
//	);
//}

//// for(k, v in @*) { ... }
//ForLoopFullOosvar(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) "," ForLoopIndex(V)
//		md_token_in md_token_full_oosvar
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_full_oosvar_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_OOSVAR,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			mlr_dsl_ast_node_alloc_unary(
//				"key_variables",
//				MD_AST_NODE_TYPE_FOR_VARIABLES,
//				K
//			),
//			V
//		),
//		mlr_dsl_ast_node_alloc_zary("empty_keylist", MD_AST_NODE_TYPE_OOSVAR_KEYLIST),
//		S
//	);
//}

//// for((k1, k2), v in @*) { ... }
//// for((k1, k2, k3), v in @*) { ... }
//ForLoopFullOosvar(A) ::=
//	md_token_for(F) "("
//		"(" ForMapKeylist(L) ")" "," ForLoopIndex(V)
//		md_token_in md_token_full_oosvar
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_full_oosvar_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_OOSVAR,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			L,
//			V
//		),
//		mlr_dsl_ast_node_alloc_zary("empty_keylist", MD_AST_NODE_TYPE_OOSVAR_KEYLIST),
//		S
//	);
//}

//// for(k in @*) { ... }
//ForLoopFullOosvarKeyOnly(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K)
//		md_token_in
//		md_token_full_oosvar
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_full_oosvar_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_OOSVAR_KEY_ONLY,
//		K,
//		mlr_dsl_ast_node_alloc_zary("empty_keylist", MD_AST_NODE_TYPE_OOSVAR_KEYLIST),
//		S
//	);
//}

//// for(k, v in @o[1][2]) { ... }
//ForLoopOosvar(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) "," ForLoopIndex(V)
//		md_token_in OosvarKeylist(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_oosvar_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_OOSVAR,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			mlr_dsl_ast_node_alloc_unary(
//				"key_variables",
//				MD_AST_NODE_TYPE_FOR_VARIABLES,
//				K
//			),
//			V
//		),
//		O,
//		S
//	);
//}

//// for((k1, k2), v in @o[1][2]) { ... }
//// for((k1, k2, k3), v in @o[1][2]) { ... }
//ForLoopOosvar(A) ::=
//	md_token_for(F) "("
//		"(" ForMapKeylist(L) ")" "," ForLoopIndex(V)
//		md_token_in OosvarKeylist(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_oosvar_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_OOSVAR,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			L,
//			V
//		),
//		O,
//		S
//	);
//}

//ForLoopIndex(A) ::= md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_UNTYPED_LOCAL_DEFINITION);
//}
//ForLoopIndex(A) ::= md_token_numeric md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_NUMERIC_LOCAL_DEFINITION);
//}
//ForLoopIndex(A) ::= md_token_int md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_INT_LOCAL_DEFINITION);
//}
//ForLoopIndex(A) ::= md_token_float md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_FLOAT_LOCAL_DEFINITION);
//}
//ForLoopIndex(A) ::= md_token_string_literal md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_STRING_LOCAL_DEFINITION);
//}
//ForLoopIndex(A) ::= md_token_boolean md_token_non_sigil_name(B). {
//	A = mlr_dsl_ast_node_alloc(B->text, MD_AST_NODE_TYPE_BOOLEAN_LOCAL_DEFINITION);
//}

//ForMapKeylist(A) ::= ForLoopIndex(K). {
//	A = mlr_dsl_ast_node_alloc_unary("key_variables", MD_AST_NODE_TYPE_FOR_VARIABLES, K);
//}
//ForMapKeylist(A) ::= ForMapKeylist(L) "," ForLoopIndex(K). {
//	A = mlr_dsl_ast_node_append_arg(L, K);
//}

//// for(k in @o[1][2]) { ... }
//ForLoopOosvarKeyOnly(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K)
//		md_token_in OosvarKeylist(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_oosvar_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_OOSVAR_KEY_ONLY,
//		K,
//		O,
//		S
//	);
//}

//// ----------------------------------------------------------------
//// for(k, v in o[1][2]) { ... }
//ForLoopLocalMap(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) "," ForLoopIndex(V)
//		md_token_in LocalMapKeylist(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_local_map_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_LOCAL_MAP,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			mlr_dsl_ast_node_alloc_unary(
//				"key_variables",
//				MD_AST_NODE_TYPE_FOR_VARIABLES,
//				K
//			),
//			V
//		),
//		O,
//		S
//	);
//}

//// for((k1, k2), v in o[1][2]) { ... }
//// for((k1, k2, k3), v in o[1][2]) { ... }
//ForLoopLocalMap(A) ::=
//	md_token_for(F) "("
//		"(" ForMapKeylist(L) ")" "," ForLoopIndex(V)
//		md_token_in LocalMapKeylist(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_local_map_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_LOCAL_MAP,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			L,
//			V
//		),
//		O,
//		S
//	);
//}

//// for(k in o[1][2]) { ... }
//ForLoopLocalMapKeyOnly(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K)
//		md_token_in LocalMapKeylist(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_local_map_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_LOCAL_MAP_KEY_ONLY,
//		K,
//		O,
//		S
//	);
//}

//// ----------------------------------------------------------------
//// for(k, v in o[1][2]) { ... }
//ForLoopMapLiteral(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) "," ForLoopIndex(V)
//		md_token_in MapLiteral(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_map_literal_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_MAP_LITERAL,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			mlr_dsl_ast_node_alloc_unary(
//				"key_variables",
//				MD_AST_NODE_TYPE_FOR_VARIABLES,
//				K
//			),
//			V
//		),
//		O,
//		S
//	);
//}

//// for((k1, k2), v in o[1][2]) { ... }
//// for((k1, k2, k3), v in o[1][2]) { ... }
//ForLoopMapLiteral(A) ::=
//	md_token_for(F) "("
//		"(" ForMapKeylist(L) ")" "," ForLoopIndex(V)
//		md_token_in MapLiteral(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_map_literal_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_MAP_LITERAL,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			L,
//			V
//		),
//		O,
//		S
//	);
//}

//// for(k in o[1][2]) { ... }
//ForLoopMapLiteralKeyOnly(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K)
//		md_token_in MapLiteral(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_map_literal_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_MAP_LITERAL_KEY_ONLY,
//		K,
//		O,
//		S
//	);
//}

//// ----------------------------------------------------------------
//// for(k, v in o[1][2]) { ... }
//ForLoopFuncRetval(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K) "," ForLoopIndex(V)
//		md_token_in FcnOrSubrCall(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_func_retval_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_FUNC_RETVAL,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			mlr_dsl_ast_node_alloc_unary(
//				"key_variables",
//				MD_AST_NODE_TYPE_FOR_VARIABLES,
//				K
//			),
//			V
//		),
//		O,
//		S
//	);
//}

//// for((k1, k2), v in o[1][2]) { ... }
//// for((k1, k2, k3), v in o[1][2]) { ... }
//ForLoopFuncRetval(A) ::=
//	md_token_for(F) "("
//		"(" ForMapKeylist(L) ")" "," ForLoopIndex(V)
//		md_token_in FcnOrSubrCall(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_func_retval_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_FUNC_RETVAL,
//		mlr_dsl_ast_node_alloc_binary(
//			"key_and_value_variables",
//			MD_AST_NODE_TYPE_FOR_VARIABLES,
//			L,
//			V
//		),
//		O,
//		S
//	);
//}

//// for(k in o[1][2]) { ... }
//ForLoopFuncRetvalKeyOnly(A) ::=
//	md_token_for(F) "("
//		ForLoopIndex(K)
//		md_token_in FcnOrSubrCall(O)
//	")"
//	"{"
//		StatementBlock(S)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(S, "for_loop_func_retval_block");
//	A = mlr_dsl_ast_node_alloc_ternary(
//		F->text,
//		MD_AST_NODE_TYPE_FOR_FUNC_RETVAL_KEY_ONLY,
//		K,
//		O,
//		S
//	);
//}

//// ----------------------------------------------------------------
//TripleFor(A) ::=
//	md_token_for(F) "("
//		TripleForStart(S)
//			md_token_semicolon
//		TripleForContinuation(C)
//			md_token_semicolon
//		TripleForUpdate(U)
//	")"
//	"{"
//		StatementBlock(L)
//	"}".
//{
//	mlr_dsl_ast_node_replace_text(L, "triple_for_block");
//	A = mlr_dsl_ast_node_alloc_quaternary(F->text, MD_AST_NODE_TYPE_TRIPLE_FOR, S, C, U, L);
//}

//TripleForStart(A) ::= Statement(B). {
//	if (B->type == MD_AST_NODE_TYPE_NOP) {
//		mlr_dsl_ast_node_free(B);
//		A = mlr_dsl_ast_node_alloc_zary("triple_for_start_statements", MD_AST_NODE_TYPE_STATEMENT_LIST);
//	} else {
//		A = mlr_dsl_ast_node_alloc_unary("triple_for_start_statements", MD_AST_NODE_TYPE_STATEMENT_LIST, B);
//	}
//}
//TripleForStart(A) ::= TripleForStart(B) "," Statement(C). {
//	if (B->type == MD_AST_NODE_TYPE_NOP) {
//		mlr_dsl_ast_node_free(B);
//		A = C;
//	} else {
//		A = mlr_dsl_ast_node_append_arg(B, C);
//	}
//}

//TripleForContinuation(A) ::= Statement(B). {
//	if (B->type == MD_AST_NODE_TYPE_NOP) {
//		mlr_dsl_ast_node_free(B);
//		A = mlr_dsl_ast_node_alloc_zary("triple_for_continuation_statements", MD_AST_NODE_TYPE_STATEMENT_LIST);
//	} else {
//		A = mlr_dsl_ast_node_alloc_unary("triple_for_continuation_statements", MD_AST_NODE_TYPE_STATEMENT_LIST, B);
//	}
//}
//TripleForContinuation(A) ::= TripleForContinuation(B) "," Statement(C). {
//	if (B->type == MD_AST_NODE_TYPE_NOP) {
//		mlr_dsl_ast_node_free(B);
//		A = C;
//	} else {
//		A = mlr_dsl_ast_node_append_arg(B, C);
//	}
//}

//TripleForUpdate(A) ::= Statement(B). {
//	if (B->type == MD_AST_NODE_TYPE_NOP) {
//		mlr_dsl_ast_node_free(B);
//		A = mlr_dsl_ast_node_alloc_zary("triple_for_update_statements", MD_AST_NODE_TYPE_STATEMENT_LIST);
//	} else {
//		A = mlr_dsl_ast_node_alloc_unary("triple_for_update_statements", MD_AST_NODE_TYPE_STATEMENT_LIST, B);
//	}
//}
//TripleForUpdate(A) ::= TripleForUpdate(B) "," Statement(C). {
//	if (B->type == MD_AST_NODE_TYPE_NOP) {
//		mlr_dsl_ast_node_free(B);
//		A = C;
//	} else {
//		A = mlr_dsl_ast_node_append_arg(B, C);
//	}
//}

//// ----------------------------------------------------------------
//// Cases:
////   if elif*
////   if elif* else

//IfChain(A) ::= IfElifStar(B) . {
//	A = B;
//}
//IfChain(A) ::= IfElifStar(B) ElseBlock(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}
//IfElifStar(A) ::= IfBlock(B). {
//	A = mlr_dsl_ast_node_alloc_unary("if_head", MD_AST_NODE_TYPE_IF_HEAD, B);
//}
//IfElifStar(A) ::= IfElifStar(B) ElifBlock(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//IfBlock(A) ::=
//	md_token_if(O)
//		"(" Rvalue(B) ")"
//		"{" StatementBlock(C) "}".
//{
//	mlr_dsl_ast_node_replace_text(C, "if_block");
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_IF_ITEM, B, C);
//}

//ElifBlock(A) ::=
//	md_token_elif(O)
//		"(" Rvalue(B) ")"
//		"{" StatementBlock(C) "}".
//{
//	mlr_dsl_ast_node_replace_text(C, "elif_block");
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_IF_ITEM, B, C);
//}

//ElseBlock(A) ::=
//	md_token_else(O)
//		"{" StatementBlock(C) "}".
//{
//	mlr_dsl_ast_node_replace_text(C, "else_block");
//	A = mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_IF_ITEM, C);
//}

//// ----------------------------------------------------------------
//BareBoolean(A) ::= Rvalue(B). {
//	A = B;
//}

//// ----------------------------------------------------------------
//md_filter(A) ::= md_token_filter(O) Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_FILTER, B);
//}

//// ----------------------------------------------------------------
//md_unset(A) ::= md_token_unset(O) md_token_all(B). {
//	A = mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_UNSET, B);
//}
//md_unset(A) ::= md_token_unset(O) md_token_full_oosvar(B). {
//	A = mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_UNSET, B);
//}
//md_unset(A) ::= md_token_unset(O) UnsetArgs(B). {
//	A = mlr_dsl_ast_node_set_function_name(B, O->text);
//}
//// Need to invalidate "emit @a," -- use some non-empty-args expr.
//UnsetArgs(A) ::= . {
//	A = mlr_dsl_ast_node_alloc_zary("temp", MD_AST_NODE_TYPE_UNSET);
//}

//UnsetArgs(A) ::= DirectFieldValue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}
//UnsetArgs(A) ::= IndirectFieldValue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}
//UnsetArgs(A) ::= PositionalSrecValue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}
//UnsetArgs(A) ::= md_token_full_srec(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}
//UnsetArgs(A) ::= OosvarKeylist(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}
//UnsetArgs(A) ::= NonindexedLocalVariable(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}
//UnsetArgs(A) ::= IndexedLocalVariable(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_UNSET, B);
//}

//UnsetArgs(A) ::= UnsetArgs(B) "," DirectFieldValue(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}
//UnsetArgs(A) ::= UnsetArgs(B) "," OosvarKeylist(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//// ----------------------------------------------------------------
//TeeWrite(A) ::= md_token_tee(O) md_token_gt OutputFile(F) "," md_token_full_srec(M). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_TEE,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F),
//		M);
//}

//TeeAppend(A) ::= md_token_tee(O) md_token_bitwise_rsh OutputFile(F) "," md_token_full_srec(M). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_TEE,
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F),
//		M);
//}

//TeePipe(A) ::= md_token_tee(O) md_token_bitwise_or Rvalue(P) "," md_token_full_srec(M). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_TEE,
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P),
//		M);
//}

//// ----------------------------------------------------------------
//// Given "emitf @a,@b,@c": since this is a bottom-up parser, we get first the "@a",
//// then "@a,@b", then "@a,@b,@c", then finally "emit @a,@b,@c". So:
//// * On the "@a" we make a sub-AST called "temp @a" (although we could call it "emit").
//// * On the "@b" we append the next argument to get "temp @a,@b".
//// * On the "@c" we append the next argument to get "temp @a,@b,@c".
//// * On the "emit" we change the name to get "emit @a,@b,@c".

//md_emitf(A) ::= md_token_emitf(O) EmitfArgs(B). {
//	B = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITF, B,
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}
//// Need to invalidate "emit @a," -- use some non-empty-args expr.
//EmitfArgs(A) ::= . {
//	A = mlr_dsl_ast_node_alloc_zary("temp", MD_AST_NODE_TYPE_EMITF);
//}
//EmitfArgs(A) ::= OosvarKeylist(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_EMITF, B);
//}
//EmitfArgs(A) ::= NonindexedLocalVariable(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_EMITF, B);
//}
//EmitfArgs(A) ::= IndexedLocalVariable(B). {
//	A = mlr_dsl_ast_node_alloc_unary("temp", MD_AST_NODE_TYPE_EMITF, B);
//}
//EmitfArgs(A) ::= EmitfArgs(B) "," OosvarKeylist(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}
//EmitfArgs(A) ::= EmitfArgs(B) "," NonindexedLocalVariable(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}
//EmitfArgs(A) ::= EmitfArgs(B) "," IndexedLocalVariable(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//EmitfWrite(A) ::= md_token_emitf(O) md_token_gt OutputFile(F) "," EmitfArgs(B). {
//	B = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITF, B,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}

//EmitfAppend(A) ::= md_token_emitf(O) md_token_bitwise_rsh OutputFile(F) "," EmitfArgs(B). {
//	B = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITF, B,
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}

//EmitfPipe(A) ::= md_token_emitf(O) md_token_bitwise_or Rvalue(P) "," EmitfArgs(B). {
//	B = mlr_dsl_ast_node_set_function_name(B, O->text);
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITF, B,
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}


//// ----------------------------------------------------------------
//md_emitp(A) ::= md_token_emitp(O) Emittable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP, B),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}

//md_emitp(A) ::= md_token_emitp(O) Emittable(B) "," EmitpNamelist(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP, B, C),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}

//EmitpWrite(A) ::= md_token_emitp(O) md_token_gt OutputFile(F) ","
//	Emittable(B).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP, B),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//		F));
//}
//EmitpWrite(A) ::= md_token_emitp(O) md_token_gt OutputFile(F) ","
//	Emittable(B) "," EmitpNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP, B, C),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//		F));
//}

//EmitpAppend(A) ::= md_token_emitp(O) md_token_bitwise_rsh OutputFile(F) ","
//	Emittable(B).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP, B),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//		F));
//}
//EmitpAppend(A) ::= md_token_emitp(O) md_token_bitwise_rsh OutputFile(F) ","
//	Emittable(B) "," EmitpNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP, B, C),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//		F));
//}

//EmitpPipe(A) ::= md_token_emitp(O) md_token_bitwise_or Rvalue(P) ","
//	Emittable(B).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP, B),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//		P));
//}
//EmitpPipe(A) ::= md_token_emitp(O) md_token_bitwise_or Rvalue(P) ","
//	Emittable(B) "," EmitpNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP, B, C),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//		P));
//}

//// ----------------------------------------------------------------
//EmitpNamelist(A) ::= Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("emitp_namelist", MD_AST_NODE_TYPE_EMITP, B);
//}
//EmitpNamelist(A) ::= EmitpNamelist(B) "," Rvalue(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//// ================================================================
//md_emit(A) ::= md_token_emit(O) Emittable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT, B),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}

//md_emit(A) ::= md_token_emit(O) Emittable(B) "," EmitNamelist(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT, B, C),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}


//EmitWrite(A) ::= md_token_emit(O) md_token_gt OutputFile(F) ","
//	Emittable(B).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT, B),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//		F));
//}
//EmitWrite(A) ::= md_token_emit(O) md_token_gt OutputFile(F) ","
//	Emittable(B) "," EmitNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT, B, C),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//		F));
//}

//EmitAppend(A) ::= md_token_emit(O) md_token_bitwise_rsh OutputFile(F) ","
//	Emittable(B).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT, B),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//		F));
//}
//EmitAppend(A) ::= md_token_emit(O) md_token_bitwise_rsh OutputFile(F) ","
//	Emittable(B) "," EmitNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT, B, C),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//		F));
//}

//EmitPipe(A) ::= md_token_emit(O) md_token_bitwise_or Rvalue(P) ","
//	Emittable(B).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT, B),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//		P));
//}
//EmitPipe(A) ::= md_token_emit(O) md_token_bitwise_or Rvalue(P) ","
//	Emittable(B) "," EmitNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT, B, C),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//		P));
//}

//// ----------------------------------------------------------------
//Emittable(A) ::= md_token_all(B). {
//	A = B;
//}
//Emittable(A) ::= md_token_full_oosvar(B). {
//	A = B;
//}
//Emittable(A) ::= OosvarKeylist(B). {
//	A = B;
//}
//Emittable(A) ::= NonindexedLocalVariable(B). {
//	A = B;
//}
//Emittable(A) ::= IndexedLocalVariable(B). {
//	A = B;
//}
//Emittable(A) ::= md_token_full_srec(B). {
//	A = B;
//}
//Emittable(A) ::= MapLiteral(B). {
//	A = B;
//}
//Emittable(A) ::= FcnOrSubrCall(B). {
//	A = B;
//}

//// ----------------------------------------------------------------
//EmitNamelist(A) ::= Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("emit_namelist", MD_AST_NODE_TYPE_EMIT, B);
//}
//EmitNamelist(A) ::= EmitNamelist(B) "," Rvalue(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//// ----------------------------------------------------------------
//EmitpLashed(A) ::= md_token_emitp(O)
//	"(" EmitpLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}
//EmitpLashed(A) ::= md_token_emitp(O)
//	"(" EmitpLashedKeylists(B) ")"
//	"," EmitpLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}

//EmitpLashedWrite(A) ::= md_token_emitp(O) md_token_gt OutputFile(F) ","
//	"(" EmitpLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}
//EmitpLashedWrite(A) ::= md_token_emitp(O) md_token_gt OutputFile(F) ","
//	"(" EmitpLashedKeylists(B) ")"
//	"," EmitpLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}

//EmitpLashedAppend(A) ::= md_token_emitp(O) md_token_bitwise_rsh OutputFile(F) ","
//	"(" EmitpLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}
//EmitpLashedAppend(A) ::= md_token_emitp(O) md_token_bitwise_rsh OutputFile(F) ","
//	"(" EmitpLashedKeylists(B) ")"
//	"," EmitpLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}

//EmitpLashedPipe(A) ::= md_token_emitp(O) md_token_bitwise_or Rvalue(P) ","
//	"(" EmitpLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}
//EmitpLashedPipe(A) ::= md_token_emitp(O) md_token_bitwise_or Rvalue(P) ","
//	"(" EmitpLashedKeylists(B) ")"
//	"," EmitpLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMITP_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}

////  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//EmitpLashedKeylists(A) ::= Emittable(B). {
//	A = mlr_dsl_ast_node_alloc_unary("lashed_keylists", MD_AST_NODE_TYPE_EMITP_LASHED, B);
//}
//EmitpLashedKeylists(A) ::= EmitpLashedKeylists(B) "," Emittable(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

////  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//EmitpLashedNamelist(A) ::= Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("lashed_namelist", MD_AST_NODE_TYPE_EMITP_LASHED, B);
//}
//EmitpLashedNamelist(A) ::= EmitpLashedNamelist(B) "," Rvalue(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//// ----------------------------------------------------------------
//EmitLashed(A) ::= md_token_emit(O)
//	"(" EmitLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}
//EmitLashed(A) ::= md_token_emit(O)
//	"(" EmitLashedKeylists(B) ")"
//	"," EmitLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_zary("stream", MD_AST_NODE_TYPE_STREAM));
//}

//EmitLashedWrite(A) ::= md_token_emit(O) md_token_gt OutputFile(F) ","
//	"(" EmitLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}
//EmitLashedWrite(A) ::= md_token_emit(O) md_token_gt OutputFile(F) ","
//	"(" EmitLashedKeylists(B) ")"
//	"," EmitLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}

//EmitLashedAppend(A) ::= md_token_emit(O) md_token_bitwise_rsh OutputFile(F) ","
//	"(" EmitLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}
//EmitLashedAppend(A) ::= md_token_emit(O) md_token_bitwise_rsh OutputFile(F) ","
//	"(" EmitLashedKeylists(B) ")"
//	"," EmitLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}

//EmitLashedPipe(A) ::= md_token_emit(O) md_token_bitwise_or Rvalue(P) ","
//	"(" EmitLashedKeylists(B) ")".
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_unary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}
//EmitLashedPipe(A) ::= md_token_emit(O) md_token_bitwise_or Rvalue(P) ","
//	"(" EmitLashedKeylists(B) ")"
//	"," EmitLashedNamelist(C).
//{
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED,
//		mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_EMIT_LASHED, B, C),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}

////  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//EmitLashedKeylists(A) ::= Emittable(B). {
//	A = mlr_dsl_ast_node_alloc_unary("lashed_keylists", MD_AST_NODE_TYPE_EMIT_LASHED, B);
//}
//EmitLashedKeylists(A) ::= EmitLashedKeylists(B) "," Emittable(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

////  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//EmitLashedNamelist(A) ::= Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_unary("lashed_namelist", MD_AST_NODE_TYPE_EMIT_LASHED, B);
//}
//EmitLashedNamelist(A) ::= EmitLashedNamelist(B) "," Rvalue(C). {
//	A = mlr_dsl_ast_node_append_arg(B, C);
//}

//// ----------------------------------------------------------------
//md_dump(A) ::= md_token_dump(O). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDOUT)),
//		mlr_dsl_ast_node_alloc("all", MD_AST_NODE_TYPE_FULL_OOSVAR));
//}
//md_edump(A) ::= md_token_edump(O). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDERR)),
//		mlr_dsl_ast_node_alloc("all", MD_AST_NODE_TYPE_FULL_OOSVAR));
//}
//DumpWrite(A) ::= md_token_dump(O) md_token_gt OutputFile(F). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			F),
//		mlr_dsl_ast_node_alloc("all", MD_AST_NODE_TYPE_FULL_OOSVAR));
//}
//DumpAppend(A) ::= md_token_dump(O) md_token_bitwise_rsh OutputFile(F). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//			F),
//		mlr_dsl_ast_node_alloc("all", MD_AST_NODE_TYPE_FULL_OOSVAR));
//}
//DumpPipe(A) ::= md_token_dump(O) md_token_bitwise_or Rvalue(P). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//			P),
//		mlr_dsl_ast_node_alloc("all", MD_AST_NODE_TYPE_FULL_OOSVAR));
//}

//md_dump(A) ::= md_token_dump(O) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDOUT)),
//		B);
//}
//md_edump(A) ::= md_token_edump(O) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDERR)),
//		B);
//}
//DumpWrite(A) ::= md_token_dump(O) md_token_gt OutputFile(F) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			F),
//		B);
//}
//DumpAppend(A) ::= md_token_dump(O) md_token_bitwise_rsh OutputFile(F) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//			F),
//		B);
//}
//DumpPipe(A) ::= md_token_dump(O) md_token_bitwise_or Dumpable(P) Rvalue(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_DUMP,
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//			P),
//		B);
//}

//// ----------------------------------------------------------------
//Dumpable(A) ::= md_token_all(B). {
//	A = B;
//}
//Dumpable(A) ::= md_token_full_oosvar(B). {
//	A = B;
//}
//Dumpable(A) ::= md_token_full_srec(B). {
//	A = B;
//}
//Dumpable(A) ::= MapLiteral(B). {
//	A = B;
//}
//Dumpable(A) ::= Rvalue(B). {
//	A = B;
//}

//// ----------------------------------------------------------------
//// Print string
//md_print(A) ::= md_token_print(O) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT, B,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDOUT)));
//}
//md_eprint(A) ::= md_token_eprint(O) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT, B,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDERR)));
//}
//PrintWrite(A) ::= md_token_print(O) md_token_gt OutputFile(F) "," Dumpable(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT, C,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			F));
//}
//PrintAppend(A) ::= md_token_print(O) md_token_bitwise_rsh OutputFile(F) "," Dumpable(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT, C,
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//			F));
//}
//PrintPipe(A) ::= md_token_print(O) md_token_bitwise_or Rvalue(P) "," Dumpable(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT, C,
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//			P));
//}

//// Print with no string (newline only)
//md_print(A) ::= md_token_print(O). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDOUT)));
//}
//md_eprint(A) ::= md_token_eprint(O). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDERR)));
//}
//PrintWrite(A) ::= md_token_print(O) md_token_gt OutputFile(F). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}
//PrintAppend(A) ::= md_token_print(O) md_token_bitwise_rsh OutputFile(F). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}
//PrintPipe(A) ::= md_token_print(O) md_token_bitwise_or Rvalue(P). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINT,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}

//// Printn string
//md_printn(A) ::= md_token_printn(O) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN, B,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDOUT)));
//}
//md_eprintn(A) ::= md_token_eprintn(O) Dumpable(B). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN, B,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDERR)));
//}
//PrintnWrite(A) ::= md_token_printn(O) md_token_gt OutputFile(F) "," Dumpable(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN, C,
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			F));
//}
//PrintnAppend(A) ::= md_token_printn(O) md_token_bitwise_rsh OutputFile(F) "," Dumpable(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN, C,
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND,
//			F));
//}
//PrintnPipe(A) ::= md_token_printn(O) md_token_bitwise_or Rvalue(P) "," Dumpable(C). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN, C,
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE,
//			P));
//}

//// Printn with no string: produces no output but will create a zero-length
//// output file, so not quite a no-op.
//md_printn(A) ::= md_token_printn(O). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDOUT)));
//}
//md_eprintn(A) ::= md_token_eprintn(O). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE,
//			mlr_dsl_ast_node_alloc_zary("stdout", MD_AST_NODE_TYPE_STDERR)));
//}
//PrintnWrite(A) ::= md_token_printn(O) md_token_gt OutputFile(F). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">", MD_AST_NODE_TYPE_FILE_WRITE, F));
//}
//PrintnAppend(A) ::= md_token_printn(O) md_token_bitwise_rsh OutputFile(F). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary(">>", MD_AST_NODE_TYPE_FILE_APPEND, F));
//}
//PrintnPipe(A) ::= md_token_printn(O) md_token_bitwise_or Dumpable(P). {
//	A = mlr_dsl_ast_node_alloc_binary(O->text, MD_AST_NODE_TYPE_PRINTN,
//		mlr_dsl_ast_node_alloc("", MD_AST_NODE_TYPE_NUMERIC_LITERAL),
//		mlr_dsl_ast_node_alloc_unary("|", MD_AST_NODE_TYPE_PIPE, P));
//}

//// ----------------------------------------------------------------
//OutputFile(A) ::= Rvalue(F).          { A = F; }
//OutputFile(A) ::= md_token_stdout(F). { A = F; }
//OutputFile(A) ::= md_token_stderr(F). { A = F; }
