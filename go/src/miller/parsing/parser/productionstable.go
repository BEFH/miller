// Code generated by gocc; DO NOT EDIT.

package parser

import "miller/dsl"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Root	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Root : StatementBlock	<< dsl.NewAST(X[0]) >>`,
		Id:         "Root",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewAST(X[0])
		},
	},
	ProdTabEntry{
		String: `StatementBlock : empty	<< dsl.NewASTNodeEmpty(dsl.NodeTypeEmptyStatement) >>`,
		Id:         "StatementBlock",
		NTType:     2,
		Index:      2,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeEmpty(dsl.NodeTypeEmptyStatement)
		},
	},
	ProdTabEntry{
		String: `StatementBlock : Statement	<< dsl.NewASTNodeUnary(nil, X[0], dsl.NodeTypeStatementBlock) >>`,
		Id:         "StatementBlock",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(nil, X[0], dsl.NodeTypeStatementBlock)
		},
	},
	ProdTabEntry{
		String: `StatementBlock : StatementBlock ";"	<< dsl.Nestable(X[0]) >>`,
		Id:         "StatementBlock",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.Nestable(X[0])
		},
	},
	ProdTabEntry{
		String: `StatementBlock : StatementBlock ";" Statement	<< dsl.AppendChild(X[0], X[2]) >>`,
		Id:         "StatementBlock",
		NTType:     2,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.AppendChild(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Statement : Assignment	<<  >>`,
		Id:         "Statement",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "=" Rvalue	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeAssignment) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeAssignment)
		},
	},
	ProdTabEntry{
		String: `Lvalue : BaseLvalue	<<  >>`,
		Id:         "Lvalue",
		NTType:     5,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Lvalue : IndexedLvalue	<<  >>`,
		Id:         "Lvalue",
		NTType:     5,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BaseLvalue : FieldValue	<<  >>`,
		Id:         "BaseLvalue",
		NTType:     6,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BaseLvalue : OosvarValue	<<  >>`,
		Id:         "BaseLvalue",
		NTType:     6,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BaseLvalue : FullSrec	<<  >>`,
		Id:         "BaseLvalue",
		NTType:     6,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BaseLvalue : FullOosvar	<<  >>`,
		Id:         "BaseLvalue",
		NTType:     6,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IndexedLvalue : Lvalue "[" Rvalue "]"	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("[]", X[1]),
      X[0],
      X[2],
      dsl.NodeTypeIndexedLvalue,
    ) >>`,
		Id:         "IndexedLvalue",
		NTType:     7,
		Index:      14,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("[]", X[1]),
				X[0],
				X[2],
				dsl.NodeTypeIndexedLvalue,
			)
		},
	},
	ProdTabEntry{
		String: `FieldValue : DirectFieldValue	<<  >>`,
		Id:         "FieldValue",
		NTType:     8,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FieldValue : IndirectFieldValue	<<  >>`,
		Id:         "FieldValue",
		NTType:     8,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FieldValue : BracedFieldValue	<<  >>`,
		Id:         "FieldValue",
		NTType:     8,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DirectFieldValue : md_token_field_name	<< dsl.NewASTNodeStripDollarOrAtSign(X[0], dsl.NodeTypeDirectFieldValue) >>`,
		Id:         "DirectFieldValue",
		NTType:     9,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeStripDollarOrAtSign(X[0], dsl.NodeTypeDirectFieldValue)
		},
	},
	ProdTabEntry{
		String: `IndirectFieldValue : "$[" Rvalue "]"	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeIndirectFieldValue) >>`,
		Id:         "IndirectFieldValue",
		NTType:     10,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeIndirectFieldValue)
		},
	},
	ProdTabEntry{
		String: `BracedFieldValue : md_token_braced_field_name	<< dsl.NewASTNodeStripDollarOrAtSignAndCurlyBraces(X[0], dsl.NodeTypeDirectFieldValue) >>`,
		Id:         "BracedFieldValue",
		NTType:     11,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeStripDollarOrAtSignAndCurlyBraces(X[0], dsl.NodeTypeDirectFieldValue)
		},
	},
	ProdTabEntry{
		String: `FullSrec : md_token_full_srec	<< dsl.NewASTNode(X[0], dsl.NodeTypeFullSrec) >>`,
		Id:         "FullSrec",
		NTType:     12,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeFullSrec)
		},
	},
	ProdTabEntry{
		String: `OosvarValue : DirectOosvarValue	<<  >>`,
		Id:         "OosvarValue",
		NTType:     13,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `OosvarValue : IndirectOosvarValue	<<  >>`,
		Id:         "OosvarValue",
		NTType:     13,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `OosvarValue : BracedOosvarValue	<<  >>`,
		Id:         "OosvarValue",
		NTType:     13,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `DirectOosvarValue : md_token_oosvar_name	<< dsl.NewASTNodeStripDollarOrAtSign(X[0], dsl.NodeTypeDirectOosvarValue) >>`,
		Id:         "DirectOosvarValue",
		NTType:     14,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeStripDollarOrAtSign(X[0], dsl.NodeTypeDirectOosvarValue)
		},
	},
	ProdTabEntry{
		String: `IndirectOosvarValue : "@[" Rvalue "]"	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeIndirectOosvarValue) >>`,
		Id:         "IndirectOosvarValue",
		NTType:     15,
		Index:      26,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeIndirectOosvarValue)
		},
	},
	ProdTabEntry{
		String: `BracedOosvarValue : md_token_braced_oosvar_name	<< dsl.NewASTNodeStripDollarOrAtSignAndCurlyBraces(X[0], dsl.NodeTypeDirectOosvarValue) >>`,
		Id:         "BracedOosvarValue",
		NTType:     16,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeStripDollarOrAtSignAndCurlyBraces(X[0], dsl.NodeTypeDirectOosvarValue)
		},
	},
	ProdTabEntry{
		String: `FullOosvar : md_token_full_oosvar	<< dsl.NewASTNode(X[0], dsl.NodeTypeFullOosvar) >>`,
		Id:         "FullOosvar",
		NTType:     17,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeFullOosvar)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "||=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("||", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      29,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("||", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "^^=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^^", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      30,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^^", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "&&=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("&&", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("&&", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "|=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("|", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      32,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("|", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "^=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "^=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("^", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "<<=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("<<", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("<<", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue ">>=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken(">"+">", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      36,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken(">"+">", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "+=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("+", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("+", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue ".=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken(".", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken(".", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "-=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("-", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("-", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "*=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("*", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("*", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "/=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("/", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("/", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "//=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("//", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("//", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "%!=(MISSING)" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("%", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      43,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("%", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Assignment : Lvalue "**=" Rvalue	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("=", X[1]),
      X[0],
      dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("**", X[1]), X[0], X[2], dsl.NodeTypeOperator),
      dsl.NodeTypeAssignment,
    ) >>`,
		Id:         "Assignment",
		NTType:     4,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("=", X[1]),
				X[0],
				dsl.NewASTNodeBinaryNestable(dsl.NewASTToken("**", X[1]), X[0], X[2], dsl.NodeTypeOperator),
				dsl.NodeTypeAssignment,
			)
		},
	},
	ProdTabEntry{
		String: `Rvalue : PrecedenceChainStart	<<  >>`,
		Id:         "Rvalue",
		NTType:     18,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrecedenceChainStart : TernaryTerm	<<  >>`,
		Id:         "PrecedenceChainStart",
		NTType:     19,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TernaryTerm : LogicalOrTerm "?" TernaryTerm ":" TernaryTerm	<< dsl.NewASTNodeTernary(dsl.NewASTToken("?:", X[1]), X[0], X[2], X[4], dsl.NodeTypeOperator) >>`,
		Id:         "TernaryTerm",
		NTType:     20,
		Index:      47,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeTernary(dsl.NewASTToken("?:", X[1]), X[0], X[2], X[4], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `TernaryTerm : LogicalOrTerm	<<  >>`,
		Id:         "TernaryTerm",
		NTType:     20,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LogicalOrTerm : LogicalOrTerm "||" LogicalXORTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "LogicalOrTerm",
		NTType:     21,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `LogicalOrTerm : LogicalXORTerm	<<  >>`,
		Id:         "LogicalOrTerm",
		NTType:     21,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LogicalXORTerm : LogicalXORTerm "^^" LogicalAndTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "LogicalXORTerm",
		NTType:     22,
		Index:      51,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `LogicalXORTerm : LogicalAndTerm	<<  >>`,
		Id:         "LogicalXORTerm",
		NTType:     22,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LogicalAndTerm : LogicalAndTerm "&&" EqneTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "LogicalAndTerm",
		NTType:     23,
		Index:      53,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `LogicalAndTerm : EqneTerm	<<  >>`,
		Id:         "LogicalAndTerm",
		NTType:     23,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EqneTerm : EqneTerm "=~" CmpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "EqneTerm",
		NTType:     24,
		Index:      55,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `EqneTerm : EqneTerm "!=~" CmpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "EqneTerm",
		NTType:     24,
		Index:      56,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `EqneTerm : EqneTerm "==" CmpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "EqneTerm",
		NTType:     24,
		Index:      57,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `EqneTerm : EqneTerm "!=" CmpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "EqneTerm",
		NTType:     24,
		Index:      58,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `EqneTerm : CmpTerm	<<  >>`,
		Id:         "EqneTerm",
		NTType:     24,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CmpTerm : CmpTerm ">" BitwiseORTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "CmpTerm",
		NTType:     25,
		Index:      60,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `CmpTerm : CmpTerm ">=" BitwiseORTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "CmpTerm",
		NTType:     25,
		Index:      61,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `CmpTerm : CmpTerm "<" BitwiseORTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "CmpTerm",
		NTType:     25,
		Index:      62,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `CmpTerm : CmpTerm "<=" BitwiseORTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "CmpTerm",
		NTType:     25,
		Index:      63,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `CmpTerm : BitwiseORTerm	<<  >>`,
		Id:         "CmpTerm",
		NTType:     25,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BitwiseORTerm : BitwiseORTerm "|" BitwiseXORTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "BitwiseORTerm",
		NTType:     26,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `BitwiseORTerm : BitwiseXORTerm	<<  >>`,
		Id:         "BitwiseORTerm",
		NTType:     26,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BitwiseXORTerm : BitwiseXORTerm "^" BitwiseANDTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "BitwiseXORTerm",
		NTType:     27,
		Index:      67,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `BitwiseXORTerm : BitwiseANDTerm	<<  >>`,
		Id:         "BitwiseXORTerm",
		NTType:     27,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BitwiseANDTerm : BitwiseANDTerm "&" BitwiseShiftTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "BitwiseANDTerm",
		NTType:     28,
		Index:      69,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `BitwiseANDTerm : BitwiseShiftTerm	<<  >>`,
		Id:         "BitwiseANDTerm",
		NTType:     28,
		Index:      70,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BitwiseShiftTerm : BitwiseShiftTerm "<<" AddsubdotTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "BitwiseShiftTerm",
		NTType:     29,
		Index:      71,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `BitwiseShiftTerm : BitwiseShiftTerm ">>" AddsubdotTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "BitwiseShiftTerm",
		NTType:     29,
		Index:      72,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `BitwiseShiftTerm : AddsubdotTerm	<<  >>`,
		Id:         "BitwiseShiftTerm",
		NTType:     29,
		Index:      73,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AddsubdotTerm : AddsubdotTerm "+" MuldivTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "AddsubdotTerm",
		NTType:     30,
		Index:      74,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `AddsubdotTerm : AddsubdotTerm "-" MuldivTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "AddsubdotTerm",
		NTType:     30,
		Index:      75,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `AddsubdotTerm : AddsubdotTerm ".+" MuldivTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "AddsubdotTerm",
		NTType:     30,
		Index:      76,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `AddsubdotTerm : AddsubdotTerm ".-" MuldivTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "AddsubdotTerm",
		NTType:     30,
		Index:      77,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `AddsubdotTerm : AddsubdotTerm "." MuldivTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "AddsubdotTerm",
		NTType:     30,
		Index:      78,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `AddsubdotTerm : MuldivTerm	<<  >>`,
		Id:         "AddsubdotTerm",
		NTType:     30,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm "*" UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      80,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm "/" UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      81,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm "//" UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      82,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm "%!"(MISSING) UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      83,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm ".*" UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      84,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm "./" UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      85,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : MuldivTerm ".//" UnaryOpTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      86,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `MuldivTerm : UnaryOpTerm	<<  >>`,
		Id:         "MuldivTerm",
		NTType:     31,
		Index:      87,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : "+" PowTerm	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator) >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      88,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : "-" PowTerm	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator) >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      89,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : ".+" PowTerm	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator) >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      90,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : ".-" PowTerm	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator) >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      91,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : "!" PowTerm	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator) >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      92,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : "~" PowTerm	<< dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator) >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      93,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], X[1], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `UnaryOpTerm : PowTerm	<<  >>`,
		Id:         "UnaryOpTerm",
		NTType:     32,
		Index:      94,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PowTerm : PrecedenceChainEnd "**" PowTerm	<< dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator) >>`,
		Id:         "PowTerm",
		NTType:     33,
		Index:      95,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(X[1], X[0], X[2], dsl.NodeTypeOperator)
		},
	},
	ProdTabEntry{
		String: `PowTerm : PrecedenceChainEnd	<<  >>`,
		Id:         "PowTerm",
		NTType:     33,
		Index:      96,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrecedenceChainEnd : "(" Rvalue ")"	<< dsl.Nestable(X[1]) >>`,
		Id:         "PrecedenceChainEnd",
		NTType:     34,
		Index:      97,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.Nestable(X[1])
		},
	},
	ProdTabEntry{
		String: `PrecedenceChainEnd : MlrvalOrFunction	<<  >>`,
		Id:         "PrecedenceChainEnd",
		NTType:     34,
		Index:      98,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : FieldValue	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      99,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : FullSrec	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      100,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : OosvarValue	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      101,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : FullOosvar	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      102,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : md_token_string_literal	<< dsl.NewASTNodeStripDoubleQuotePair(
    X[0],
    dsl.NodeTypeStringLiteral,
  ) >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      103,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeStripDoubleQuotePair(
				X[0],
				dsl.NodeTypeStringLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : md_token_int_literal	<< dsl.NewASTNode(X[0], dsl.NodeTypeIntLiteral) >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      104,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeIntLiteral)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : md_token_float_literal	<< dsl.NewASTNode(X[0], dsl.NodeTypeFloatLiteral) >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      105,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeFloatLiteral)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : md_token_boolean_literal	<< dsl.NewASTNode(X[0], dsl.NodeTypeBoolLiteral) >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      106,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeBoolLiteral)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : md_token_panic	<< dsl.NewASTNode(X[0], dsl.NodeTypePanic) >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      107,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypePanic)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : ArrayLiteral	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      108,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArrayLiteral : "[" "]"	<< dsl.NewASTNodeZary(
      dsl.NewASTToken("[]", X[0]),
      dsl.NodeTypeArrayLiteral,
    ) >>`,
		Id:         "ArrayLiteral",
		NTType:     36,
		Index:      109,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeZary(
				dsl.NewASTToken("[]", X[0]),
				dsl.NodeTypeArrayLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `ArrayLiteral : "[" ArrayLiteralElements "]"	<< dsl.AdoptChildren(
      dsl.NewASTNodeNestable(
        dsl.NewASTToken("[]", X[0]),
        dsl.NodeTypeArrayLiteral,
      ),
      X[1],
    ) >>`,
		Id:         "ArrayLiteral",
		NTType:     36,
		Index:      110,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.AdoptChildren(
				dsl.NewASTNodeNestable(
					dsl.NewASTToken("[]", X[0]),
					dsl.NodeTypeArrayLiteral,
				),
				X[1],
			)
		},
	},
	ProdTabEntry{
		String: `ArrayLiteralElements : ArrayLiteralElement	<< dsl.NewASTNodeUnary(
      nil,
      X[0],
      dsl.NodeTypeArrayLiteral,
    ) >>`,
		Id:         "ArrayLiteralElements",
		NTType:     37,
		Index:      111,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(
				nil,
				X[0],
				dsl.NodeTypeArrayLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `ArrayLiteralElements : ArrayLiteralElement ","	<< dsl.NewASTNodeUnary(
      nil,
      X[0],
      dsl.NodeTypeArrayLiteral,
    ) >>`,
		Id:         "ArrayLiteralElements",
		NTType:     37,
		Index:      112,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(
				nil,
				X[0],
				dsl.NodeTypeArrayLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `ArrayLiteralElements : ArrayLiteralElement "," ArrayLiteralElements	<< dsl.PrependChild(
      X[2],
      X[0],
    ) >>`,
		Id:         "ArrayLiteralElements",
		NTType:     37,
		Index:      113,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.PrependChild(
				X[2],
				X[0],
			)
		},
	},
	ProdTabEntry{
		String: `ArrayLiteralElement : Rvalue	<<  >>`,
		Id:         "ArrayLiteralElement",
		NTType:     38,
		Index:      114,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : MapLiteral	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      115,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MapLiteral : "{" "}"	<< dsl.NewASTNodeZary(
      dsl.NewASTToken("{}", X[0]),
      dsl.NodeTypeMapLiteral,
    ) >>`,
		Id:         "MapLiteral",
		NTType:     39,
		Index:      116,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeZary(
				dsl.NewASTToken("{}", X[0]),
				dsl.NodeTypeMapLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `MapLiteral : "{" MapLiteralKeyValuePairs "}"	<< dsl.AdoptChildren(
      dsl.NewASTNodeNestable(
        dsl.NewASTToken("{}", X[0]),
        dsl.NodeTypeMapLiteral,
      ),
      X[1],
    ) >>`,
		Id:         "MapLiteral",
		NTType:     39,
		Index:      117,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.AdoptChildren(
				dsl.NewASTNodeNestable(
					dsl.NewASTToken("{}", X[0]),
					dsl.NodeTypeMapLiteral,
				),
				X[1],
			)
		},
	},
	ProdTabEntry{
		String: `MapLiteralKeyValuePairs : MapLiteralKeyValuePair	<< dsl.NewASTNodeUnary(
      nil,
      X[0],
      dsl.NodeTypeMapLiteral,
    ) >>`,
		Id:         "MapLiteralKeyValuePairs",
		NTType:     40,
		Index:      118,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(
				nil,
				X[0],
				dsl.NodeTypeMapLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `MapLiteralKeyValuePairs : MapLiteralKeyValuePair ","	<< dsl.NewASTNodeUnary(
      nil,
      X[0],
      dsl.NodeTypeMapLiteral,
    ) >>`,
		Id:         "MapLiteralKeyValuePairs",
		NTType:     40,
		Index:      119,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(
				nil,
				X[0],
				dsl.NodeTypeMapLiteral,
			)
		},
	},
	ProdTabEntry{
		String: `MapLiteralKeyValuePairs : MapLiteralKeyValuePair "," MapLiteralKeyValuePairs	<< dsl.PrependChild(
      X[2],
      X[0],
    ) >>`,
		Id:         "MapLiteralKeyValuePairs",
		NTType:     40,
		Index:      120,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.PrependChild(
				X[2],
				X[0],
			)
		},
	},
	ProdTabEntry{
		String: `MapLiteralKeyValuePair : Rvalue ":" Rvalue	<< dsl.NewASTNodeBinary(
      X[1],
      X[0],
      X[2],
      dsl.NodeTypeMapLiteralKeyValuePair,
    ) >>`,
		Id:         "MapLiteralKeyValuePair",
		NTType:     41,
		Index:      121,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				X[1],
				X[0],
				X[2],
				dsl.NodeTypeMapLiteralKeyValuePair,
			)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : ContextVariable	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      122,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_IPS	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      123,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_IFS	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      124,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_IRS	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      125,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_OPS	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      126,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_OFS	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      127,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_ORS	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      128,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_NF	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      129,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_NR	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      130,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_FNR	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      131,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_FILENAME	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      132,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `ContextVariable : md_token_FILENUM	<< dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable) >>`,
		Id:         "ContextVariable",
		NTType:     42,
		Index:      133,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeContextVariable)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : ArrayOrMapIndexAccess	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      134,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArrayOrMapIndexAccess : MlrvalOrFunction "[" Rvalue "]"	<< dsl.NewASTNodeBinary(
      dsl.NewASTToken("[]", X[1]),
      X[0],
      X[2],
      dsl.NodeTypeArrayOrMapIndexAccess,
    ) >>`,
		Id:         "ArrayOrMapIndexAccess",
		NTType:     43,
		Index:      135,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeBinary(
				dsl.NewASTToken("[]", X[1]),
				X[0],
				X[2],
				dsl.NodeTypeArrayOrMapIndexAccess,
			)
		},
	},
	ProdTabEntry{
		String: `MlrvalOrFunction : ArraySliceAccess	<<  >>`,
		Id:         "MlrvalOrFunction",
		NTType:     35,
		Index:      136,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArraySliceAccess : MlrvalOrFunction "[" Rvalue ":" Rvalue "]"	<< dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", X[1]),
      X[0],
      X[2],
      X[4],
      dsl.NodeTypeArraySliceAccess,
    ) >>`,
		Id:         "ArraySliceAccess",
		NTType:     44,
		Index:      137,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeTernary(
				dsl.NewASTToken("[]", X[1]),
				X[0],
				X[2],
				X[4],
				dsl.NodeTypeArraySliceAccess,
			)
		},
	},
	ProdTabEntry{
		String: `ArraySliceAccess : MlrvalOrFunction "[" ":" Rvalue "]"	<< dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", X[1]),
      X[0],
      dsl.NewASTNodeNestable(
        X[2],
        dsl.NodeTypeArraySliceEmptyLowerIndex,
      ),
      X[3],
      dsl.NodeTypeArraySliceAccess,
    ) >>`,
		Id:         "ArraySliceAccess",
		NTType:     44,
		Index:      138,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeTernary(
				dsl.NewASTToken("[]", X[1]),
				X[0],
				dsl.NewASTNodeNestable(
					X[2],
					dsl.NodeTypeArraySliceEmptyLowerIndex,
				),
				X[3],
				dsl.NodeTypeArraySliceAccess,
			)
		},
	},
	ProdTabEntry{
		String: `ArraySliceAccess : MlrvalOrFunction "[" Rvalue ":" "]"	<< dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", X[1]),
      X[0],
      X[2],
      dsl.NewASTNodeNestable(
        X[3],
        dsl.NodeTypeArraySliceEmptyUpperIndex,
      ),
      dsl.NodeTypeArraySliceAccess,
    ) >>`,
		Id:         "ArraySliceAccess",
		NTType:     44,
		Index:      139,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeTernary(
				dsl.NewASTToken("[]", X[1]),
				X[0],
				X[2],
				dsl.NewASTNodeNestable(
					X[3],
					dsl.NodeTypeArraySliceEmptyUpperIndex,
				),
				dsl.NodeTypeArraySliceAccess,
			)
		},
	},
	ProdTabEntry{
		String: `ArraySliceAccess : MlrvalOrFunction "[" ":" "]"	<< dsl.NewASTNodeTernary(
      dsl.NewASTToken("[]", X[1]),
      X[0],
      dsl.NewASTNodeNestable(
        X[2],
        dsl.NodeTypeArraySliceEmptyLowerIndex,
      ),
      dsl.NewASTNodeNestable(
        X[2],
        dsl.NodeTypeArraySliceEmptyUpperIndex,
      ),
      dsl.NodeTypeArraySliceAccess,
    ) >>`,
		Id:         "ArraySliceAccess",
		NTType:     44,
		Index:      140,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeTernary(
				dsl.NewASTToken("[]", X[1]),
				X[0],
				dsl.NewASTNodeNestable(
					X[2],
					dsl.NodeTypeArraySliceEmptyLowerIndex,
				),
				dsl.NewASTNodeNestable(
					X[2],
					dsl.NodeTypeArraySliceEmptyUpperIndex,
				),
				dsl.NodeTypeArraySliceAccess,
			)
		},
	},
}
