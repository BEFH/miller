// Code generated by gocc; DO NOT EDIT.

package parser

import "miller/dsl"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Body	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Body : StatementBlock	<< dsl.NewAST(X[0]) >>`,
		Id:         "Body",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewAST(X[0])
		},
	},
	ProdTabEntry{
		String: `StatementBlock : Statement	<< dsl.NewASTNodeUnary(X[0], dsl.NodeTypeStatementBlock) >>`,
		Id:         "StatementBlock",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNodeUnary(X[0], dsl.NodeTypeStatementBlock)
		},
	},
	ProdTabEntry{
		String: `StatementBlock : StatementBlock md_semicolon Statement	<< dsl.AppendChild(X[0], X[2]) >>`,
		Id:         "StatementBlock",
		NTType:     2,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.AppendChild(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Statement : FieldName Assign Number	<< dsl.MakeBinary(X[1], X[0], X[2]) >>`,
		Id:         "Statement",
		NTType:     3,
		Index:      4,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.MakeBinary(X[1], X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `FieldName : md_token_field_name	<< dsl.NewASTNode(X[0], dsl.NodeTypeLeaf) >>`,
		Id:         "FieldName",
		NTType:     4,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeLeaf)
		},
	},
	ProdTabEntry{
		String: `Assign : md_token_assign	<< dsl.NewASTNode(X[0], dsl.NodeTypeLeaf) >>`,
		Id:         "Assign",
		NTType:     5,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeLeaf)
		},
	},
	ProdTabEntry{
		String: `Number : md_token_number	<< dsl.NewASTNode(X[0], dsl.NodeTypeLeaf) >>`,
		Id:         "Number",
		NTType:     6,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return dsl.NewASTNode(X[0], dsl.NodeTypeLeaf)
		},
	},
}
