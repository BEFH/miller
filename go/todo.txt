----------------------------------------------------------------
TOP OF LIST:

* reg_test/run iterate

* array/map
  o fix token display in AST print
  ? --verbose ASTBuilder?
  ? --verbose CSTBuilder?

* SUMMARY:
  o easy: most verbs
  o easy: full cli
  o easy: readers/writers including TSV/ASV, and CSV heterogeneity
  o medium: sort/stats1/join
  o will take time: array/map mlrval
  o will take time: full DSL including functions, mapvals, etc

* widen verb coverage
  o label
  o rename
  o group-by
  o cut
  o count
  o repeat
  o head/tail
  o sort
  o filter
  o focus on calendar/DST/TZ improvements

* widen CLI coverage
  o --c2x et al.
  o implement mlrrc

* widen reader coverage
  o TSV/ASV
  o XTAB

â€¢ widen writer coverage
  o TSV/ASV
  o markdown

* I/O
  o --allow-ragged-csv-input|--ragged
  o --implicit-csv-header
  o --headerless-csv-output
  o new non-lite DKVP reader/writer

* widen DSL coverage
  o begin/end blocks
  o indirect field names, at LHS and RHS
  o support the filter verb

* array/map mlrval:
  k srecs as string -> mlrvals
  o add MT_ARRAY and MT_MAP to mlrval
  o support full JSON read/write of nested objects
    - only requirement is that top-level be sequence of string-valued objects ...
    - JSON-to-JSON cat-mapping should be identical
    - JSON-like accessor syntax in the grammar: $field.foo[3].bar{"bar"}
  o implement json.Unmarshaler and json.Marshaler directly for Mlrval
  o implement json.Unmarshaler and json.Marshaler directly for Lrec
  i type Unmarshaler interface { UnmarshalJSON([]byte) error }
  i type Marshaler   interface { MarshalJSON() ([]byte, error) }
  o flatten/unflatten for non-JSON I/O formats -- maybe just double-quoted JSON strings -- ?

----------------------------------------------------------------
GOCC UPSTREAMS:

* support "abc" (not just 'a' 'b' 'c') in the lexer part
* research customization of error-handling ... line numbers in particular ...

----------------------------------------------------------------
DEV NOTES:

* build-dsl
* build
* check, and git diff to see what changed
* fmter
* commit

----------------------------------------------------------------
NITS:

* "...\"..." into string-literal parsing ...
* address all manner of xxx and TODO comments
* support whitespace-only DSL strings (as NOPs), either in the parser or outside ...
* AST insertions: make a simple NodeFromToken & have all interface{} be *ASTNode, not *token.Token
* lrec -> srec everywhere
* mlr --help-for w/ stdout redirect for manpage -- ?
* mlr verb -h -> stdout & exit 0
* cst printer with reflect.TypeOf -- ?
* godoc ...
* mlrdoc false && 4, true || 4 because of short-circuiting requirement
* update whyc.html with efficiency notes from go/README.md
