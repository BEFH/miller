----------------------------------------------------------------
TOP OF LIST:
* split up mlrcli.go
* split up mlrval.go
* widen CLI coverage
  o --c2x et al.
* widen DSL coverage
  o begin/end blocks
  o indirect field names, at LHS and RHS
  o hex inputs
  o bitwise/int operators
  o support the filter verb
* widen reader coverage
  o TSV/ASV
  o XTAB
â€¢ widen writer coverage
  o TSV/ASV
  o markdown
* I/O
  o --allow-ragged-csv-input|--ragged
  o --implicit-csv-header
  o --headerless-csv-output
* non-lite DKVP reader/writer
* widen verb coverage
  o cut
  o count
  o label
  o rename
  o repeat
  o head/tail
  o sort
  o filter
* implement mlrrc
----------------------------------------------------------------

general plan:
* lots of trivial things are just a matter of keystroking
* defer them while focusing on what's hard (and maybe most worthwhile about the Go port)

harder / more worthy:
~ streaming JSON reader
  -> w/ and w/o enclosing [...] !
~ streaming RFC-compliant CSV reader
k srec with mlrval values
  k solve the JIT issue for formatting of numeric values
* sort
* stats1
* calendar/DST/TZ
~ DSL

easier:
* most of the verbs
* most of the file formats

bonuses:
* non-lite dkvp as easy extension of golib CSV reader :D

also:
* update whyc.html with efficiency notes from go/README.md

long-term:
k srecs as string -> mlrvals
* then srecs as string -> (mlrval | mlhmmv)
* support full json read/write
  o only requirement is that top-level be sequence of string-valued objects ...
  o json-to-json cat-mapping should be identical
  o json-like accessor syntax in the grammar: $field.foo[3].bar{"bar"}

gocc upstreams:
* support "abc" (not just 'a' 'b' 'c') in the lexer part
* research customization of error-handling ... line numbers in particular ...

----------------------------------------------------------------
nits:
* split up mlrcli
* "...\"..." into string-literal parsing ...
* address all manner of xxx and TODO comments
* support whitespace-only DSL strings (as NOPs), either in the parser or outside ...
* AST insertions: make a simple NodeFromToken & have all interface{} be *ASTNode, not *token.Token
* lrec -> srec everywhere
* mlr --help-for w/ stdout redirect for manpage -- ?
* mlr verb -h -> stdout & exit 0
* cst printer with reflect.TypeOf -- ?
* godoc ...
