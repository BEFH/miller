----------------------------------------------------------------
TOP OF LIST:

* window.mlr, window2.mlr -> doc somewhere

! JSON null needs to be passed through as-is ... somehow ... new mlrval type??
  o note json types: string, number, boolean, null, object, array.

! come up with some kind of blank-line trigger for miller and a condition for it .....
  o i want this pattern over and over
  o also: creach feature
  o justWroteEmptyLine -> pprint too ...

! csvlite

* UDF nexts:
  ! mixing put -f/-e requires fixing "};" issue
  o more functions (see below)
  o function metadata, w/ sort-by, for online help
  o double-check $-anything in begin/end
  o regexes & associated functions -- necessary or not?
  o mlr_expect_fail extraneous check output; wut
  o ENV
  o json_parse / json_stringify functions?
  !! strlen for UTF-8; wat
  ! regex captures

!! [[]] etc to avoid inadvertent sequentials for int indices on maps.
  this should happen intentionally, not accidentally.
* Check for "Options:" in all mappers
* check for `f.Value` reassigned in all mappers -- reflects true default?
* UDS

? ;; is parse error; also {...};

* more copy-on-retain for concurrent pointer-mods !
  o make a thorough audit, and warn everywhere
  o either do copy for all retainers, or treat inrecs as immutable ...

* sliding-window averages into mapper step (C + Go)
* stats1 rank

* some more verbs
  o easies first
  o having-fields -x feature ... or something
  o join, stats1, stats2

* double-check rand-seeding
  o all rand invocations should go through the seeder for UT/other determinism

* comment-handling
  - delegator for CSV ...

! quoted NIDX
  - how with whitespace regex -- ?
! quoted DKVP
  - what about csvlite-style -- ? needs a --dkvplite ?

* clean up 'mlr --help' to not advertise things it doesn't do yet

* ASV? golang csv package parameterizes comma but not crlf :(

* mlr -f / -F
  o others in mlrcli_parse.go
  o copy over all operator help-strings from ../c

================================================================
FUNCTIONS:

  fmtnum

  joink joinkv joinv
  o map/array -> string

  splitkv splitkvx splitnv splitnvx *splita
  o string -> map / *array

  regextract regextract_or_else

  system

  sec2dhms sec2gmt sec2gmtdate sec2hms sec2localdate sec2localtime sec2localtime
  dhms2fsec dhms2sec fsec2dhms fsec2hms hms2fsec hms2sec localtime2sec gmt2sec
  strftime strftime_local strptime strptime_local

----------------------------------------------------------------
k =~ !=~
k urandint urandrange
k hexfmt
k bitcount
k atan2 pow sgn qnorm invqnorm roundm
k logifit
k madd msub mmul mexp
k mapselect mapexcept mapsum mapdiff
k depth haskey leafcount
k capitalize tolower toupper

================================================================
CATEGORIES:

* widen verb coverage

* widen CLI coverage
  o --c2x et al. -- fold in markdown
  o implement mlrrc

* I/O
  o widen reader coverage
    - TSV/ASV
    - XTAB
  o widen writer coverage
    - TSV/ASV
    - markdown
  !!! golang encoding/csv ignores blank lines -- i need those for csvlite schema-change
    detection -- needs an input-stream delegator -- ?
  o --allow-ragged-csv-input|--ragged
  o non-lite DKVP reader/writer
  o comment-filtering-compaosed io.Reader
  o make a pprint reader w/ width-detect

* widen DSL coverage
  ! print/dump/emit w/ redirect options
  o c/reg_test/run reorgs
  o err-return for array/map get/put if incorrect types ... currently go-void ...
    ! the DSL needs a full, written-down-and-published spell-out of error-eval semantics
  o typed localvars
  o for-knv
  o profile mand.mlr & check for need for idx-assign
    -> most definitely needed
  o multiple-valued return/assign -- ?
    - array destructure at LHS for multi-retval assign (maps too?)

* beyond:
  o support 'x[1]["a"]' etc notation in various verbs?
  o sort within nested data structures?
  o array-sort, map-key sort, map-value sort in the DSL?
  o closures for sorting and more -- ?!?

----------------------------------------------------------------
MAYBE:

* string index/slice access
* string/array slices on assignment LHS -- ?
* push/pop/shift/unshift subroutines

----------------------------------------------------------------
GOCC UPSTREAMS:

* support "abc" (not just 'a' 'b' 'c') in the lexer part
* research customization of error-handling ... line numbers in particular ...

----------------------------------------------------------------
DEV NOTES:

* build-dsl
* build
* fmter
* check
* git diff to see what changed
* commit

----------------------------------------------------------------
PARSER/LEXER PLAN:

* grok ch27
* grok pike-lexer slides
* dragon at ... what level ?

----------------------------------------------------------------
NITS/NON-IMMEDIATE:

* "Miller: " prefixes on all errors.New
* libify errors.New callsites for DSL/CST
* record-readers are fully in-channel/loop; record-writers are multi with in-channel/loop being
  done by ChannelWriter, which is very small. opportunity to refactor.
* address all manner of xxx and TODO comments
* throughout -- 'map' used too much -- 'mapping/mapper' -> 'transform' or something?
* AST insertions: make a simple NodeFromToken & have all interface{} be *ASTNode, not *token.Token
* mlr --help-for w/ stdout redirect for manpage -- ?
* mlr verb -h -> stdout & exit 0
* cst printer with reflect.TypeOf -- ?
* godoc ...
* mlrdoc false && 4, true || 4 because of short-circuiting requirement
* update whyc.html with efficiency notes from go/README.md
? makefile for build-dsl: if $bnf newer than productionstable.go
* I/O perf delta between C & Go is smaller for CSV, middle for DKVP, large for JSON -- debug
* neaten/error-proof:
  o mlrmapEntry -> own keys/mlrvals -- keep the kcopy/vcopy & be very clear,
    or remove. (keeping pointers allows nil-check which is good.)
  o inrec *types.Mlrmap is good for default no-copy across channels ... needs
    a big red flag though for things like the repeat verb (maybe *only* that one ...)
! clean up the AST API. ish! :^/
* defer reg_test/run until there is quite a bit more verb/dsl/io expansion
* doc: no boolish truthy falsy
* json:
  d thorough UT for json mlrval-parser including various expect-fail error cases
  d doc re no jlistwrap on input if they want get streaming input
  d UT JSON-to-JSON cat-mapping should be identical
  d JSON-like accessor syntax in the grammar: $field[3]["bar"]
  d flatten/unflatten for non-JSON I/O formats -- maybe just double-quoted JSON strings -- ?
    - make a force-single-line writer
    - make a jsonparse DSL function -- ?
  d other formats: use JSON marshaler for collection types, maybe double-quoted
* better error-identification in the lexer / parser
  o research gocc support
  o maybe a case for hand-roll
* ICE on scan of 0xffffffffffffffff
* support 0b0101 et al.? mlrdoc if so
? dsl/ast.go -> parsing/ast.go? then, put new-ast ctor -> parsing package
  o if so, update r.mds
* keep or get rid of $[[[ ]]] ... ?
* 1-up note from mlrval_collections -> doc6
  o substr -- not backward-compatible
  o example of key-stringify to get truly awkish associative-array behavior
  o also $1 vs $[1] -- the former 'sticks' with input-data ordering.
  o moral: miller is a name-indexed tool as its primary purpose. positional
    indexing is supported but it can be confusing.
* mlrdoc: there should have always been a >>> and >>>=, and now there are
! systime printing out in scientific notation :(
! head early-out -- cite the relevant issue & fix the right way ...
* relnotes: label b,i,x vs x,i,b change
* put -- multiple -f? as in C impl?
* emit { int : string } results in absent-something :^/
* doc note 'array' is now a keyword
* dump is now redundant? print @*
* double-check dump CR-terminators depending on expression type
* doc nullish-coalesece, along with its precedence
* ordering of builtin functions in mlr -f output ........
  ? primarily by type, secondarily by name?
* CST validators: remove references to bare-boolean last statement in main block
  - this is a feature
* good example of wording for why/when to make a breaking release:
  https://webpack.js.org/blog/2020-10-10-webpack-5-release/
* unset, unassign, remove -- too many different names. also assign/put ... maybe stick w/ 2?
* make truncate() UTF8-friendly
* (absent) print on dump -- should simply be empty
* document array-unset as shiftback
! error if UDF has same name as built-in
* huge commenting pass
* profile mlr sort
* go exe 17MB, wut. try to discover. (gocc presumably but verify.)
* fill-down make columns required. also, --all.
* check triple-dash at mlr fill-down-h ; check others
* doc that multi-arg print interleaves spaces; they can strcat to avoid
* clean up unused exitCode arg in sort/put usage.
  o also document pre/post conditions for flag and non-flag usages x all mappers
* need to fix up ;; and start-with-; handling in the grammar so multiple put -f/-e work right :^/
? emit @x or emit x -- should make k/v pairs w/ "x" & value -- ? check against C impl
* doc one-variable for is over keys for maps, elements for arrays
* asserting_{type}: os.Exit(1) -> return nil, err flow?
* test put/filter w/ various combinations of -s/-e/-f
