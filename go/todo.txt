----------------------------------------------------------------
TOP OF LIST:

* go-try:

  o rename: bulk-edit for b,i,x vs x,i,b cases

  ! filter
    > bare-boolean LR-1 conflicts wut
      ? erase BNF distinction between BaseLvalue and MlrvalOrFunction
        - ... i think not
    > prepend "filter " after last ";" hack -- ? gurk if "...;..." in a string :^/
      - state machine dquote in/out w walkback; \" handling; good UT
  ! emit; print/dump
  ! quoted NIDX
    - how with whitespace regex -- ?
  ! quoted DKVP
    - what about csvlite-style -- ? needs a --dkvplite ?
  ! --implicit-csv-header
  ! cat -n -g a,b,c
  o clean up mlr --help to not advertise things it doesn't do yet
  o ASV?

* widen verb coverage
  o count
  o sort
  o filter
  o repeat
  o focus on calendar/DST/TZ improvements

* widen CLI coverage
  o --c2x et al. -- fold in markdown
  o implement mlrrc

* I/O
  o widen reader coverage
    - TSV/ASV
    - XTAB
  o widen writer coverage
    - TSV/ASV
    - markdown
  !!! golang encoding/csv ignores blank lines -- i need those for csvlite schema-change
    detection -- needs an input-stream delegator -- ?
  o --allow-ragged-csv-input|--ragged
  o --implicit-csv-header
  o new non-lite DKVP reader/writer
  o comment-filtering compaosed io.Reader
  o make a pprint reader w/ width-detect
  o '_' as empty-marker in pprint -- ? backwards-incompatible if so ...

* widen DSL coverage
  ! print/dump/emit
  o c/reg_test/run reorgs
  o err-return for array/map get/put if incorrect types ... currently go-void ...
    ! the DSL needs a full, written-down-and-published spell-out of error-eval semantics
  o begin/end hygiene:
    - AST tree-walk / CST build: must be at top level
    - tree-walk begin/end to check for invalids ($-anything etc)
    - bare-boolean last statement in main block, & not in begin/end
  o support the filter verb
  o UDFs
  o localvars
  o if/for/etc

----------------------------------------------------------------
MAYBE:

* string index/slice access
* string/array slices on assignment LHS -- ?
* push/pop/shift/unshift subroutines

----------------------------------------------------------------
GOCC UPSTREAMS:

* support "abc" (not just 'a' 'b' 'c') in the lexer part
* research customization of error-handling ... line numbers in particular ...

----------------------------------------------------------------
DEV NOTES:

* build-dsl
* build
* fmter
* check
* git diff to see what changed
* commit

----------------------------------------------------------------
PARSER/LEXER PLAN:

* grok ch27
* grok pike-lexer slides
* dragon at ... what level ?

----------------------------------------------------------------
NITS/NON-IMMEDIATE:

* "Miller: " prefixes on all errors.New
* libify errors.New callsites for DSL/CST
* record-readers are fully in-channel/loop; record-writers are multi with in-channel/loop being
  done by ChannelWriter, which is very small. opportunity to refactor.
* address all manner of xxx and TODO comments
* throughout -- 'map' used too much -- 'mapping/mapper' -> 'transform' or something?
* AST insertions: make a simple NodeFromToken & have all interface{} be *ASTNode, not *token.Token
* mlr --help-for w/ stdout redirect for manpage -- ?
* mlr verb -h -> stdout & exit 0
* cst printer with reflect.TypeOf -- ?
* godoc ...
* mlrdoc false && 4, true || 4 because of short-circuiting requirement
* update whyc.html with efficiency notes from go/README.md
? makefile for build-dsl: if $bnf newer than productionstable.go
* I/O perf delta between C & Go is smaller for CSV, middle for DKVP, large for JSON -- debug
* neaten/error-proof:
  o mlrmapEntry -> own keys/mlrvals -- keep the kcopy/vcopy & be very clear,
    or remove. (keeping pointers allows nil-check which is good.)
  o inrec *types.Mlrmap is good for default no-copy across channels ... needs
    a big red flag though for things like the repeat verb (maybe *only* that one ...)
! clean up the AST API. ish! :^/
* defer reg_test/run until there is quite a bit more verb/dsl/io expansion
* doc: no boolish truthy falsy
* json:
  d thorough UT for json mlrval-parser including various expect-fail error cases
  d doc re no jlistwrap on input if they want get streaming input
  d UT JSON-to-JSON cat-mapping should be identical
  d JSON-like accessor syntax in the grammar: $field[3]["bar"]
  d flatten/unflatten for non-JSON I/O formats -- maybe just double-quoted JSON strings -- ?
    - make a force-single-line writer
    - make a jsonparse DSL function -- ?
  d other formats: use JSON marshaler for collection types, maybe double-quoted
* better error-identification in the lexer / parser
  o research gocc support
  o maybe a case for hand-roll
* ICE on scan of 0xffffffffffffffff
* support 0b0101 et al.? mlrdoc if so
? dsl/ast.go -> parsing/ast.go? then, put new-ast ctor -> parsing package
  o if so, update r.mds
* keep or get rid of $[[[ ]]] ... ?
* 1-up note from mlrval_collections -> doc6
  o example of key-stringify to get truly awkish associative-array behavior
  o also $1 vs $[1] -- the former 'sticks' with input-data ordering.
  o moral: miller is a name-indexed tool as its primary purpose. positional
    indexing is supported but it can be confusing.
* mlrdoc: there should have always been a >>> and >>>=, and now there are
! systime printing out in scientific notation :(
! head early-out -- cite the relevant issue & fix the right way ...
