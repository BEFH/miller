
mlr --opprint --from ././reg-test/input/abixy put subr s(a,b) { $[a] = b } call s("W", 999)
a   b   i  x                   y                   W
pan pan 1  0.3467901443380824  0.7268028627434533  999
eks pan 2  0.7586799647899636  0.5221511083334797  999
wye wye 3  0.20460330576630303 0.33831852551664776 999
eks wye 4  0.38139939387114097 0.13418874328430463 999
wye pan 5  0.5732889198020006  0.8636244699032729  999
zee pan 6  0.5271261600918548  0.49322128674835697 999
eks zee 7  0.6117840605678454  0.1878849191181694  999
zee wye 8  0.5985540091064224  0.976181385699006   999
hat wye 9  0.03144187646093577 0.7495507603507059  999
pan wye 10 0.5026260055412137  0.9526183602969864  999

mlr --opprint --from ././reg-test/input/abixy put 
  func f(x,y,z) {
    return x + y + z
  }
  subr s(a,b) {
      $[a] = b;
      $DID = "YES";
  }
  $o = f($x, $y, $i);
  call s("W", NR);

a   b   i  x                   y                   o         W  DID
pan pan 1  0.3467901443380824  0.7268028627434533  2.073593  1  YES
eks pan 2  0.7586799647899636  0.5221511083334797  3.280831  2  YES
wye wye 3  0.20460330576630303 0.33831852551664776 3.542922  3  YES
eks wye 4  0.38139939387114097 0.13418874328430463 4.515588  4  YES
wye pan 5  0.5732889198020006  0.8636244699032729  6.436913  5  YES
zee pan 6  0.5271261600918548  0.49322128674835697 7.020347  6  YES
eks zee 7  0.6117840605678454  0.1878849191181694  7.799669  7  YES
zee wye 8  0.5985540091064224  0.976181385699006   9.574735  8  YES
hat wye 9  0.03144187646093577 0.7495507603507059  9.780993  9  YES
pan wye 10 0.5026260055412137  0.9526183602969864  11.455244 10 YES

mlr --opprint --from ././reg-test/input/abixy put 
  func f(x,y,z) {
    return x + y + z
  }
  subr s(a,b) {
      $[a] = b;
      return;
      $DID = "YES";
  }
  $o = f($x, $y, $i);
  call s("W", NR);

a   b   i  x                   y                   o         W
pan pan 1  0.3467901443380824  0.7268028627434533  2.073593  1
eks pan 2  0.7586799647899636  0.5221511083334797  3.280831  2
wye wye 3  0.20460330576630303 0.33831852551664776 3.542922  3
eks wye 4  0.38139939387114097 0.13418874328430463 4.515588  4
wye pan 5  0.5732889198020006  0.8636244699032729  6.436913  5
zee pan 6  0.5271261600918548  0.49322128674835697 7.020347  6
eks zee 7  0.6117840605678454  0.1878849191181694  7.799669  7
zee wye 8  0.5985540091064224  0.976181385699006   9.574735  8
hat wye 9  0.03144187646093577 0.7495507603507059  9.780993  9
pan wye 10 0.5026260055412137  0.9526183602969864  11.455244 10

mlr --from ././reg-test/input/abixy put 
  func f(x,y,z) {
    return x + y + z
  }
  subr s(a,b) {
      $[a] = b;
      return 1 # subr must not return value
  }
  $o = f($x, $y, $i);
  call s("W", NR);

mlr: return statements within user-defined subroutines must not return a value.

mlr --from ././reg-test/input/abixy put 
  func f(x,y,z) {
    return # func must return value
  }
  subr s(a,b) {
      $[a] = b;
  }
  $o = f($x, $y, $i);
  call s("W", NR);

mlr: return statements within user-defined functions must return a value.

mlr --from ././reg-test/input/abixy --opprint put func f(x) {return k} for (k,v in $*) {$o=f($x)}
a   b   i  x                   y
pan pan 1  0.3467901443380824  0.7268028627434533
eks pan 2  0.7586799647899636  0.5221511083334797
wye wye 3  0.20460330576630303 0.33831852551664776
eks wye 4  0.38139939387114097 0.13418874328430463
wye pan 5  0.5732889198020006  0.8636244699032729
zee pan 6  0.5271261600918548  0.49322128674835697
eks zee 7  0.6117840605678454  0.1878849191181694
zee wye 8  0.5985540091064224  0.976181385699006
hat wye 9  0.03144187646093577 0.7495507603507059
pan wye 10 0.5026260055412137  0.9526183602969864

mlr --from ././reg-test/input/abixy --opprint put subr foo() {print "k is [".k."]"} for (k,v in $*) {call foo()}
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
k is []
a   b   i  x                   y
pan pan 1  0.3467901443380824  0.7268028627434533
eks pan 2  0.7586799647899636  0.5221511083334797
wye wye 3  0.20460330576630303 0.33831852551664776
eks wye 4  0.38139939387114097 0.13418874328430463
wye pan 5  0.5732889198020006  0.8636244699032729
zee pan 6  0.5271261600918548  0.49322128674835697
eks zee 7  0.6117840605678454  0.1878849191181694
zee wye 8  0.5985540091064224  0.976181385699006
hat wye 9  0.03144187646093577 0.7495507603507059
pan wye 10 0.5026260055412137  0.9526183602969864

mlr --opprint --from ././reg-test/input/abixy put func log(x) { return 0 } $o = log($x)
mlr: function named "log" must not override a built-in function of the same name.

mlr --from ././reg-test/input/abixy put subr log() { print "hello record  ". NR } call log()
hello record  1
a=pan,b=pan,i=1,x=0.3467901443380824,y=0.7268028627434533
hello record  2
a=eks,b=pan,i=2,x=0.7586799647899636,y=0.5221511083334797
hello record  3
a=wye,b=wye,i=3,x=0.20460330576630303,y=0.33831852551664776
hello record  4
a=eks,b=wye,i=4,x=0.38139939387114097,y=0.13418874328430463
hello record  5
a=wye,b=pan,i=5,x=0.5732889198020006,y=0.8636244699032729
hello record  6
a=zee,b=pan,i=6,x=0.5271261600918548,y=0.49322128674835697
hello record  7
a=eks,b=zee,i=7,x=0.6117840605678454,y=0.1878849191181694
hello record  8
a=zee,b=wye,i=8,x=0.5985540091064224,y=0.976181385699006
hello record  9
a=hat,b=wye,i=9,x=0.03144187646093577,y=0.7495507603507059
hello record  10
a=pan,b=wye,i=10,x=0.5026260055412137,y=0.9526183602969864

mlr --from ././reg-test/input/abixy --opprint put func f(x) { begin {} }
mlr: begin statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put func f(x) { end {} }
mlr: end statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put subr s(x) { begin {} }
mlr: begin statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put subr s(x) { end {} }
mlr: end statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put func f(x) { func g(y) {} }
mlr: func statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put func f(x) { subr t(y) {} }
mlr: subr statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put subr s(x) { func g(y) {} }
mlr: func statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put subr s(x) { subr t(y) {} }
mlr: subr statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter func f(x) { begin {} }; true
mlr: begin statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter func f(x) { end {} }; true
mlr: end statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter subr s(x) { begin {} }; true
mlr: begin statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter subr s(x) { end {} }; true
mlr: end statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter func f(x) { func g(y) {} }; true
mlr: func statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter func f(x) { subr t(y) {} }; true
mlr: subr statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter subr s(x) { func g(y) {} }; true
mlr: func statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint filter subr s(x) { subr t(y) {} }; true
mlr: subr statements are only valid at top level.

mlr --from ././reg-test/input/abixy --opprint put func log(x) { return $x + 1 }
mlr: function named "log" must not override a built-in function of the same name.

mlr --from ././reg-test/input/abixy --opprint put func f(x) { return $x + 1 } func f(x) { return $x + 1}
mlr: function named "f" has already been defined.

mlr --from ././reg-test/input/abixy --opprint put subr s() { } subr s() { }
mlr: subroutine named "s" has already been defined.

mlr --from ././reg-test/input/abixy --opprint put subr s() { } subr s(x) { }
mlr: subroutine named "s" has already been defined.

mlr --from ././reg-test/input/abixy --opprint put subr log(text) { print "TEXT IS ".text } call log("NR is ".NR)
TEXT IS NR is 1
TEXT IS NR is 2
TEXT IS NR is 3
TEXT IS NR is 4
TEXT IS NR is 5
TEXT IS NR is 6
TEXT IS NR is 7
TEXT IS NR is 8
TEXT IS NR is 9
TEXT IS NR is 10
a   b   i  x                   y
pan pan 1  0.3467901443380824  0.7268028627434533
eks pan 2  0.7586799647899636  0.5221511083334797
wye wye 3  0.20460330576630303 0.33831852551664776
eks wye 4  0.38139939387114097 0.13418874328430463
wye pan 5  0.5732889198020006  0.8636244699032729
zee pan 6  0.5271261600918548  0.49322128674835697
eks zee 7  0.6117840605678454  0.1878849191181694
zee wye 8  0.5985540091064224  0.976181385699006
hat wye 9  0.03144187646093577 0.7495507603507059
pan wye 10 0.5026260055412137  0.9526183602969864

mlr --from ././reg-test/input/abixy put -v 
    func f(x) {
        return x**2
    }
    func g(y) {
        return y+1
    }
    subr s(a,b,c) {
        print a.b.c
    }
    begin {
        @a = 0;
        var ell = 1;
        print "local1 = ".ell;
    }
    end {
        emit @a;
        var emm = 2;
        print "local2 = ".emm;
    }
    @a += 1;
    begin {
        @b = 0;
        @c = 0;
        print "local3 = ".ell;
    }
    @b += 2;
    @c += 3;
    end {
        emit @b;
        emit @c;
        print "local4 = ".emm;
    }

RAW AST:

AST ROOT:
text="block", type=STATEMENT_BLOCK:
    text="f", type=FUNC_DEF:
        text="f", type=NON_SIGIL_NAME:
            text="x", type=UNTYPED_PARAMETER_DEFINITION.
        text="func_block", type=STATEMENT_BLOCK:
            text="return_value", type=RETURN_VALUE:
                text="**", type=OPERATOR:
                    text="x", type=NONINDEXED_LOCAL_VARIABLE.
                    text="2", type=NUMERIC_LITERAL.
    text="g", type=FUNC_DEF:
        text="g", type=NON_SIGIL_NAME:
            text="y", type=UNTYPED_PARAMETER_DEFINITION.
        text="func_block", type=STATEMENT_BLOCK:
            text="return_value", type=RETURN_VALUE:
                text="+", type=OPERATOR:
                    text="y", type=NONINDEXED_LOCAL_VARIABLE.
                    text="1", type=NUMERIC_LITERAL.
    text="s", type=SUBR_DEF:
        text="s", type=NON_SIGIL_NAME:
            text="a", type=UNTYPED_PARAMETER_DEFINITION.
            text="b", type=UNTYPED_PARAMETER_DEFINITION.
            text="c", type=UNTYPED_PARAMETER_DEFINITION.
        text="subr_block", type=STATEMENT_BLOCK:
            text="print", type=PRINT:
                text=".", type=OPERATOR:
                    text=".", type=OPERATOR:
                        text="a", type=NONINDEXED_LOCAL_VARIABLE.
                        text="b", type=NONINDEXED_LOCAL_VARIABLE.
                    text="c", type=NONINDEXED_LOCAL_VARIABLE.
                text=">", type=FILE_WRITE:
                    text="stdout", type=STDOUT:
    text="begin", type=BEGIN:
        text="begin_block", type=STATEMENT_BLOCK:
            text="=", type=OOSVAR_ASSIGNMENT:
                text="oosvar_keylist", type=OOSVAR_KEYLIST:
                    text="a", type=STRING_LITERAL.
                text="0", type=NUMERIC_LITERAL.
            text="var", type=UNTYPED_LOCAL_DEFINITION:
                text="ell", type=NONINDEXED_LOCAL_VARIABLE.
                text="1", type=NUMERIC_LITERAL.
            text="print", type=PRINT:
                text=".", type=OPERATOR:
                    text="local1 = ", type=STRING_LITERAL.
                    text="ell", type=NONINDEXED_LOCAL_VARIABLE.
                text=">", type=FILE_WRITE:
                    text="stdout", type=STDOUT:
    text="end", type=END:
        text="end_block", type=STATEMENT_BLOCK:
            text="emit", type=EMIT:
                text="emit", type=EMIT:
                    text="oosvar_keylist", type=OOSVAR_KEYLIST:
                        text="a", type=STRING_LITERAL.
                text="stream", type=STREAM:
            text="var", type=UNTYPED_LOCAL_DEFINITION:
                text="emm", type=NONINDEXED_LOCAL_VARIABLE.
                text="2", type=NUMERIC_LITERAL.
            text="print", type=PRINT:
                text=".", type=OPERATOR:
                    text="local2 = ", type=STRING_LITERAL.
                    text="emm", type=NONINDEXED_LOCAL_VARIABLE.
                text=">", type=FILE_WRITE:
                    text="stdout", type=STDOUT:
    text="=", type=OOSVAR_ASSIGNMENT:
        text="oosvar_keylist", type=OOSVAR_KEYLIST:
            text="a", type=STRING_LITERAL.
        text="+", type=OPERATOR:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="a", type=STRING_LITERAL.
            text="1", type=NUMERIC_LITERAL.
    text="begin", type=BEGIN:
        text="begin_block", type=STATEMENT_BLOCK:
            text="=", type=OOSVAR_ASSIGNMENT:
                text="oosvar_keylist", type=OOSVAR_KEYLIST:
                    text="b", type=STRING_LITERAL.
                text="0", type=NUMERIC_LITERAL.
            text="=", type=OOSVAR_ASSIGNMENT:
                text="oosvar_keylist", type=OOSVAR_KEYLIST:
                    text="c", type=STRING_LITERAL.
                text="0", type=NUMERIC_LITERAL.
            text="print", type=PRINT:
                text=".", type=OPERATOR:
                    text="local3 = ", type=STRING_LITERAL.
                    text="ell", type=NONINDEXED_LOCAL_VARIABLE.
                text=">", type=FILE_WRITE:
                    text="stdout", type=STDOUT:
    text="=", type=OOSVAR_ASSIGNMENT:
        text="oosvar_keylist", type=OOSVAR_KEYLIST:
            text="b", type=STRING_LITERAL.
        text="+", type=OPERATOR:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="b", type=STRING_LITERAL.
            text="2", type=NUMERIC_LITERAL.
    text="=", type=OOSVAR_ASSIGNMENT:
        text="oosvar_keylist", type=OOSVAR_KEYLIST:
            text="c", type=STRING_LITERAL.
        text="+", type=OPERATOR:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="c", type=STRING_LITERAL.
            text="3", type=NUMERIC_LITERAL.
    text="end", type=END:
        text="end_block", type=STATEMENT_BLOCK:
            text="emit", type=EMIT:
                text="emit", type=EMIT:
                    text="oosvar_keylist", type=OOSVAR_KEYLIST:
                        text="b", type=STRING_LITERAL.
                text="stream", type=STREAM:
            text="emit", type=EMIT:
                text="emit", type=EMIT:
                    text="oosvar_keylist", type=OOSVAR_KEYLIST:
                        text="c", type=STRING_LITERAL.
                text="stream", type=STREAM:
            text="print", type=PRINT:
                text=".", type=OPERATOR:
                    text="local4 = ", type=STRING_LITERAL.
                    text="emm", type=NONINDEXED_LOCAL_VARIABLE.
                text=">", type=FILE_WRITE:
                    text="stdout", type=STDOUT:

BLOCKED AST:

FUNCTION DEFINITION:
text="f", type=FUNC_DEF: subframe_var_count=2 max_subframe_depth=1 max_var_depth=2
    text="f", type=NON_SIGIL_NAME:
        text="x", type=UNTYPED_PARAMETER_DEFINITION. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
    text="func_block", type=STATEMENT_BLOCK:
        text="return_value", type=RETURN_VALUE:
            text="**", type=OPERATOR:
                text="x", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
                text="2", type=NUMERIC_LITERAL.

FUNCTION DEFINITION:
text="g", type=FUNC_DEF: subframe_var_count=2 max_subframe_depth=1 max_var_depth=2
    text="g", type=NON_SIGIL_NAME:
        text="y", type=UNTYPED_PARAMETER_DEFINITION. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
    text="func_block", type=STATEMENT_BLOCK:
        text="return_value", type=RETURN_VALUE:
            text="+", type=OPERATOR:
                text="y", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
                text="1", type=NUMERIC_LITERAL.

SUBROUTINE DEFINITION:
text="s", type=SUBR_DEF: subframe_var_count=4 max_subframe_depth=1 max_var_depth=4
    text="s", type=NON_SIGIL_NAME:
        text="a", type=UNTYPED_PARAMETER_DEFINITION. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
        text="b", type=UNTYPED_PARAMETER_DEFINITION. vardef_subframe_relative_index=2 vardef_subframe_index=0 vardef_frame_relative_index=2
        text="c", type=UNTYPED_PARAMETER_DEFINITION. vardef_subframe_relative_index=3 vardef_subframe_index=0 vardef_frame_relative_index=3
    text="subr_block", type=STATEMENT_BLOCK:
        text="print", type=PRINT:
            text=".", type=OPERATOR:
                text=".", type=OPERATOR:
                    text="a", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
                    text="b", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=2 vardef_subframe_index=0 vardef_frame_relative_index=2
                text="c", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=3 vardef_subframe_index=0 vardef_frame_relative_index=3
            text=">", type=FILE_WRITE:
                text="stdout", type=STDOUT:

BEGIN-BLOCK:
text="begin", type=BEGIN: subframe_var_count=2 max_subframe_depth=1 max_var_depth=2
    text="begin_block", type=STATEMENT_BLOCK:
        text="=", type=OOSVAR_ASSIGNMENT:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="a", type=STRING_LITERAL.
            text="0", type=NUMERIC_LITERAL.
        text="var", type=UNTYPED_LOCAL_DEFINITION:
            text="ell", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
            text="1", type=NUMERIC_LITERAL.
        text="print", type=PRINT:
            text=".", type=OPERATOR:
                text="local1 = ", type=STRING_LITERAL.
                text="ell", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
            text=">", type=FILE_WRITE:
                text="stdout", type=STDOUT:

BEGIN-BLOCK:
text="begin", type=BEGIN: subframe_var_count=1 max_subframe_depth=1 max_var_depth=1
    text="begin_block", type=STATEMENT_BLOCK:
        text="=", type=OOSVAR_ASSIGNMENT:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="b", type=STRING_LITERAL.
            text="0", type=NUMERIC_LITERAL.
        text="=", type=OOSVAR_ASSIGNMENT:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="c", type=STRING_LITERAL.
            text="0", type=NUMERIC_LITERAL.
        text="print", type=PRINT:
            text=".", type=OPERATOR:
                text="local3 = ", type=STRING_LITERAL.
                text="ell", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=0 vardef_subframe_index=0 vardef_frame_relative_index=0
            text=">", type=FILE_WRITE:
                text="stdout", type=STDOUT:

END-BLOCK:
text="end", type=END: subframe_var_count=2 max_subframe_depth=1 max_var_depth=2
    text="end_block", type=STATEMENT_BLOCK:
        text="emit", type=EMIT:
            text="emit", type=EMIT:
                text="oosvar_keylist", type=OOSVAR_KEYLIST:
                    text="a", type=STRING_LITERAL.
            text="stream", type=STREAM:
        text="var", type=UNTYPED_LOCAL_DEFINITION:
            text="emm", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
            text="2", type=NUMERIC_LITERAL.
        text="print", type=PRINT:
            text=".", type=OPERATOR:
                text="local2 = ", type=STRING_LITERAL.
                text="emm", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=1 vardef_subframe_index=0 vardef_frame_relative_index=1
            text=">", type=FILE_WRITE:
                text="stdout", type=STDOUT:

END-BLOCK:
text="end", type=END: subframe_var_count=1 max_subframe_depth=1 max_var_depth=1
    text="end_block", type=STATEMENT_BLOCK:
        text="emit", type=EMIT:
            text="emit", type=EMIT:
                text="oosvar_keylist", type=OOSVAR_KEYLIST:
                    text="b", type=STRING_LITERAL.
            text="stream", type=STREAM:
        text="emit", type=EMIT:
            text="emit", type=EMIT:
                text="oosvar_keylist", type=OOSVAR_KEYLIST:
                    text="c", type=STRING_LITERAL.
            text="stream", type=STREAM:
        text="print", type=PRINT:
            text=".", type=OPERATOR:
                text="local4 = ", type=STRING_LITERAL.
                text="emm", type=NONINDEXED_LOCAL_VARIABLE. vardef_subframe_relative_index=0 vardef_subframe_index=0 vardef_frame_relative_index=0
            text=">", type=FILE_WRITE:
                text="stdout", type=STDOUT:

MAIN BLOCK:
text="main_block", type=STATEMENT_BLOCK: subframe_var_count=1 max_subframe_depth=1 max_var_depth=1
    text="=", type=OOSVAR_ASSIGNMENT:
        text="oosvar_keylist", type=OOSVAR_KEYLIST:
            text="a", type=STRING_LITERAL.
        text="+", type=OPERATOR:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="a", type=STRING_LITERAL.
            text="1", type=NUMERIC_LITERAL.
    text="=", type=OOSVAR_ASSIGNMENT:
        text="oosvar_keylist", type=OOSVAR_KEYLIST:
            text="b", type=STRING_LITERAL.
        text="+", type=OPERATOR:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="b", type=STRING_LITERAL.
            text="2", type=NUMERIC_LITERAL.
    text="=", type=OOSVAR_ASSIGNMENT:
        text="oosvar_keylist", type=OOSVAR_KEYLIST:
            text="c", type=STRING_LITERAL.
        text="+", type=OPERATOR:
            text="oosvar_keylist", type=OOSVAR_KEYLIST:
                text="c", type=STRING_LITERAL.
            text="3", type=NUMERIC_LITERAL.

local1 = 1
local3 = 
a=pan,b=pan,i=1,x=0.3467901443380824,y=0.7268028627434533
a=eks,b=pan,i=2,x=0.7586799647899636,y=0.5221511083334797
a=wye,b=wye,i=3,x=0.20460330576630303,y=0.33831852551664776
a=eks,b=wye,i=4,x=0.38139939387114097,y=0.13418874328430463
a=wye,b=pan,i=5,x=0.5732889198020006,y=0.8636244699032729
a=zee,b=pan,i=6,x=0.5271261600918548,y=0.49322128674835697
a=eks,b=zee,i=7,x=0.6117840605678454,y=0.1878849191181694
a=zee,b=wye,i=8,x=0.5985540091064224,y=0.976181385699006
a=hat,b=wye,i=9,x=0.03144187646093577,y=0.7495507603507059
a=pan,b=wye,i=10,x=0.5026260055412137,y=0.9526183602969864
local2 = 2
local4 = 
a=10
b=20
c=30

mlr --from ././reg-test/input/abixy --opprint put subr log(text) { print "TEXT IS ".text } call log("NR is ".NR)
TEXT IS NR is 1
TEXT IS NR is 2
TEXT IS NR is 3
TEXT IS NR is 4
TEXT IS NR is 5
TEXT IS NR is 6
TEXT IS NR is 7
TEXT IS NR is 8
TEXT IS NR is 9
TEXT IS NR is 10
a   b   i  x                   y
pan pan 1  0.3467901443380824  0.7268028627434533
eks pan 2  0.7586799647899636  0.5221511083334797
wye wye 3  0.20460330576630303 0.33831852551664776
eks wye 4  0.38139939387114097 0.13418874328430463
wye pan 5  0.5732889198020006  0.8636244699032729
zee pan 6  0.5271261600918548  0.49322128674835697
eks zee 7  0.6117840605678454  0.1878849191181694
zee wye 8  0.5985540091064224  0.976181385699006
hat wye 9  0.03144187646093577 0.7495507603507059
pan wye 10 0.5026260055412137  0.9526183602969864

mlr --from ././reg-test/input/abixy --opprint put func f(text) { print "TEXT IS ".text; return text.text } $o = f($a)
TEXT IS pan
TEXT IS eks
TEXT IS wye
TEXT IS eks
TEXT IS wye
TEXT IS zee
TEXT IS eks
TEXT IS zee
TEXT IS hat
TEXT IS pan
a   b   i  x                   y                   o
pan pan 1  0.3467901443380824  0.7268028627434533  panpan
eks pan 2  0.7586799647899636  0.5221511083334797  ekseks
wye wye 3  0.20460330576630303 0.33831852551664776 wyewye
eks wye 4  0.38139939387114097 0.13418874328430463 ekseks
wye pan 5  0.5732889198020006  0.8636244699032729  wyewye
zee pan 6  0.5271261600918548  0.49322128674835697 zeezee
eks zee 7  0.6117840605678454  0.1878849191181694  ekseks
zee wye 8  0.5985540091064224  0.976181385699006   zeezee
hat wye 9  0.03144187646093577 0.7495507603507059  hathat
pan wye 10 0.5026260055412137  0.9526183602969864  panpan

mlr --from ././reg-test/input/abixy put begin{@x=1} func f(x) { dump; print "hello"                 } $o=f($i)
{
  "x": 1
}
hello
a=pan,b=pan,i=1,x=0.3467901443380824,y=0.7268028627434533
{
  "x": 1
}
hello
a=eks,b=pan,i=2,x=0.7586799647899636,y=0.5221511083334797
{
  "x": 1
}
hello
a=wye,b=wye,i=3,x=0.20460330576630303,y=0.33831852551664776
{
  "x": 1
}
hello
a=eks,b=wye,i=4,x=0.38139939387114097,y=0.13418874328430463
{
  "x": 1
}
hello
a=wye,b=pan,i=5,x=0.5732889198020006,y=0.8636244699032729
{
  "x": 1
}
hello
a=zee,b=pan,i=6,x=0.5271261600918548,y=0.49322128674835697
{
  "x": 1
}
hello
a=eks,b=zee,i=7,x=0.6117840605678454,y=0.1878849191181694
{
  "x": 1
}
hello
a=zee,b=wye,i=8,x=0.5985540091064224,y=0.976181385699006
{
  "x": 1
}
hello
a=hat,b=wye,i=9,x=0.03144187646093577,y=0.7495507603507059
{
  "x": 1
}
hello
a=pan,b=wye,i=10,x=0.5026260055412137,y=0.9526183602969864

mlr --from ././reg-test/input/abixy put begin{@x=1} func f(x) { dump; print "hello"; tee  > "x", $* } $o=f($i)
mlr: tee statements are not valid within func blocks.

mlr --from ././reg-test/input/abixy put begin{@x=1} func f(x) { dump; print "hello"; emit > "x", @* } $o=f($i)
mlr: emit statements are not valid within func blocks.

