
mlr --opprint put -v begin{@ox=0}; $d=$x-@ox; @ox=$x ./reg-test/input/abixy
DSL EXPRESSION:
begin{@ox=0}; $d=$x-@ox; @ox=$x
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "ox"
                * int literal "0"
    * assignment "="
        * direct field value "d"
        * operator "-"
            * direct field value "x"
            * direct oosvar value "ox"
    * assignment "="
        * direct oosvar value "ox"
        * direct field value "x"

a   b   i  x                   y                   d
pan pan 1  0.3467901443380824  0.7268028627434533  0.3467901443380824
eks pan 2  0.7586799647899636  0.5221511083334797  0.41188982045188116
wye wye 3  0.20460330576630303 0.33831852551664776 -0.5540766590236605
eks wye 4  0.38139939387114097 0.13418874328430463 0.17679608810483793
wye pan 5  0.5732889198020006  0.8636244699032729  0.19188952593085962
zee pan 6  0.5271261600918548  0.49322128674835697 -0.04616275971014583
eks zee 7  0.6117840605678454  0.1878849191181694  0.08465790047599064
zee wye 8  0.5985540091064224  0.976181385699006   -0.013230051461422976
hat wye 9  0.03144187646093577 0.7495507603507059  -0.5671121326454867
pan wye 10 0.5026260055412137  0.9526183602969864  0.47118412908027796

mlr --opprint put -v begin{@ox="no"}; $d=@ox == "no" ? 1.0 : $x/@ox; @ox=$x then step -a ratio -f x ./reg-test/input/abixy
DSL EXPRESSION:
begin{@ox="no"}; $d=@ox == "no" ? 1.0 : $x/@ox; @ox=$x
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "ox"
                * string literal "no"
    * assignment "="
        * direct field value "d"
        * operator "?:"
            * operator "=="
                * direct oosvar value "ox"
                * string literal "no"
            * float literal "1.0"
            * operator "/"
                * direct field value "x"
                * direct oosvar value "ox"
    * assignment "="
        * direct oosvar value "ox"
        * direct field value "x"

a   b   i  x                   y                   d                   x_ratio
pan pan 1  0.3467901443380824  0.7268028627434533  1.0                 1
eks pan 2  0.7586799647899636  0.5221511083334797  2.187720663855815   2.187720663855815
wye wye 3  0.20460330576630303 0.33831852551664776 0.269683285788292   0.269683285788292
eks wye 4  0.38139939387114097 0.13418874328430463 1.8640920411460684  1.8640920411460684
wye pan 5  0.5732889198020006  0.8636244699032729  1.5031196404986713  1.5031196404986713
zee pan 6  0.5271261600918548  0.49322128674835697 0.919477320918588   0.919477320918588
eks zee 7  0.6117840605678454  0.1878849191181694  1.1606027302102375  1.1606027302102375
zee wye 8  0.5985540091064224  0.976181385699006   0.978374638513558   0.978374638513558
hat wye 9  0.03144187646093577 0.7495507603507059  0.05252972327071228 0.05252972327071228
pan wye 10 0.5026260055412137  0.9526183602969864  15.985878138211305  15.985878138211305

mlr --opprint put -v $d=$x/@ox; @ox=$x then step -a ratio -f x ./reg-test/input/abixy
DSL EXPRESSION:
$d=$x/@ox; @ox=$x
RAW AST:
* statement block
    * assignment "="
        * direct field value "d"
        * operator "/"
            * direct field value "x"
            * direct oosvar value "ox"
    * assignment "="
        * direct oosvar value "ox"
        * direct field value "x"

a   b   i  x                   y                   d                   x_ratio
pan pan 1  0.3467901443380824  0.7268028627434533  0.3467901443380824  1
eks pan 2  0.7586799647899636  0.5221511083334797  2.187720663855815   2.187720663855815
wye wye 3  0.20460330576630303 0.33831852551664776 0.269683285788292   0.269683285788292
eks wye 4  0.38139939387114097 0.13418874328430463 1.8640920411460684  1.8640920411460684
wye pan 5  0.5732889198020006  0.8636244699032729  1.5031196404986713  1.5031196404986713
zee pan 6  0.5271261600918548  0.49322128674835697 0.919477320918588   0.919477320918588
eks zee 7  0.6117840605678454  0.1878849191181694  1.1606027302102375  1.1606027302102375
zee wye 8  0.5985540091064224  0.976181385699006   0.978374638513558   0.978374638513558
hat wye 9  0.03144187646093577 0.7495507603507059  0.05252972327071228 0.05252972327071228
pan wye 10 0.5026260055412137  0.9526183602969864  15.985878138211305  15.985878138211305

mlr --opprint put -v begin{@ox="no"}; $d=@ox == "no" ? 1.0 : $x/@ox; @ox=$x then step -a ratio -f x ./reg-test/input/abixy
DSL EXPRESSION:
begin{@ox="no"}; $d=@ox == "no" ? 1.0 : $x/@ox; @ox=$x
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "ox"
                * string literal "no"
    * assignment "="
        * direct field value "d"
        * operator "?:"
            * operator "=="
                * direct oosvar value "ox"
                * string literal "no"
            * float literal "1.0"
            * operator "/"
                * direct field value "x"
                * direct oosvar value "ox"
    * assignment "="
        * direct oosvar value "ox"
        * direct field value "x"

a   b   i  x                   y                   d                   x_ratio
pan pan 1  0.3467901443380824  0.7268028627434533  1.0                 1
eks pan 2  0.7586799647899636  0.5221511083334797  2.187720663855815   2.187720663855815
wye wye 3  0.20460330576630303 0.33831852551664776 0.269683285788292   0.269683285788292
eks wye 4  0.38139939387114097 0.13418874328430463 1.8640920411460684  1.8640920411460684
wye pan 5  0.5732889198020006  0.8636244699032729  1.5031196404986713  1.5031196404986713
zee pan 6  0.5271261600918548  0.49322128674835697 0.919477320918588   0.919477320918588
eks zee 7  0.6117840605678454  0.1878849191181694  1.1606027302102375  1.1606027302102375
zee wye 8  0.5985540091064224  0.976181385699006   0.978374638513558   0.978374638513558
hat wye 9  0.03144187646093577 0.7495507603507059  0.05252972327071228 0.05252972327071228
pan wye 10 0.5026260055412137  0.9526183602969864  15.985878138211305  15.985878138211305

mlr --opprint put -v begin{@rsum = 0}; @rsum = @rsum + $x; $rsum = @rsum ./reg-test/input/abixy
DSL EXPRESSION:
begin{@rsum = 0}; @rsum = @rsum + $x; $rsum = @rsum
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "rsum"
                * int literal "0"
    * assignment "="
        * direct oosvar value "rsum"
        * operator "+"
            * direct oosvar value "rsum"
            * direct field value "x"
    * assignment "="
        * direct field value "rsum"
        * direct oosvar value "rsum"

a   b   i  x                   y                   rsum
pan pan 1  0.3467901443380824  0.7268028627434533  0.3467901443380824
eks pan 2  0.7586799647899636  0.5221511083334797  1.105470109128046
wye wye 3  0.20460330576630303 0.33831852551664776 1.3100734148943491
eks wye 4  0.38139939387114097 0.13418874328430463 1.6914728087654902
wye pan 5  0.5732889198020006  0.8636244699032729  2.264761728567491
zee pan 6  0.5271261600918548  0.49322128674835697 2.7918878886593457
eks zee 7  0.6117840605678454  0.1878849191181694  3.403671949227191
zee wye 8  0.5985540091064224  0.976181385699006   4.0022259583336135
hat wye 9  0.03144187646093577 0.7495507603507059  4.033667834794549
pan wye 10 0.5026260055412137  0.9526183602969864  4.536293840335763

mlr --opprint put -v begin{@a=0; @b=0; @c=0}; $za=@a; $zb=@b; $zc=@c; $d=@a+@b+@c; @a=@b; @b=@c; @c=$i ./reg-test/input/abixy
DSL EXPRESSION:
begin{@a=0; @b=0; @c=0}; $za=@a; $zb=@b; $zc=@c; $d=@a+@b+@c; @a=@b; @b=@c; @c=$i
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "a"
                * int literal "0"
            * assignment "="
                * direct oosvar value "b"
                * int literal "0"
            * assignment "="
                * direct oosvar value "c"
                * int literal "0"
    * assignment "="
        * direct field value "za"
        * direct oosvar value "a"
    * assignment "="
        * direct field value "zb"
        * direct oosvar value "b"
    * assignment "="
        * direct field value "zc"
        * direct oosvar value "c"
    * assignment "="
        * direct field value "d"
        * operator "+"
            * operator "+"
                * direct oosvar value "a"
                * direct oosvar value "b"
            * direct oosvar value "c"
    * assignment "="
        * direct oosvar value "a"
        * direct oosvar value "b"
    * assignment "="
        * direct oosvar value "b"
        * direct oosvar value "c"
    * assignment "="
        * direct oosvar value "c"
        * direct field value "i"

a   b   i  x                   y                   za zb zc d
pan pan 1  0.3467901443380824  0.7268028627434533  0  0  0  0
eks pan 2  0.7586799647899636  0.5221511083334797  0  0  1  1
wye wye 3  0.20460330576630303 0.33831852551664776 0  1  2  3
eks wye 4  0.38139939387114097 0.13418874328430463 1  2  3  6
wye pan 5  0.5732889198020006  0.8636244699032729  2  3  4  9
zee pan 6  0.5271261600918548  0.49322128674835697 3  4  5  12
eks zee 7  0.6117840605678454  0.1878849191181694  4  5  6  15
zee wye 8  0.5985540091064224  0.976181385699006   5  6  7  18
hat wye 9  0.03144187646093577 0.7495507603507059  6  7  8  21
pan wye 10 0.5026260055412137  0.9526183602969864  7  8  9  24

mlr --opprint put -v begin {@a=0; @b=0; @c=0}; $za=@a; $zb=@b; $zc=@c; $d=@a+@b+@c; @a=@b; @b=@c; @c=$i ./reg-test/input/abixy
DSL EXPRESSION:
begin {@a=0; @b=0; @c=0}; $za=@a; $zb=@b; $zc=@c; $d=@a+@b+@c; @a=@b; @b=@c; @c=$i
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "a"
                * int literal "0"
            * assignment "="
                * direct oosvar value "b"
                * int literal "0"
            * assignment "="
                * direct oosvar value "c"
                * int literal "0"
    * assignment "="
        * direct field value "za"
        * direct oosvar value "a"
    * assignment "="
        * direct field value "zb"
        * direct oosvar value "b"
    * assignment "="
        * direct field value "zc"
        * direct oosvar value "c"
    * assignment "="
        * direct field value "d"
        * operator "+"
            * operator "+"
                * direct oosvar value "a"
                * direct oosvar value "b"
            * direct oosvar value "c"
    * assignment "="
        * direct oosvar value "a"
        * direct oosvar value "b"
    * assignment "="
        * direct oosvar value "b"
        * direct oosvar value "c"
    * assignment "="
        * direct oosvar value "c"
        * direct field value "i"

a   b   i  x                   y                   za zb zc d
pan pan 1  0.3467901443380824  0.7268028627434533  0  0  0  0
eks pan 2  0.7586799647899636  0.5221511083334797  0  0  1  1
wye wye 3  0.20460330576630303 0.33831852551664776 0  1  2  3
eks wye 4  0.38139939387114097 0.13418874328430463 1  2  3  6
wye pan 5  0.5732889198020006  0.8636244699032729  2  3  4  9
zee pan 6  0.5271261600918548  0.49322128674835697 3  4  5  12
eks zee 7  0.6117840605678454  0.1878849191181694  4  5  6  15
zee wye 8  0.5985540091064224  0.976181385699006   5  6  7  18
hat wye 9  0.03144187646093577 0.7495507603507059  6  7  8  21
pan wye 10 0.5026260055412137  0.9526183602969864  7  8  9  24

mlr --opprint put -v begin{@ox=0}; $d=$x-@ox; @ox=$x ./reg-test/input/abixy
DSL EXPRESSION:
begin{@ox=0}; $d=$x-@ox; @ox=$x
RAW AST:
* statement block
    * begin block
        * statement block
            * assignment "="
                * direct oosvar value "ox"
                * int literal "0"
    * assignment "="
        * direct field value "d"
        * operator "-"
            * direct field value "x"
            * direct oosvar value "ox"
    * assignment "="
        * direct oosvar value "ox"
        * direct field value "x"

a   b   i  x                   y                   d
pan pan 1  0.3467901443380824  0.7268028627434533  0.3467901443380824
eks pan 2  0.7586799647899636  0.5221511083334797  0.41188982045188116
wye wye 3  0.20460330576630303 0.33831852551664776 -0.5540766590236605
eks wye 4  0.38139939387114097 0.13418874328430463 0.17679608810483793
wye pan 5  0.5732889198020006  0.8636244699032729  0.19188952593085962
zee pan 6  0.5271261600918548  0.49322128674835697 -0.04616275971014583
eks zee 7  0.6117840605678454  0.1878849191181694  0.08465790047599064
zee wye 8  0.5985540091064224  0.976181385699006   -0.013230051461422976
hat wye 9  0.03144187646093577 0.7495507603507059  -0.5671121326454867
pan wye 10 0.5026260055412137  0.9526183602969864  0.47118412908027796

mlr put -v @a=$a; @b=$b; @c=$x; end {emitf @a; emitf @b; emitf @c} ./reg-test/input/abixy
Exit status was 1; expected 0.

mlr put -v @a=$a; @b=$b; @c=$x; end{emitf @a, @b, @c} ./reg-test/input/abixy
Exit status was 1; expected 0.

mlr --opprint put -v begin {@count=0; @sum=0.0}; @count=@count+1; @sum=@sum+$x; end{@mean=@sum/@count; emitf @mean} ./reg-test/input/abixy
Exit status was 1; expected 0.

mlr --opprint put -v end{@mean=@sum/@count; emitf @mean}; begin {@count=0; @sum=0.0}; @count=@count+1; @sum=@sum+$x ./reg-test/input/abixy
Exit status was 1; expected 0.

mlr put -v begin{ @a = @b[1] }; $c = @d; @e[$i][2+$j][3] = $4; end{@f[@g[5][@h]] = 6} /dev/null
Exit status was 1; expected 0.

mlr put @y[$a]=$y; end{dump} ./reg-test/input/abixy
a=pan,b=pan,i=1,x=0.3467901443380824,y=0.7268028627434533
a=eks,b=pan,i=2,x=0.7586799647899636,y=0.5221511083334797
a=wye,b=wye,i=3,x=0.20460330576630303,y=0.33831852551664776
a=eks,b=wye,i=4,x=0.38139939387114097,y=0.13418874328430463
a=wye,b=pan,i=5,x=0.5732889198020006,y=0.8636244699032729
a=zee,b=pan,i=6,x=0.5271261600918548,y=0.49322128674835697
a=eks,b=zee,i=7,x=0.6117840605678454,y=0.1878849191181694
a=zee,b=wye,i=8,x=0.5985540091064224,y=0.976181385699006
a=hat,b=wye,i=9,x=0.03144187646093577,y=0.7495507603507059
a=pan,b=wye,i=10,x=0.5026260055412137,y=0.9526183602969864
{
  "y": {
    "pan": 0.9526183602969864,
    "eks": 0.1878849191181694,
    "wye": 0.8636244699032729,
    "zee": 0.976181385699006,
    "hat": 0.7495507603507059
  }
}

mlr stats1 -a sum -f y -g a ./reg-test/input/abixy
Exit status was 1; expected 0.

mlr put @y_sum[$a] = $y; end{dump} ./reg-test/input/abixy
a=pan,b=pan,i=1,x=0.3467901443380824,y=0.7268028627434533
a=eks,b=pan,i=2,x=0.7586799647899636,y=0.5221511083334797
a=wye,b=wye,i=3,x=0.20460330576630303,y=0.33831852551664776
a=eks,b=wye,i=4,x=0.38139939387114097,y=0.13418874328430463
a=wye,b=pan,i=5,x=0.5732889198020006,y=0.8636244699032729
a=zee,b=pan,i=6,x=0.5271261600918548,y=0.49322128674835697
a=eks,b=zee,i=7,x=0.6117840605678454,y=0.1878849191181694
a=zee,b=wye,i=8,x=0.5985540091064224,y=0.976181385699006
a=hat,b=wye,i=9,x=0.03144187646093577,y=0.7495507603507059
a=pan,b=wye,i=10,x=0.5026260055412137,y=0.9526183602969864
{
  "y_sum": {
    "pan": 0.9526183602969864,
    "eks": 0.1878849191181694,
    "wye": 0.8636244699032729,
    "zee": 0.976181385699006,
    "hat": 0.7495507603507059
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @s      ; dump} ./reg-test/input/unset1.dkvp
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}
{
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @t      ; dump} ./reg-test/input/unset1.dkvp
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}
{
  "s": 9,
  "u": {
    "1": {
      "2": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @t[1]   ; dump} ./reg-test/input/unset1.dkvp
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}
{
  "s": 9,
  "t": {},
  "u": {
    "1": {
      "2": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @u      ; dump} ./reg-test/input/unset1.dkvp
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @u[1]   ; dump} ./reg-test/input/unset1.dkvp
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {}
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @u[1][2]; dump} ./reg-test/input/unset1.dkvp
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {
      "2": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9
  },
  "u": {
    "1": {}
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @s      ; dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @t      ; dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "s": 9,
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @t[1]   ; dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @u      ; dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @u[1]   ; dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "4": {
      "5": 9,
      "6": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @u[1][2]; dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset all;      dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}

mlr put -q @s=$x; @t[$a]=$x; @u[$a][$b]=$x; end{dump; unset @*;       dump} ./reg-test/input/unset4.dkvp
{
  "s": 9,
  "t": {
    "1": 9,
    "4": 9
  },
  "u": {
    "1": {
      "2": 9,
      "3": 9
    },
    "4": {
      "5": 9,
      "6": 9
    }
  }
}
{}

mlr put unset $x ./reg-test/input/unset4.dkvp
a=1,b=2
a=1,b=3
a=4,b=5
a=4,b=6

mlr put unset $*; $aaa = 999 ./reg-test/input/unset4.dkvp
aaa=999
aaa=999
aaa=999
aaa=999

mlr --from ./reg-test/input/abixy put x = 1; print "OX=".x; unset x; print "NX=".x
OX=1
NX=
OX=1
NX=
OX=1
NX=
a=pan,b=pan,i=1,x=0.3467901443380824,y=0.7268028627434533
a=eks,b=pan,i=2,x=0.7586799647899636,y=0.5221511083334797
a=wye,b=wye,i=3,x=0.20460330576630303,y=0.33831852551664776
OX=1
NX=
OX=1
NX=
OX=1
NX=
a=eks,b=wye,i=4,x=0.38139939387114097,y=0.13418874328430463
a=wye,b=pan,i=5,x=0.5732889198020006,y=0.8636244699032729
OX=1
NX=
OX=1
NX=
a=zee,b=pan,i=6,x=0.5271261600918548,y=0.49322128674835697
a=eks,b=zee,i=7,x=0.6117840605678454,y=0.1878849191181694
a=zee,b=wye,i=8,x=0.5985540091064224,y=0.976181385699006
OX=1
NX=
OX=1
NX=
a=hat,b=wye,i=9,x=0.03144187646093577,y=0.7495507603507059
a=pan,b=wye,i=10,x=0.5026260055412137,y=0.9526183602969864

mlr put -q @{variable.name} += $x; end{emit @{variable.name}} ./reg-test/input/abixy

mlr put -q @{variable.name}[$a] += $x; end{emit @{variable.name},"a"} ./reg-test/input/abixy
Exit status was 1; expected 0.

mlr put for (k,v in $*) { if (k == "i") {unset $[k]}} ./reg-test/input/abixy
a=pan,b=pan,x=0.3467901443380824,y=0.7268028627434533
a=eks,b=pan,x=0.7586799647899636,y=0.5221511083334797
a=wye,b=wye,x=0.20460330576630303,y=0.33831852551664776
a=eks,b=wye,x=0.38139939387114097,y=0.13418874328430463
a=wye,b=pan,x=0.5732889198020006,y=0.8636244699032729
a=zee,b=pan,x=0.5271261600918548,y=0.49322128674835697
a=eks,b=zee,x=0.6117840605678454,y=0.1878849191181694
a=zee,b=wye,x=0.5985540091064224,y=0.976181385699006
a=hat,b=wye,x=0.03144187646093577,y=0.7495507603507059
a=pan,b=wye,x=0.5026260055412137,y=0.9526183602969864

mlr --opprint --from ./reg-test/input/abixy put -q 
  @output[NR] = $*;
  end {
    for ((nr, k), v in @output) {
      if (nr == 4 || k == "i") {
        unset @output[nr][k]
      }
    }
    emitp @output, "NR", "k"
  }

Exit status was 1; expected 0.

