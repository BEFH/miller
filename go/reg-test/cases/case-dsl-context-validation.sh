mlr_expect_fail -n put 'begin{begin{}}'
mlr_expect_fail -n put 'begin{end{}}'
mlr_expect_fail -n put 'end{begin{}}'
mlr_expect_fail -n put 'end{end{}}'
mlr_expect_fail -n put 'begin { func f(x) { return 2*x} }'
# TODO: once subr exists
# mlr_expect_fail -n put 'begin { subr f(x) { return 2*x} }'
mlr_expect_fail -n put 'begin { emit $x }'
mlr_expect_fail -n put 'return 3'
mlr_expect_fail -n put 'break'
mlr_expect_fail -n put 'continue'
mlr_expect_fail -n put 'func f() { break }'
mlr_expect_fail -n put 'func f() { continue }'
run_mlr -n put -v 'true'
run_mlr -n put -v 'begin{true}'
