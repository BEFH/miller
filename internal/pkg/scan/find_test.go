package scan

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFindScanTypeName(t *testing.T) {
	assert.Equal(t, typeNameString, findScanTypeName(""))
	assert.Equal(t, typeNameString, findScanTypeName("-"))
	assert.Equal(t, typeNameString, findScanTypeName("abc"))
	assert.Equal(t, typeNameString, findScanTypeName("-abc"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("0"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("-0"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("1"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("-1"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("2"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("-2"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("123"))
	assert.Equal(t, typeNameDecimalInt, findScanTypeName("-123"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("1."))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-1."))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName(".2"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-.2"))
	assert.Equal(t, typeNameString, findScanTypeName("."))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-."))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("1.2"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-1.2"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("1.2.3"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-1.2.3"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("1e2e3"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-1e2e3"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("12e-2"))
	assert.Equal(t, typeNameMaybeFloat, findScanTypeName("-12e-2"))
	assert.Equal(t, typeNameString, findScanTypeName("1e2x3"))
	assert.Equal(t, typeNameString, findScanTypeName("-1e2x3"))
	assert.Equal(t, typeNameString, findScanTypeName("0x"))
	assert.Equal(t, typeNameString, findScanTypeName("-0x"))
	assert.Equal(t, typeNameHexInt, findScanTypeName("0x0"))
	assert.Equal(t, typeNameHexInt, findScanTypeName("-0x0"))
	assert.Equal(t, typeNameHexInt, findScanTypeName("0xcafe"))
	assert.Equal(t, typeNameHexInt, findScanTypeName("-0xcafe"))
	assert.Equal(t, typeNameString, findScanTypeName("0xcape"))
	assert.Equal(t, typeNameString, findScanTypeName("-0xcape"))
	assert.Equal(t, typeNameString, findScanTypeName("0b"))
	assert.Equal(t, typeNameString, findScanTypeName("-0b"))
	assert.Equal(t, typeNameBinaryInt, findScanTypeName("0b0"))
	assert.Equal(t, typeNameBinaryInt, findScanTypeName("-0b0"))
	assert.Equal(t, typeNameBinaryInt, findScanTypeName("0b1011"))
	assert.Equal(t, typeNameBinaryInt, findScanTypeName("-0b1011"))
	assert.Equal(t, typeNameString, findScanTypeName("0b1021"))
	assert.Equal(t, typeNameString, findScanTypeName("-0b1021"))
	assert.Equal(t, typeNameBool, findScanTypeName("true"))
	assert.Equal(t, typeNameBool, findScanTypeName("true"))
	assert.Equal(t, typeNameBool, findScanTypeName("false"))
	assert.Equal(t, typeNameBool, findScanTypeName("false"))
	assert.Equal(t, typeNameString, findScanTypeName("True"))
	assert.Equal(t, typeNameString, findScanTypeName("True"))
	assert.Equal(t, typeNameString, findScanTypeName("False"))
	assert.Equal(t, typeNameString, findScanTypeName("False"))
}
