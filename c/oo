run_mlr() {
  echo
  echo ................................................................
  echo mlr "$@"
  ./mlr "$@"
  # ./vgrun ./mlr "$@"
}

run_mlr_for_auxents() {
  echo
  echo ................................................................
  echo mlr "$@"
  ./mlr "$@"
}

run_cat() {
  echo cat "$@"
  echo cat "$@" >> $outfile
  cat "$@" >> $outfile
  echo >> $outfile
}

mlr_expect_fail() {
  echo
  echo ................................................................
  echo mlr "$@"
  mlr "$@"
  status=$?
  if [ $status -ne 1 ]; then
    echo "Exit status was $status; expected 1."
  fi
}

announce() {
	echo
	echo "================================================================"
	echo "$@"
	echo
}

mention() {
	echo
	echo ---------------------------------------------------------------- "$@"
}

# ================================================================
flags="-a"

# ================================================================
#vee=-v
vee=

# ----------------------------------------------------------------

run_mlr --opprint put '$a     = $[[2]]; unset $["a"]' s
run_mlr --opprint put '$[[1]] = $b;     unset $[[1]]' s
run_mlr --opprint put '$[[1]] = $[[2]]; unset $["a"]' s

run_mlr --c2p cat input.txt

run_mlr --c2p put '$[[3]] = capitalize($[[3]])'  input.txt
run_mlr --c2p put '$[[[3]]] = capitalize($[[[3]]])'  input.txt

run_mlr --c2p put '$foo = capitalize($[[3]])'  input.txt
run_mlr --c2p put '$foo = capitalize($[[[3]]])'  input.txt

run_mlr --c2p put '$[[3]] = "NEW"'  input.txt
run_mlr --c2p put '$[[[3]]] = "NEW"'  input.txt


run_mlr --opprint put '$new1=$[[1]]; $[[11]]=$[[2]]' s
run_mlr --opprint put '$new1=$[[1]]; $[[2]]=$[[11]]' s

run_mlr --opprint put 'unset $c' s
run_mlr --opprint put 'unset $c; $c="new"' s
run_mlr --opprint put '$c=$a.$b; unset $c; $c="new"' s
run_mlr --opprint put '$c=$a.$b; unset $c' s
